// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/16/2019 22:49:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Arena_8to3Encoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Arena_8to3Encoder_vlg_sample_tst(
	Arena_Y0,
	Arena_Y1,
	Arena_Y2,
	Arena_Y3,
	Arena_Y4,
	Arena_Y5,
	Arena_Y6,
	sampler_tx
);
input  Arena_Y0;
input  Arena_Y1;
input  Arena_Y2;
input  Arena_Y3;
input  Arena_Y4;
input  Arena_Y5;
input  Arena_Y6;
output sampler_tx;

reg sample;
time current_time;
always @(Arena_Y0 or Arena_Y1 or Arena_Y2 or Arena_Y3 or Arena_Y4 or Arena_Y5 or Arena_Y6)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Arena_8to3Encoder_vlg_check_tst (
	Arena_F0,
	Arena_F1,
	Arena_F2,
	sampler_rx
);
input  Arena_F0;
input  Arena_F1;
input  Arena_F2;
input sampler_rx;

reg  Arena_F0_expected;
reg  Arena_F1_expected;
reg  Arena_F2_expected;

reg  Arena_F0_prev;
reg  Arena_F1_prev;
reg  Arena_F2_prev;

reg  Arena_F0_expected_prev;
reg  Arena_F1_expected_prev;
reg  Arena_F2_expected_prev;

reg  last_Arena_F0_exp;
reg  last_Arena_F1_exp;
reg  last_Arena_F2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Arena_F0_prev = Arena_F0;
	Arena_F1_prev = Arena_F1;
	Arena_F2_prev = Arena_F2;
end

// update expected /o prevs

always @(trigger)
begin
	Arena_F0_expected_prev = Arena_F0_expected;
	Arena_F1_expected_prev = Arena_F1_expected;
	Arena_F2_expected_prev = Arena_F2_expected;
end



// expected Arena_F0
initial
begin
	Arena_F0_expected = 1'bX;
end 

// expected Arena_F1
initial
begin
	Arena_F1_expected = 1'bX;
end 

// expected Arena_F2
initial
begin
	Arena_F2_expected = 1'bX;
end 
// generate trigger
always @(Arena_F0_expected or Arena_F0 or Arena_F1_expected or Arena_F1 or Arena_F2_expected or Arena_F2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Arena_F0 = %b | expected Arena_F1 = %b | expected Arena_F2 = %b | ",Arena_F0_expected_prev,Arena_F1_expected_prev,Arena_F2_expected_prev);
	$display("| real Arena_F0 = %b | real Arena_F1 = %b | real Arena_F2 = %b | ",Arena_F0_prev,Arena_F1_prev,Arena_F2_prev);
`endif
	if (
		( Arena_F0_expected_prev !== 1'bx ) && ( Arena_F0_prev !== Arena_F0_expected_prev )
		&& ((Arena_F0_expected_prev !== last_Arena_F0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_F0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_F0_expected_prev);
		$display ("     Real value = %b", Arena_F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_F0_exp = Arena_F0_expected_prev;
	end
	if (
		( Arena_F1_expected_prev !== 1'bx ) && ( Arena_F1_prev !== Arena_F1_expected_prev )
		&& ((Arena_F1_expected_prev !== last_Arena_F1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_F1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_F1_expected_prev);
		$display ("     Real value = %b", Arena_F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_F1_exp = Arena_F1_expected_prev;
	end
	if (
		( Arena_F2_expected_prev !== 1'bx ) && ( Arena_F2_prev !== Arena_F2_expected_prev )
		&& ((Arena_F2_expected_prev !== last_Arena_F2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_F2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_F2_expected_prev);
		$display ("     Real value = %b", Arena_F2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Arena_F2_exp = Arena_F2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#140000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Arena_8to3Encoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Arena_Y0;
reg Arena_Y1;
reg Arena_Y2;
reg Arena_Y3;
reg Arena_Y4;
reg Arena_Y5;
reg Arena_Y6;
// wires                                               
wire Arena_F0;
wire Arena_F1;
wire Arena_F2;

wire sampler;                             

// assign statements (if any)                          
Arena_8to3Encoder i1 (
// port map - connection between master ports and signals/registers   
	.Arena_F0(Arena_F0),
	.Arena_F1(Arena_F1),
	.Arena_F2(Arena_F2),
	.Arena_Y0(Arena_Y0),
	.Arena_Y1(Arena_Y1),
	.Arena_Y2(Arena_Y2),
	.Arena_Y3(Arena_Y3),
	.Arena_Y4(Arena_Y4),
	.Arena_Y5(Arena_Y5),
	.Arena_Y6(Arena_Y6)
);

// Arena_Y6
initial
begin
	Arena_Y6 = 1'b0;
	Arena_Y6 = #120000 1'b1;
end 

// Arena_Y5
initial
begin
	Arena_Y5 = 1'b0;
	Arena_Y5 = #100000 1'b1;
	Arena_Y5 = #20000 1'b0;
end 

// Arena_Y4
initial
begin
	Arena_Y4 = 1'b0;
	Arena_Y4 = #80000 1'b1;
	Arena_Y4 = #20000 1'b0;
end 

// Arena_Y3
initial
begin
	Arena_Y3 = 1'b0;
	Arena_Y3 = #60000 1'b1;
	Arena_Y3 = #20000 1'b0;
end 

// Arena_Y2
initial
begin
	Arena_Y2 = 1'b0;
	Arena_Y2 = #40000 1'b1;
	Arena_Y2 = #20000 1'b0;
end 

// Arena_Y1
initial
begin
	Arena_Y1 = 1'b0;
	Arena_Y1 = #20000 1'b1;
	Arena_Y1 = #20000 1'b0;
end 

// Arena_Y0
initial
begin
	Arena_Y0 = 1'b1;
	Arena_Y0 = #20000 1'b0;
end 

Arena_8to3Encoder_vlg_sample_tst tb_sample (
	.Arena_Y0(Arena_Y0),
	.Arena_Y1(Arena_Y1),
	.Arena_Y2(Arena_Y2),
	.Arena_Y3(Arena_Y3),
	.Arena_Y4(Arena_Y4),
	.Arena_Y5(Arena_Y5),
	.Arena_Y6(Arena_Y6),
	.sampler_tx(sampler)
);

Arena_8to3Encoder_vlg_check_tst tb_out(
	.Arena_F0(Arena_F0),
	.Arena_F1(Arena_F1),
	.Arena_F2(Arena_F2),
	.sampler_rx(sampler)
);
endmodule

