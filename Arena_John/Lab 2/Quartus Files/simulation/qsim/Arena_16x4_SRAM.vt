// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/01/2019 22:22:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Arena_4to16Decoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Arena_4to16Decoder_vlg_sample_tst(
	Arena_In,
	sampler_tx
);
input [3:0] Arena_In;
output sampler_tx;

reg sample;
time current_time;
always @(Arena_In)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Arena_4to16Decoder_vlg_check_tst (
	Arena_Dec,
	sampler_rx
);
input [15:0] Arena_Dec;
input sampler_rx;

reg [15:0] Arena_Dec_expected;

reg [15:0] Arena_Dec_prev;

reg [15:0] Arena_Dec_expected_prev;

reg [15:0] last_Arena_Dec_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	Arena_Dec_prev = Arena_Dec;
end

// update expected /o prevs

always @(trigger)
begin
	Arena_Dec_expected_prev = Arena_Dec_expected;
end



// expected Arena_Dec[0]
initial
begin
	Arena_Dec_expected[0] = 1'bX;
end 

// expected Arena_Dec[1]
initial
begin
	Arena_Dec_expected[1] = 1'bX;
end 

// expected Arena_Dec[2]
initial
begin
	Arena_Dec_expected[2] = 1'bX;
end 

// expected Arena_Dec[3]
initial
begin
	Arena_Dec_expected[3] = 1'bX;
end 

// expected Arena_Dec[4]
initial
begin
	Arena_Dec_expected[4] = 1'bX;
end 

// expected Arena_Dec[5]
initial
begin
	Arena_Dec_expected[5] = 1'bX;
end 

// expected Arena_Dec[6]
initial
begin
	Arena_Dec_expected[6] = 1'bX;
end 

// expected Arena_Dec[7]
initial
begin
	Arena_Dec_expected[7] = 1'bX;
end 

// expected Arena_Dec[8]
initial
begin
	Arena_Dec_expected[8] = 1'bX;
end 

// expected Arena_Dec[9]
initial
begin
	Arena_Dec_expected[9] = 1'bX;
end 

// expected Arena_Dec[10]
initial
begin
	Arena_Dec_expected[10] = 1'bX;
end 

// expected Arena_Dec[11]
initial
begin
	Arena_Dec_expected[11] = 1'bX;
end 

// expected Arena_Dec[12]
initial
begin
	Arena_Dec_expected[12] = 1'bX;
end 

// expected Arena_Dec[13]
initial
begin
	Arena_Dec_expected[13] = 1'bX;
end 

// expected Arena_Dec[14]
initial
begin
	Arena_Dec_expected[14] = 1'bX;
end 

// expected Arena_Dec[15]
initial
begin
	Arena_Dec_expected[15] = 1'bX;
end 
// generate trigger
always @(Arena_Dec_expected or Arena_Dec)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Arena_Dec = %b | ",Arena_Dec_expected_prev);
	$display("| real Arena_Dec = %b | ",Arena_Dec_prev);
`endif
	if (
		( Arena_Dec_expected_prev[0] !== 1'bx ) && ( Arena_Dec_prev[0] !== Arena_Dec_expected_prev[0] )
		&& ((Arena_Dec_expected_prev[0] !== last_Arena_Dec_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Dec[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Dec_expected_prev);
		$display ("     Real value = %b", Arena_Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Dec_exp[0] = Arena_Dec_expected_prev[0];
	end
	if (
		( Arena_Dec_expected_prev[1] !== 1'bx ) && ( Arena_Dec_prev[1] !== Arena_Dec_expected_prev[1] )
		&& ((Arena_Dec_expected_prev[1] !== last_Arena_Dec_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Dec[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Dec_expected_prev);
		$display ("     Real value = %b", Arena_Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Dec_exp[1] = Arena_Dec_expected_prev[1];
	end
	if (
		( Arena_Dec_expected_prev[2] !== 1'bx ) && ( Arena_Dec_prev[2] !== Arena_Dec_expected_prev[2] )
		&& ((Arena_Dec_expected_prev[2] !== last_Arena_Dec_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Dec[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Dec_expected_prev);
		$display ("     Real value = %b", Arena_Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Dec_exp[2] = Arena_Dec_expected_prev[2];
	end
	if (
		( Arena_Dec_expected_prev[3] !== 1'bx ) && ( Arena_Dec_prev[3] !== Arena_Dec_expected_prev[3] )
		&& ((Arena_Dec_expected_prev[3] !== last_Arena_Dec_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Dec[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Dec_expected_prev);
		$display ("     Real value = %b", Arena_Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Dec_exp[3] = Arena_Dec_expected_prev[3];
	end
	if (
		( Arena_Dec_expected_prev[4] !== 1'bx ) && ( Arena_Dec_prev[4] !== Arena_Dec_expected_prev[4] )
		&& ((Arena_Dec_expected_prev[4] !== last_Arena_Dec_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Dec[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Dec_expected_prev);
		$display ("     Real value = %b", Arena_Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Dec_exp[4] = Arena_Dec_expected_prev[4];
	end
	if (
		( Arena_Dec_expected_prev[5] !== 1'bx ) && ( Arena_Dec_prev[5] !== Arena_Dec_expected_prev[5] )
		&& ((Arena_Dec_expected_prev[5] !== last_Arena_Dec_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Dec[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Dec_expected_prev);
		$display ("     Real value = %b", Arena_Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Dec_exp[5] = Arena_Dec_expected_prev[5];
	end
	if (
		( Arena_Dec_expected_prev[6] !== 1'bx ) && ( Arena_Dec_prev[6] !== Arena_Dec_expected_prev[6] )
		&& ((Arena_Dec_expected_prev[6] !== last_Arena_Dec_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Dec[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Dec_expected_prev);
		$display ("     Real value = %b", Arena_Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Dec_exp[6] = Arena_Dec_expected_prev[6];
	end
	if (
		( Arena_Dec_expected_prev[7] !== 1'bx ) && ( Arena_Dec_prev[7] !== Arena_Dec_expected_prev[7] )
		&& ((Arena_Dec_expected_prev[7] !== last_Arena_Dec_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Dec[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Dec_expected_prev);
		$display ("     Real value = %b", Arena_Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Dec_exp[7] = Arena_Dec_expected_prev[7];
	end
	if (
		( Arena_Dec_expected_prev[8] !== 1'bx ) && ( Arena_Dec_prev[8] !== Arena_Dec_expected_prev[8] )
		&& ((Arena_Dec_expected_prev[8] !== last_Arena_Dec_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Dec[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Dec_expected_prev);
		$display ("     Real value = %b", Arena_Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Dec_exp[8] = Arena_Dec_expected_prev[8];
	end
	if (
		( Arena_Dec_expected_prev[9] !== 1'bx ) && ( Arena_Dec_prev[9] !== Arena_Dec_expected_prev[9] )
		&& ((Arena_Dec_expected_prev[9] !== last_Arena_Dec_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Dec[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Dec_expected_prev);
		$display ("     Real value = %b", Arena_Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Dec_exp[9] = Arena_Dec_expected_prev[9];
	end
	if (
		( Arena_Dec_expected_prev[10] !== 1'bx ) && ( Arena_Dec_prev[10] !== Arena_Dec_expected_prev[10] )
		&& ((Arena_Dec_expected_prev[10] !== last_Arena_Dec_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Dec[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Dec_expected_prev);
		$display ("     Real value = %b", Arena_Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Dec_exp[10] = Arena_Dec_expected_prev[10];
	end
	if (
		( Arena_Dec_expected_prev[11] !== 1'bx ) && ( Arena_Dec_prev[11] !== Arena_Dec_expected_prev[11] )
		&& ((Arena_Dec_expected_prev[11] !== last_Arena_Dec_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Dec[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Dec_expected_prev);
		$display ("     Real value = %b", Arena_Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Dec_exp[11] = Arena_Dec_expected_prev[11];
	end
	if (
		( Arena_Dec_expected_prev[12] !== 1'bx ) && ( Arena_Dec_prev[12] !== Arena_Dec_expected_prev[12] )
		&& ((Arena_Dec_expected_prev[12] !== last_Arena_Dec_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Dec[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Dec_expected_prev);
		$display ("     Real value = %b", Arena_Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Dec_exp[12] = Arena_Dec_expected_prev[12];
	end
	if (
		( Arena_Dec_expected_prev[13] !== 1'bx ) && ( Arena_Dec_prev[13] !== Arena_Dec_expected_prev[13] )
		&& ((Arena_Dec_expected_prev[13] !== last_Arena_Dec_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Dec[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Dec_expected_prev);
		$display ("     Real value = %b", Arena_Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Dec_exp[13] = Arena_Dec_expected_prev[13];
	end
	if (
		( Arena_Dec_expected_prev[14] !== 1'bx ) && ( Arena_Dec_prev[14] !== Arena_Dec_expected_prev[14] )
		&& ((Arena_Dec_expected_prev[14] !== last_Arena_Dec_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Dec[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Dec_expected_prev);
		$display ("     Real value = %b", Arena_Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Dec_exp[14] = Arena_Dec_expected_prev[14];
	end
	if (
		( Arena_Dec_expected_prev[15] !== 1'bx ) && ( Arena_Dec_prev[15] !== Arena_Dec_expected_prev[15] )
		&& ((Arena_Dec_expected_prev[15] !== last_Arena_Dec_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Dec[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Dec_expected_prev);
		$display ("     Real value = %b", Arena_Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Dec_exp[15] = Arena_Dec_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#320000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Arena_4to16Decoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] Arena_In;
// wires                                               
wire [15:0] Arena_Dec;

wire sampler;                             

// assign statements (if any)                          
Arena_4to16Decoder i1 (
// port map - connection between master ports and signals/registers   
	.Arena_Dec(Arena_Dec),
	.Arena_In(Arena_In)
);

// Arena_In[0]
always
begin
	Arena_In[0] = 1'b0;
	Arena_In[0] = #20000 1'b1;
	#20000;
end 

// Arena_In[1]
always
begin
	Arena_In[1] = 1'b0;
	Arena_In[1] = #40000 1'b1;
	#40000;
end 

// Arena_In[2]
always
begin
	Arena_In[2] = 1'b0;
	Arena_In[2] = #80000 1'b1;
	#80000;
end 

// Arena_In[3]
always
begin
	Arena_In[3] = 1'b0;
	Arena_In[3] = #160000 1'b1;
	#160000;
end 

Arena_4to16Decoder_vlg_sample_tst tb_sample (
	.Arena_In(Arena_In),
	.sampler_tx(sampler)
);

Arena_4to16Decoder_vlg_check_tst tb_out(
	.Arena_Dec(Arena_Dec),
	.sampler_rx(sampler)
);
endmodule

