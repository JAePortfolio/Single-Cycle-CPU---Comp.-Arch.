// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/11/2019 13:24:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Arena_16x4_SRAM_with_Decoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Arena_16x4_SRAM_with_Decoder_vlg_sample_tst(
	Arena_Address,
	Arena_CS,
	Arena_DataIn,
	Arena_OE,
	Arena_WE,
	sampler_tx
);
input [3:0] Arena_Address;
input  Arena_CS;
input [3:0] Arena_DataIn;
input  Arena_OE;
input  Arena_WE;
output sampler_tx;

reg sample;
time current_time;
always @(Arena_Address or Arena_CS or Arena_DataIn or Arena_OE or Arena_WE)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Arena_16x4_SRAM_with_Decoder_vlg_check_tst (
	Arena_segment_A,
	Arena_segment_B,
	Arena_segment_C,
	Arena_segment_D,
	Arena_segment_E,
	Arena_segment_F,
	Arena_segment_G,
	sampler_rx
);
input  Arena_segment_A;
input  Arena_segment_B;
input  Arena_segment_C;
input  Arena_segment_D;
input  Arena_segment_E;
input  Arena_segment_F;
input  Arena_segment_G;
input sampler_rx;

reg  Arena_segment_A_expected;
reg  Arena_segment_B_expected;
reg  Arena_segment_C_expected;
reg  Arena_segment_D_expected;
reg  Arena_segment_E_expected;
reg  Arena_segment_F_expected;
reg  Arena_segment_G_expected;

reg  Arena_segment_A_prev;
reg  Arena_segment_B_prev;
reg  Arena_segment_C_prev;
reg  Arena_segment_D_prev;
reg  Arena_segment_E_prev;
reg  Arena_segment_F_prev;
reg  Arena_segment_G_prev;

reg  Arena_segment_A_expected_prev;
reg  Arena_segment_B_expected_prev;
reg  Arena_segment_C_expected_prev;
reg  Arena_segment_D_expected_prev;
reg  Arena_segment_E_expected_prev;
reg  Arena_segment_F_expected_prev;
reg  Arena_segment_G_expected_prev;

reg  last_Arena_segment_A_exp;
reg  last_Arena_segment_B_exp;
reg  last_Arena_segment_C_exp;
reg  last_Arena_segment_D_exp;
reg  last_Arena_segment_E_exp;
reg  last_Arena_segment_F_exp;
reg  last_Arena_segment_G_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	Arena_segment_A_prev = Arena_segment_A;
	Arena_segment_B_prev = Arena_segment_B;
	Arena_segment_C_prev = Arena_segment_C;
	Arena_segment_D_prev = Arena_segment_D;
	Arena_segment_E_prev = Arena_segment_E;
	Arena_segment_F_prev = Arena_segment_F;
	Arena_segment_G_prev = Arena_segment_G;
end

// update expected /o prevs

always @(trigger)
begin
	Arena_segment_A_expected_prev = Arena_segment_A_expected;
	Arena_segment_B_expected_prev = Arena_segment_B_expected;
	Arena_segment_C_expected_prev = Arena_segment_C_expected;
	Arena_segment_D_expected_prev = Arena_segment_D_expected;
	Arena_segment_E_expected_prev = Arena_segment_E_expected;
	Arena_segment_F_expected_prev = Arena_segment_F_expected;
	Arena_segment_G_expected_prev = Arena_segment_G_expected;
end



// expected Arena_segment_A
initial
begin
	Arena_segment_A_expected = 1'bX;
end 

// expected Arena_segment_B
initial
begin
	Arena_segment_B_expected = 1'bX;
end 

// expected Arena_segment_C
initial
begin
	Arena_segment_C_expected = 1'bX;
end 

// expected Arena_segment_D
initial
begin
	Arena_segment_D_expected = 1'bX;
end 

// expected Arena_segment_E
initial
begin
	Arena_segment_E_expected = 1'bX;
end 

// expected Arena_segment_F
initial
begin
	Arena_segment_F_expected = 1'bX;
end 

// expected Arena_segment_G
initial
begin
	Arena_segment_G_expected = 1'bX;
end 
// generate trigger
always @(Arena_segment_A_expected or Arena_segment_A or Arena_segment_B_expected or Arena_segment_B or Arena_segment_C_expected or Arena_segment_C or Arena_segment_D_expected or Arena_segment_D or Arena_segment_E_expected or Arena_segment_E or Arena_segment_F_expected or Arena_segment_F or Arena_segment_G_expected or Arena_segment_G)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Arena_segment_A = %b | expected Arena_segment_B = %b | expected Arena_segment_C = %b | expected Arena_segment_D = %b | expected Arena_segment_E = %b | expected Arena_segment_F = %b | expected Arena_segment_G = %b | ",Arena_segment_A_expected_prev,Arena_segment_B_expected_prev,Arena_segment_C_expected_prev,Arena_segment_D_expected_prev,Arena_segment_E_expected_prev,Arena_segment_F_expected_prev,Arena_segment_G_expected_prev);
	$display("| real Arena_segment_A = %b | real Arena_segment_B = %b | real Arena_segment_C = %b | real Arena_segment_D = %b | real Arena_segment_E = %b | real Arena_segment_F = %b | real Arena_segment_G = %b | ",Arena_segment_A_prev,Arena_segment_B_prev,Arena_segment_C_prev,Arena_segment_D_prev,Arena_segment_E_prev,Arena_segment_F_prev,Arena_segment_G_prev);
`endif
	if (
		( Arena_segment_A_expected_prev !== 1'bx ) && ( Arena_segment_A_prev !== Arena_segment_A_expected_prev )
		&& ((Arena_segment_A_expected_prev !== last_Arena_segment_A_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_segment_A :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_segment_A_expected_prev);
		$display ("     Real value = %b", Arena_segment_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_segment_A_exp = Arena_segment_A_expected_prev;
	end
	if (
		( Arena_segment_B_expected_prev !== 1'bx ) && ( Arena_segment_B_prev !== Arena_segment_B_expected_prev )
		&& ((Arena_segment_B_expected_prev !== last_Arena_segment_B_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_segment_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_segment_B_expected_prev);
		$display ("     Real value = %b", Arena_segment_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_segment_B_exp = Arena_segment_B_expected_prev;
	end
	if (
		( Arena_segment_C_expected_prev !== 1'bx ) && ( Arena_segment_C_prev !== Arena_segment_C_expected_prev )
		&& ((Arena_segment_C_expected_prev !== last_Arena_segment_C_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_segment_C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_segment_C_expected_prev);
		$display ("     Real value = %b", Arena_segment_C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Arena_segment_C_exp = Arena_segment_C_expected_prev;
	end
	if (
		( Arena_segment_D_expected_prev !== 1'bx ) && ( Arena_segment_D_prev !== Arena_segment_D_expected_prev )
		&& ((Arena_segment_D_expected_prev !== last_Arena_segment_D_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_segment_D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_segment_D_expected_prev);
		$display ("     Real value = %b", Arena_segment_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Arena_segment_D_exp = Arena_segment_D_expected_prev;
	end
	if (
		( Arena_segment_E_expected_prev !== 1'bx ) && ( Arena_segment_E_prev !== Arena_segment_E_expected_prev )
		&& ((Arena_segment_E_expected_prev !== last_Arena_segment_E_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_segment_E :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_segment_E_expected_prev);
		$display ("     Real value = %b", Arena_segment_E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Arena_segment_E_exp = Arena_segment_E_expected_prev;
	end
	if (
		( Arena_segment_F_expected_prev !== 1'bx ) && ( Arena_segment_F_prev !== Arena_segment_F_expected_prev )
		&& ((Arena_segment_F_expected_prev !== last_Arena_segment_F_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_segment_F :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_segment_F_expected_prev);
		$display ("     Real value = %b", Arena_segment_F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Arena_segment_F_exp = Arena_segment_F_expected_prev;
	end
	if (
		( Arena_segment_G_expected_prev !== 1'bx ) && ( Arena_segment_G_prev !== Arena_segment_G_expected_prev )
		&& ((Arena_segment_G_expected_prev !== last_Arena_segment_G_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_segment_G :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_segment_G_expected_prev);
		$display ("     Real value = %b", Arena_segment_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Arena_segment_G_exp = Arena_segment_G_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#160000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Arena_16x4_SRAM_with_Decoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] Arena_Address;
reg Arena_CS;
reg [3:0] Arena_DataIn;
reg Arena_OE;
reg Arena_WE;
// wires                                               
wire Arena_segment_A;
wire Arena_segment_B;
wire Arena_segment_C;
wire Arena_segment_D;
wire Arena_segment_E;
wire Arena_segment_F;
wire Arena_segment_G;

wire sampler;                             

// assign statements (if any)                          
Arena_16x4_SRAM_with_Decoder i1 (
// port map - connection between master ports and signals/registers   
	.Arena_Address(Arena_Address),
	.Arena_CS(Arena_CS),
	.Arena_DataIn(Arena_DataIn),
	.Arena_OE(Arena_OE),
	.Arena_segment_A(Arena_segment_A),
	.Arena_segment_B(Arena_segment_B),
	.Arena_segment_C(Arena_segment_C),
	.Arena_segment_D(Arena_segment_D),
	.Arena_segment_E(Arena_segment_E),
	.Arena_segment_F(Arena_segment_F),
	.Arena_segment_G(Arena_segment_G),
	.Arena_WE(Arena_WE)
);

// Arena_WE
always
begin
	Arena_WE = 1'b0;
	Arena_WE = #20000 1'b1;
	#20000;
end 

// Arena_CS
always
begin
	Arena_CS = 1'b0;
	Arena_CS = #40000 1'b1;
	#40000;
end 

// Arena_DataIn[0]
initial
begin
	Arena_DataIn[0] = 1'b1;
end 

// Arena_DataIn[1]
initial
begin
	Arena_DataIn[1] = 1'b1;
end 

// Arena_DataIn[2]
initial
begin
	Arena_DataIn[2] = 1'b0;
end 

// Arena_DataIn[3]
initial
begin
	Arena_DataIn[3] = 1'b0;
end 

// Arena_OE
initial
begin
	Arena_OE = 1'b1;
end 
// Arena_Address[ 3 ]
initial
begin
	Arena_Address[3] = 1'b1;
	Arena_Address[3] = #20000 1'b0;
	Arena_Address[3] = #10000 1'b1;
	Arena_Address[3] = #10000 1'b0;
	Arena_Address[3] = #30000 1'b1;
	Arena_Address[3] = #30000 1'b0;
	Arena_Address[3] = #10000 1'b1;
	Arena_Address[3] = #10000 1'b0;
	Arena_Address[3] = #20000 1'b1;
	Arena_Address[3] = #10000 1'b0;
end 
// Arena_Address[ 2 ]
initial
begin
	Arena_Address[2] = 1'b0;
	Arena_Address[2] = #50000 1'b1;
	Arena_Address[2] = #10000 1'b0;
	Arena_Address[2] = #10000 1'b1;
	Arena_Address[2] = #10000 1'b0;
	Arena_Address[2] = #20000 1'b1;
	Arena_Address[2] = #10000 1'b0;
	Arena_Address[2] = #10000 1'b1;
	Arena_Address[2] = #20000 1'b0;
end 
// Arena_Address[ 1 ]
initial
begin
	Arena_Address[1] = 1'b1;
	Arena_Address[1] = #30000 1'b0;
	Arena_Address[1] = #10000 1'b1;
	Arena_Address[1] = #20000 1'b0;
	Arena_Address[1] = #10000 1'b1;
	Arena_Address[1] = #10000 1'b0;
	Arena_Address[1] = #60000 1'b1;
end 
// Arena_Address[ 0 ]
initial
begin
	Arena_Address[0] = 1'b1;
	Arena_Address[0] = #20000 1'b0;
	Arena_Address[0] = #70000 1'b1;
	Arena_Address[0] = #40000 1'b0;
	Arena_Address[0] = #20000 1'b1;
end 

Arena_16x4_SRAM_with_Decoder_vlg_sample_tst tb_sample (
	.Arena_Address(Arena_Address),
	.Arena_CS(Arena_CS),
	.Arena_DataIn(Arena_DataIn),
	.Arena_OE(Arena_OE),
	.Arena_WE(Arena_WE),
	.sampler_tx(sampler)
);

Arena_16x4_SRAM_with_Decoder_vlg_check_tst tb_out(
	.Arena_segment_A(Arena_segment_A),
	.Arena_segment_B(Arena_segment_B),
	.Arena_segment_C(Arena_segment_C),
	.Arena_segment_D(Arena_segment_D),
	.Arena_segment_E(Arena_segment_E),
	.Arena_segment_F(Arena_segment_F),
	.Arena_segment_G(Arena_segment_G),
	.sampler_rx(sampler)
);
endmodule

