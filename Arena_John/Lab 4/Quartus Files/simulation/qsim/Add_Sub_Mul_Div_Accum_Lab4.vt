// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/24/2019 16:59:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Arena_16bitFullAdder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Arena_16bitFullAdder_vlg_sample_tst(
	Arena_16bitIN_A_fa,
	Arena_16bitIN_B_fa,
	Arena_16bitIN_Cin_fa,
	sampler_tx
);
input [15:0] Arena_16bitIN_A_fa;
input [15:0] Arena_16bitIN_B_fa;
input  Arena_16bitIN_Cin_fa;
output sampler_tx;

reg sample;
time current_time;
always @(Arena_16bitIN_A_fa or Arena_16bitIN_B_fa or Arena_16bitIN_Cin_fa)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Arena_16bitFullAdder_vlg_check_tst (
	Arena_16bitOUT_Cout_fa,
	Arena_16bitOUT_Sum_fa,
	sampler_rx
);
input  Arena_16bitOUT_Cout_fa;
input [15:0] Arena_16bitOUT_Sum_fa;
input sampler_rx;

reg  Arena_16bitOUT_Cout_fa_expected;
reg [15:0] Arena_16bitOUT_Sum_fa_expected;

reg  Arena_16bitOUT_Cout_fa_prev;
reg [15:0] Arena_16bitOUT_Sum_fa_prev;

reg  Arena_16bitOUT_Cout_fa_expected_prev;
reg [15:0] Arena_16bitOUT_Sum_fa_expected_prev;

reg  last_Arena_16bitOUT_Cout_fa_exp;
reg [15:0] last_Arena_16bitOUT_Sum_fa_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Arena_16bitOUT_Cout_fa_prev = Arena_16bitOUT_Cout_fa;
	Arena_16bitOUT_Sum_fa_prev = Arena_16bitOUT_Sum_fa;
end

// update expected /o prevs

always @(trigger)
begin
	Arena_16bitOUT_Cout_fa_expected_prev = Arena_16bitOUT_Cout_fa_expected;
	Arena_16bitOUT_Sum_fa_expected_prev = Arena_16bitOUT_Sum_fa_expected;
end


// expected Arena_16bitOUT_Sum_fa[ 15 ]
initial
begin
	Arena_16bitOUT_Sum_fa_expected[15] = 1'bX;
end 
// expected Arena_16bitOUT_Sum_fa[ 14 ]
initial
begin
	Arena_16bitOUT_Sum_fa_expected[14] = 1'bX;
end 
// expected Arena_16bitOUT_Sum_fa[ 13 ]
initial
begin
	Arena_16bitOUT_Sum_fa_expected[13] = 1'bX;
end 
// expected Arena_16bitOUT_Sum_fa[ 12 ]
initial
begin
	Arena_16bitOUT_Sum_fa_expected[12] = 1'bX;
end 
// expected Arena_16bitOUT_Sum_fa[ 11 ]
initial
begin
	Arena_16bitOUT_Sum_fa_expected[11] = 1'bX;
end 
// expected Arena_16bitOUT_Sum_fa[ 10 ]
initial
begin
	Arena_16bitOUT_Sum_fa_expected[10] = 1'bX;
end 
// expected Arena_16bitOUT_Sum_fa[ 9 ]
initial
begin
	Arena_16bitOUT_Sum_fa_expected[9] = 1'bX;
end 
// expected Arena_16bitOUT_Sum_fa[ 8 ]
initial
begin
	Arena_16bitOUT_Sum_fa_expected[8] = 1'bX;
end 
// expected Arena_16bitOUT_Sum_fa[ 7 ]
initial
begin
	Arena_16bitOUT_Sum_fa_expected[7] = 1'bX;
end 
// expected Arena_16bitOUT_Sum_fa[ 6 ]
initial
begin
	Arena_16bitOUT_Sum_fa_expected[6] = 1'bX;
end 
// expected Arena_16bitOUT_Sum_fa[ 5 ]
initial
begin
	Arena_16bitOUT_Sum_fa_expected[5] = 1'bX;
end 
// expected Arena_16bitOUT_Sum_fa[ 4 ]
initial
begin
	Arena_16bitOUT_Sum_fa_expected[4] = 1'bX;
end 
// expected Arena_16bitOUT_Sum_fa[ 3 ]
initial
begin
	Arena_16bitOUT_Sum_fa_expected[3] = 1'bX;
end 
// expected Arena_16bitOUT_Sum_fa[ 2 ]
initial
begin
	Arena_16bitOUT_Sum_fa_expected[2] = 1'bX;
end 
// expected Arena_16bitOUT_Sum_fa[ 1 ]
initial
begin
	Arena_16bitOUT_Sum_fa_expected[1] = 1'bX;
end 
// expected Arena_16bitOUT_Sum_fa[ 0 ]
initial
begin
	Arena_16bitOUT_Sum_fa_expected[0] = 1'bX;
end 

// expected Arena_16bitOUT_Cout_fa
initial
begin
	Arena_16bitOUT_Cout_fa_expected = 1'bX;
end 
// generate trigger
always @(Arena_16bitOUT_Cout_fa_expected or Arena_16bitOUT_Cout_fa or Arena_16bitOUT_Sum_fa_expected or Arena_16bitOUT_Sum_fa)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Arena_16bitOUT_Cout_fa = %b | expected Arena_16bitOUT_Sum_fa = %b | ",Arena_16bitOUT_Cout_fa_expected_prev,Arena_16bitOUT_Sum_fa_expected_prev);
	$display("| real Arena_16bitOUT_Cout_fa = %b | real Arena_16bitOUT_Sum_fa = %b | ",Arena_16bitOUT_Cout_fa_prev,Arena_16bitOUT_Sum_fa_prev);
`endif
	if (
		( Arena_16bitOUT_Cout_fa_expected_prev !== 1'bx ) && ( Arena_16bitOUT_Cout_fa_prev !== Arena_16bitOUT_Cout_fa_expected_prev )
		&& ((Arena_16bitOUT_Cout_fa_expected_prev !== last_Arena_16bitOUT_Cout_fa_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_16bitOUT_Cout_fa :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_16bitOUT_Cout_fa_expected_prev);
		$display ("     Real value = %b", Arena_16bitOUT_Cout_fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_16bitOUT_Cout_fa_exp = Arena_16bitOUT_Cout_fa_expected_prev;
	end
	if (
		( Arena_16bitOUT_Sum_fa_expected_prev[0] !== 1'bx ) && ( Arena_16bitOUT_Sum_fa_prev[0] !== Arena_16bitOUT_Sum_fa_expected_prev[0] )
		&& ((Arena_16bitOUT_Sum_fa_expected_prev[0] !== last_Arena_16bitOUT_Sum_fa_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_16bitOUT_Sum_fa[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_16bitOUT_Sum_fa_expected_prev);
		$display ("     Real value = %b", Arena_16bitOUT_Sum_fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_16bitOUT_Sum_fa_exp[0] = Arena_16bitOUT_Sum_fa_expected_prev[0];
	end
	if (
		( Arena_16bitOUT_Sum_fa_expected_prev[1] !== 1'bx ) && ( Arena_16bitOUT_Sum_fa_prev[1] !== Arena_16bitOUT_Sum_fa_expected_prev[1] )
		&& ((Arena_16bitOUT_Sum_fa_expected_prev[1] !== last_Arena_16bitOUT_Sum_fa_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_16bitOUT_Sum_fa[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_16bitOUT_Sum_fa_expected_prev);
		$display ("     Real value = %b", Arena_16bitOUT_Sum_fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_16bitOUT_Sum_fa_exp[1] = Arena_16bitOUT_Sum_fa_expected_prev[1];
	end
	if (
		( Arena_16bitOUT_Sum_fa_expected_prev[2] !== 1'bx ) && ( Arena_16bitOUT_Sum_fa_prev[2] !== Arena_16bitOUT_Sum_fa_expected_prev[2] )
		&& ((Arena_16bitOUT_Sum_fa_expected_prev[2] !== last_Arena_16bitOUT_Sum_fa_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_16bitOUT_Sum_fa[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_16bitOUT_Sum_fa_expected_prev);
		$display ("     Real value = %b", Arena_16bitOUT_Sum_fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_16bitOUT_Sum_fa_exp[2] = Arena_16bitOUT_Sum_fa_expected_prev[2];
	end
	if (
		( Arena_16bitOUT_Sum_fa_expected_prev[3] !== 1'bx ) && ( Arena_16bitOUT_Sum_fa_prev[3] !== Arena_16bitOUT_Sum_fa_expected_prev[3] )
		&& ((Arena_16bitOUT_Sum_fa_expected_prev[3] !== last_Arena_16bitOUT_Sum_fa_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_16bitOUT_Sum_fa[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_16bitOUT_Sum_fa_expected_prev);
		$display ("     Real value = %b", Arena_16bitOUT_Sum_fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_16bitOUT_Sum_fa_exp[3] = Arena_16bitOUT_Sum_fa_expected_prev[3];
	end
	if (
		( Arena_16bitOUT_Sum_fa_expected_prev[4] !== 1'bx ) && ( Arena_16bitOUT_Sum_fa_prev[4] !== Arena_16bitOUT_Sum_fa_expected_prev[4] )
		&& ((Arena_16bitOUT_Sum_fa_expected_prev[4] !== last_Arena_16bitOUT_Sum_fa_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_16bitOUT_Sum_fa[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_16bitOUT_Sum_fa_expected_prev);
		$display ("     Real value = %b", Arena_16bitOUT_Sum_fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_16bitOUT_Sum_fa_exp[4] = Arena_16bitOUT_Sum_fa_expected_prev[4];
	end
	if (
		( Arena_16bitOUT_Sum_fa_expected_prev[5] !== 1'bx ) && ( Arena_16bitOUT_Sum_fa_prev[5] !== Arena_16bitOUT_Sum_fa_expected_prev[5] )
		&& ((Arena_16bitOUT_Sum_fa_expected_prev[5] !== last_Arena_16bitOUT_Sum_fa_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_16bitOUT_Sum_fa[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_16bitOUT_Sum_fa_expected_prev);
		$display ("     Real value = %b", Arena_16bitOUT_Sum_fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_16bitOUT_Sum_fa_exp[5] = Arena_16bitOUT_Sum_fa_expected_prev[5];
	end
	if (
		( Arena_16bitOUT_Sum_fa_expected_prev[6] !== 1'bx ) && ( Arena_16bitOUT_Sum_fa_prev[6] !== Arena_16bitOUT_Sum_fa_expected_prev[6] )
		&& ((Arena_16bitOUT_Sum_fa_expected_prev[6] !== last_Arena_16bitOUT_Sum_fa_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_16bitOUT_Sum_fa[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_16bitOUT_Sum_fa_expected_prev);
		$display ("     Real value = %b", Arena_16bitOUT_Sum_fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_16bitOUT_Sum_fa_exp[6] = Arena_16bitOUT_Sum_fa_expected_prev[6];
	end
	if (
		( Arena_16bitOUT_Sum_fa_expected_prev[7] !== 1'bx ) && ( Arena_16bitOUT_Sum_fa_prev[7] !== Arena_16bitOUT_Sum_fa_expected_prev[7] )
		&& ((Arena_16bitOUT_Sum_fa_expected_prev[7] !== last_Arena_16bitOUT_Sum_fa_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_16bitOUT_Sum_fa[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_16bitOUT_Sum_fa_expected_prev);
		$display ("     Real value = %b", Arena_16bitOUT_Sum_fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_16bitOUT_Sum_fa_exp[7] = Arena_16bitOUT_Sum_fa_expected_prev[7];
	end
	if (
		( Arena_16bitOUT_Sum_fa_expected_prev[8] !== 1'bx ) && ( Arena_16bitOUT_Sum_fa_prev[8] !== Arena_16bitOUT_Sum_fa_expected_prev[8] )
		&& ((Arena_16bitOUT_Sum_fa_expected_prev[8] !== last_Arena_16bitOUT_Sum_fa_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_16bitOUT_Sum_fa[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_16bitOUT_Sum_fa_expected_prev);
		$display ("     Real value = %b", Arena_16bitOUT_Sum_fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_16bitOUT_Sum_fa_exp[8] = Arena_16bitOUT_Sum_fa_expected_prev[8];
	end
	if (
		( Arena_16bitOUT_Sum_fa_expected_prev[9] !== 1'bx ) && ( Arena_16bitOUT_Sum_fa_prev[9] !== Arena_16bitOUT_Sum_fa_expected_prev[9] )
		&& ((Arena_16bitOUT_Sum_fa_expected_prev[9] !== last_Arena_16bitOUT_Sum_fa_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_16bitOUT_Sum_fa[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_16bitOUT_Sum_fa_expected_prev);
		$display ("     Real value = %b", Arena_16bitOUT_Sum_fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_16bitOUT_Sum_fa_exp[9] = Arena_16bitOUT_Sum_fa_expected_prev[9];
	end
	if (
		( Arena_16bitOUT_Sum_fa_expected_prev[10] !== 1'bx ) && ( Arena_16bitOUT_Sum_fa_prev[10] !== Arena_16bitOUT_Sum_fa_expected_prev[10] )
		&& ((Arena_16bitOUT_Sum_fa_expected_prev[10] !== last_Arena_16bitOUT_Sum_fa_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_16bitOUT_Sum_fa[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_16bitOUT_Sum_fa_expected_prev);
		$display ("     Real value = %b", Arena_16bitOUT_Sum_fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_16bitOUT_Sum_fa_exp[10] = Arena_16bitOUT_Sum_fa_expected_prev[10];
	end
	if (
		( Arena_16bitOUT_Sum_fa_expected_prev[11] !== 1'bx ) && ( Arena_16bitOUT_Sum_fa_prev[11] !== Arena_16bitOUT_Sum_fa_expected_prev[11] )
		&& ((Arena_16bitOUT_Sum_fa_expected_prev[11] !== last_Arena_16bitOUT_Sum_fa_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_16bitOUT_Sum_fa[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_16bitOUT_Sum_fa_expected_prev);
		$display ("     Real value = %b", Arena_16bitOUT_Sum_fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_16bitOUT_Sum_fa_exp[11] = Arena_16bitOUT_Sum_fa_expected_prev[11];
	end
	if (
		( Arena_16bitOUT_Sum_fa_expected_prev[12] !== 1'bx ) && ( Arena_16bitOUT_Sum_fa_prev[12] !== Arena_16bitOUT_Sum_fa_expected_prev[12] )
		&& ((Arena_16bitOUT_Sum_fa_expected_prev[12] !== last_Arena_16bitOUT_Sum_fa_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_16bitOUT_Sum_fa[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_16bitOUT_Sum_fa_expected_prev);
		$display ("     Real value = %b", Arena_16bitOUT_Sum_fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_16bitOUT_Sum_fa_exp[12] = Arena_16bitOUT_Sum_fa_expected_prev[12];
	end
	if (
		( Arena_16bitOUT_Sum_fa_expected_prev[13] !== 1'bx ) && ( Arena_16bitOUT_Sum_fa_prev[13] !== Arena_16bitOUT_Sum_fa_expected_prev[13] )
		&& ((Arena_16bitOUT_Sum_fa_expected_prev[13] !== last_Arena_16bitOUT_Sum_fa_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_16bitOUT_Sum_fa[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_16bitOUT_Sum_fa_expected_prev);
		$display ("     Real value = %b", Arena_16bitOUT_Sum_fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_16bitOUT_Sum_fa_exp[13] = Arena_16bitOUT_Sum_fa_expected_prev[13];
	end
	if (
		( Arena_16bitOUT_Sum_fa_expected_prev[14] !== 1'bx ) && ( Arena_16bitOUT_Sum_fa_prev[14] !== Arena_16bitOUT_Sum_fa_expected_prev[14] )
		&& ((Arena_16bitOUT_Sum_fa_expected_prev[14] !== last_Arena_16bitOUT_Sum_fa_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_16bitOUT_Sum_fa[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_16bitOUT_Sum_fa_expected_prev);
		$display ("     Real value = %b", Arena_16bitOUT_Sum_fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_16bitOUT_Sum_fa_exp[14] = Arena_16bitOUT_Sum_fa_expected_prev[14];
	end
	if (
		( Arena_16bitOUT_Sum_fa_expected_prev[15] !== 1'bx ) && ( Arena_16bitOUT_Sum_fa_prev[15] !== Arena_16bitOUT_Sum_fa_expected_prev[15] )
		&& ((Arena_16bitOUT_Sum_fa_expected_prev[15] !== last_Arena_16bitOUT_Sum_fa_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_16bitOUT_Sum_fa[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_16bitOUT_Sum_fa_expected_prev);
		$display ("     Real value = %b", Arena_16bitOUT_Sum_fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_16bitOUT_Sum_fa_exp[15] = Arena_16bitOUT_Sum_fa_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#160000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Arena_16bitFullAdder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] Arena_16bitIN_A_fa;
reg [15:0] Arena_16bitIN_B_fa;
reg Arena_16bitIN_Cin_fa;
// wires                                               
wire Arena_16bitOUT_Cout_fa;
wire [15:0] Arena_16bitOUT_Sum_fa;

wire sampler;                             

// assign statements (if any)                          
Arena_16bitFullAdder i1 (
// port map - connection between master ports and signals/registers   
	.Arena_16bitIN_A_fa(Arena_16bitIN_A_fa),
	.Arena_16bitIN_B_fa(Arena_16bitIN_B_fa),
	.Arena_16bitIN_Cin_fa(Arena_16bitIN_Cin_fa),
	.Arena_16bitOUT_Cout_fa(Arena_16bitOUT_Cout_fa),
	.Arena_16bitOUT_Sum_fa(Arena_16bitOUT_Sum_fa)
);
// Arena_16bitIN_A_fa[ 15 ]
initial
begin
	Arena_16bitIN_A_fa[15] = 1'b1;
end 
// Arena_16bitIN_A_fa[ 14 ]
initial
begin
	Arena_16bitIN_A_fa[14] = 1'b1;
end 
// Arena_16bitIN_A_fa[ 13 ]
initial
begin
	Arena_16bitIN_A_fa[13] = 1'b1;
end 
// Arena_16bitIN_A_fa[ 12 ]
initial
begin
	Arena_16bitIN_A_fa[12] = 1'b1;
end 
// Arena_16bitIN_A_fa[ 11 ]
initial
begin
	Arena_16bitIN_A_fa[11] = 1'b1;
end 
// Arena_16bitIN_A_fa[ 10 ]
initial
begin
	Arena_16bitIN_A_fa[10] = 1'b1;
end 
// Arena_16bitIN_A_fa[ 9 ]
initial
begin
	Arena_16bitIN_A_fa[9] = 1'b1;
end 
// Arena_16bitIN_A_fa[ 8 ]
initial
begin
	Arena_16bitIN_A_fa[8] = 1'b1;
end 
// Arena_16bitIN_A_fa[ 7 ]
initial
begin
	Arena_16bitIN_A_fa[7] = 1'b1;
end 
// Arena_16bitIN_A_fa[ 6 ]
initial
begin
	Arena_16bitIN_A_fa[6] = 1'b1;
end 
// Arena_16bitIN_A_fa[ 5 ]
initial
begin
	Arena_16bitIN_A_fa[5] = 1'b1;
end 
// Arena_16bitIN_A_fa[ 4 ]
initial
begin
	Arena_16bitIN_A_fa[4] = 1'b1;
end 
// Arena_16bitIN_A_fa[ 3 ]
initial
begin
	Arena_16bitIN_A_fa[3] = 1'b1;
end 
// Arena_16bitIN_A_fa[ 2 ]
initial
begin
	Arena_16bitIN_A_fa[2] = 1'b1;
end 
// Arena_16bitIN_A_fa[ 1 ]
initial
begin
	Arena_16bitIN_A_fa[1] = 1'b1;
end 
// Arena_16bitIN_A_fa[ 0 ]
initial
begin
	Arena_16bitIN_A_fa[0] = 1'b1;
end 
// Arena_16bitIN_B_fa[ 15 ]
initial
begin
	Arena_16bitIN_B_fa[15] = 1'b1;
end 
// Arena_16bitIN_B_fa[ 14 ]
initial
begin
	Arena_16bitIN_B_fa[14] = 1'b1;
end 
// Arena_16bitIN_B_fa[ 13 ]
initial
begin
	Arena_16bitIN_B_fa[13] = 1'b1;
end 
// Arena_16bitIN_B_fa[ 12 ]
initial
begin
	Arena_16bitIN_B_fa[12] = 1'b1;
end 
// Arena_16bitIN_B_fa[ 11 ]
initial
begin
	Arena_16bitIN_B_fa[11] = 1'b1;
end 
// Arena_16bitIN_B_fa[ 10 ]
initial
begin
	Arena_16bitIN_B_fa[10] = 1'b1;
end 
// Arena_16bitIN_B_fa[ 9 ]
initial
begin
	Arena_16bitIN_B_fa[9] = 1'b1;
end 
// Arena_16bitIN_B_fa[ 8 ]
initial
begin
	Arena_16bitIN_B_fa[8] = 1'b1;
end 
// Arena_16bitIN_B_fa[ 7 ]
initial
begin
	Arena_16bitIN_B_fa[7] = 1'b1;
end 
// Arena_16bitIN_B_fa[ 6 ]
initial
begin
	Arena_16bitIN_B_fa[6] = 1'b1;
end 
// Arena_16bitIN_B_fa[ 5 ]
initial
begin
	Arena_16bitIN_B_fa[5] = 1'b1;
end 
// Arena_16bitIN_B_fa[ 4 ]
initial
begin
	Arena_16bitIN_B_fa[4] = 1'b1;
end 
// Arena_16bitIN_B_fa[ 3 ]
initial
begin
	Arena_16bitIN_B_fa[3] = 1'b1;
end 
// Arena_16bitIN_B_fa[ 2 ]
initial
begin
	Arena_16bitIN_B_fa[2] = 1'b1;
end 
// Arena_16bitIN_B_fa[ 1 ]
initial
begin
	Arena_16bitIN_B_fa[1] = 1'b1;
end 
// Arena_16bitIN_B_fa[ 0 ]
initial
begin
	Arena_16bitIN_B_fa[0] = 1'b1;
end 

// Arena_16bitIN_Cin_fa
initial
begin
	Arena_16bitIN_Cin_fa = 1'b0;
end 

Arena_16bitFullAdder_vlg_sample_tst tb_sample (
	.Arena_16bitIN_A_fa(Arena_16bitIN_A_fa),
	.Arena_16bitIN_B_fa(Arena_16bitIN_B_fa),
	.Arena_16bitIN_Cin_fa(Arena_16bitIN_Cin_fa),
	.sampler_tx(sampler)
);

Arena_16bitFullAdder_vlg_check_tst tb_out(
	.Arena_16bitOUT_Cout_fa(Arena_16bitOUT_Cout_fa),
	.Arena_16bitOUT_Sum_fa(Arena_16bitOUT_Sum_fa),
	.sampler_rx(sampler)
);
endmodule

