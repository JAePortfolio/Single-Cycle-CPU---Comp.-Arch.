// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/04/2019 15:59:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Arena_32bit_divider_usingVHDL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Arena_32bit_divider_usingVHDL_vlg_sample_tst(
	Arena_Dividend,
	Arena_Divisor,
	sampler_tx
);
input [31:0] Arena_Dividend;
input [31:0] Arena_Divisor;
output sampler_tx;

reg sample;
time current_time;
always @(Arena_Dividend or Arena_Divisor)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Arena_32bit_divider_usingVHDL_vlg_check_tst (
	Arena_Quotient,
	Arena_Remainder,
	sampler_rx
);
input [31:0] Arena_Quotient;
input [31:0] Arena_Remainder;
input sampler_rx;

reg [31:0] Arena_Quotient_expected;
reg [31:0] Arena_Remainder_expected;

reg [31:0] Arena_Quotient_prev;
reg [31:0] Arena_Remainder_prev;

reg [31:0] Arena_Quotient_expected_prev;
reg [31:0] Arena_Remainder_expected_prev;

reg [31:0] last_Arena_Quotient_exp;
reg [31:0] last_Arena_Remainder_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Arena_Quotient_prev = Arena_Quotient;
	Arena_Remainder_prev = Arena_Remainder;
end

// update expected /o prevs

always @(trigger)
begin
	Arena_Quotient_expected_prev = Arena_Quotient_expected;
	Arena_Remainder_expected_prev = Arena_Remainder_expected;
end


// expected Arena_Quotient[ 31 ]
initial
begin
	Arena_Quotient_expected[31] = 1'bX;
end 
// expected Arena_Quotient[ 30 ]
initial
begin
	Arena_Quotient_expected[30] = 1'bX;
end 
// expected Arena_Quotient[ 29 ]
initial
begin
	Arena_Quotient_expected[29] = 1'bX;
end 
// expected Arena_Quotient[ 28 ]
initial
begin
	Arena_Quotient_expected[28] = 1'bX;
end 
// expected Arena_Quotient[ 27 ]
initial
begin
	Arena_Quotient_expected[27] = 1'bX;
end 
// expected Arena_Quotient[ 26 ]
initial
begin
	Arena_Quotient_expected[26] = 1'bX;
end 
// expected Arena_Quotient[ 25 ]
initial
begin
	Arena_Quotient_expected[25] = 1'bX;
end 
// expected Arena_Quotient[ 24 ]
initial
begin
	Arena_Quotient_expected[24] = 1'bX;
end 
// expected Arena_Quotient[ 23 ]
initial
begin
	Arena_Quotient_expected[23] = 1'bX;
end 
// expected Arena_Quotient[ 22 ]
initial
begin
	Arena_Quotient_expected[22] = 1'bX;
end 
// expected Arena_Quotient[ 21 ]
initial
begin
	Arena_Quotient_expected[21] = 1'bX;
end 
// expected Arena_Quotient[ 20 ]
initial
begin
	Arena_Quotient_expected[20] = 1'bX;
end 
// expected Arena_Quotient[ 19 ]
initial
begin
	Arena_Quotient_expected[19] = 1'bX;
end 
// expected Arena_Quotient[ 18 ]
initial
begin
	Arena_Quotient_expected[18] = 1'bX;
end 
// expected Arena_Quotient[ 17 ]
initial
begin
	Arena_Quotient_expected[17] = 1'bX;
end 
// expected Arena_Quotient[ 16 ]
initial
begin
	Arena_Quotient_expected[16] = 1'bX;
end 
// expected Arena_Quotient[ 15 ]
initial
begin
	Arena_Quotient_expected[15] = 1'bX;
end 
// expected Arena_Quotient[ 14 ]
initial
begin
	Arena_Quotient_expected[14] = 1'bX;
end 
// expected Arena_Quotient[ 13 ]
initial
begin
	Arena_Quotient_expected[13] = 1'bX;
end 
// expected Arena_Quotient[ 12 ]
initial
begin
	Arena_Quotient_expected[12] = 1'bX;
end 
// expected Arena_Quotient[ 11 ]
initial
begin
	Arena_Quotient_expected[11] = 1'bX;
end 
// expected Arena_Quotient[ 10 ]
initial
begin
	Arena_Quotient_expected[10] = 1'bX;
end 
// expected Arena_Quotient[ 9 ]
initial
begin
	Arena_Quotient_expected[9] = 1'bX;
end 
// expected Arena_Quotient[ 8 ]
initial
begin
	Arena_Quotient_expected[8] = 1'bX;
end 
// expected Arena_Quotient[ 7 ]
initial
begin
	Arena_Quotient_expected[7] = 1'bX;
end 
// expected Arena_Quotient[ 6 ]
initial
begin
	Arena_Quotient_expected[6] = 1'bX;
end 
// expected Arena_Quotient[ 5 ]
initial
begin
	Arena_Quotient_expected[5] = 1'bX;
end 
// expected Arena_Quotient[ 4 ]
initial
begin
	Arena_Quotient_expected[4] = 1'bX;
end 
// expected Arena_Quotient[ 3 ]
initial
begin
	Arena_Quotient_expected[3] = 1'bX;
end 
// expected Arena_Quotient[ 2 ]
initial
begin
	Arena_Quotient_expected[2] = 1'bX;
end 
// expected Arena_Quotient[ 1 ]
initial
begin
	Arena_Quotient_expected[1] = 1'bX;
end 
// expected Arena_Quotient[ 0 ]
initial
begin
	Arena_Quotient_expected[0] = 1'bX;
end 
// expected Arena_Remainder[ 31 ]
initial
begin
	Arena_Remainder_expected[31] = 1'bX;
end 
// expected Arena_Remainder[ 30 ]
initial
begin
	Arena_Remainder_expected[30] = 1'bX;
end 
// expected Arena_Remainder[ 29 ]
initial
begin
	Arena_Remainder_expected[29] = 1'bX;
end 
// expected Arena_Remainder[ 28 ]
initial
begin
	Arena_Remainder_expected[28] = 1'bX;
end 
// expected Arena_Remainder[ 27 ]
initial
begin
	Arena_Remainder_expected[27] = 1'bX;
end 
// expected Arena_Remainder[ 26 ]
initial
begin
	Arena_Remainder_expected[26] = 1'bX;
end 
// expected Arena_Remainder[ 25 ]
initial
begin
	Arena_Remainder_expected[25] = 1'bX;
end 
// expected Arena_Remainder[ 24 ]
initial
begin
	Arena_Remainder_expected[24] = 1'bX;
end 
// expected Arena_Remainder[ 23 ]
initial
begin
	Arena_Remainder_expected[23] = 1'bX;
end 
// expected Arena_Remainder[ 22 ]
initial
begin
	Arena_Remainder_expected[22] = 1'bX;
end 
// expected Arena_Remainder[ 21 ]
initial
begin
	Arena_Remainder_expected[21] = 1'bX;
end 
// expected Arena_Remainder[ 20 ]
initial
begin
	Arena_Remainder_expected[20] = 1'bX;
end 
// expected Arena_Remainder[ 19 ]
initial
begin
	Arena_Remainder_expected[19] = 1'bX;
end 
// expected Arena_Remainder[ 18 ]
initial
begin
	Arena_Remainder_expected[18] = 1'bX;
end 
// expected Arena_Remainder[ 17 ]
initial
begin
	Arena_Remainder_expected[17] = 1'bX;
end 
// expected Arena_Remainder[ 16 ]
initial
begin
	Arena_Remainder_expected[16] = 1'bX;
end 
// expected Arena_Remainder[ 15 ]
initial
begin
	Arena_Remainder_expected[15] = 1'bX;
end 
// expected Arena_Remainder[ 14 ]
initial
begin
	Arena_Remainder_expected[14] = 1'bX;
end 
// expected Arena_Remainder[ 13 ]
initial
begin
	Arena_Remainder_expected[13] = 1'bX;
end 
// expected Arena_Remainder[ 12 ]
initial
begin
	Arena_Remainder_expected[12] = 1'bX;
end 
// expected Arena_Remainder[ 11 ]
initial
begin
	Arena_Remainder_expected[11] = 1'bX;
end 
// expected Arena_Remainder[ 10 ]
initial
begin
	Arena_Remainder_expected[10] = 1'bX;
end 
// expected Arena_Remainder[ 9 ]
initial
begin
	Arena_Remainder_expected[9] = 1'bX;
end 
// expected Arena_Remainder[ 8 ]
initial
begin
	Arena_Remainder_expected[8] = 1'bX;
end 
// expected Arena_Remainder[ 7 ]
initial
begin
	Arena_Remainder_expected[7] = 1'bX;
end 
// expected Arena_Remainder[ 6 ]
initial
begin
	Arena_Remainder_expected[6] = 1'bX;
end 
// expected Arena_Remainder[ 5 ]
initial
begin
	Arena_Remainder_expected[5] = 1'bX;
end 
// expected Arena_Remainder[ 4 ]
initial
begin
	Arena_Remainder_expected[4] = 1'bX;
end 
// expected Arena_Remainder[ 3 ]
initial
begin
	Arena_Remainder_expected[3] = 1'bX;
end 
// expected Arena_Remainder[ 2 ]
initial
begin
	Arena_Remainder_expected[2] = 1'bX;
end 
// expected Arena_Remainder[ 1 ]
initial
begin
	Arena_Remainder_expected[1] = 1'bX;
end 
// expected Arena_Remainder[ 0 ]
initial
begin
	Arena_Remainder_expected[0] = 1'bX;
end 
// generate trigger
always @(Arena_Quotient_expected or Arena_Quotient or Arena_Remainder_expected or Arena_Remainder)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Arena_Quotient = %b | expected Arena_Remainder = %b | ",Arena_Quotient_expected_prev,Arena_Remainder_expected_prev);
	$display("| real Arena_Quotient = %b | real Arena_Remainder = %b | ",Arena_Quotient_prev,Arena_Remainder_prev);
`endif
	if (
		( Arena_Quotient_expected_prev[0] !== 1'bx ) && ( Arena_Quotient_prev[0] !== Arena_Quotient_expected_prev[0] )
		&& ((Arena_Quotient_expected_prev[0] !== last_Arena_Quotient_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[0] = Arena_Quotient_expected_prev[0];
	end
	if (
		( Arena_Quotient_expected_prev[1] !== 1'bx ) && ( Arena_Quotient_prev[1] !== Arena_Quotient_expected_prev[1] )
		&& ((Arena_Quotient_expected_prev[1] !== last_Arena_Quotient_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[1] = Arena_Quotient_expected_prev[1];
	end
	if (
		( Arena_Quotient_expected_prev[2] !== 1'bx ) && ( Arena_Quotient_prev[2] !== Arena_Quotient_expected_prev[2] )
		&& ((Arena_Quotient_expected_prev[2] !== last_Arena_Quotient_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[2] = Arena_Quotient_expected_prev[2];
	end
	if (
		( Arena_Quotient_expected_prev[3] !== 1'bx ) && ( Arena_Quotient_prev[3] !== Arena_Quotient_expected_prev[3] )
		&& ((Arena_Quotient_expected_prev[3] !== last_Arena_Quotient_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[3] = Arena_Quotient_expected_prev[3];
	end
	if (
		( Arena_Quotient_expected_prev[4] !== 1'bx ) && ( Arena_Quotient_prev[4] !== Arena_Quotient_expected_prev[4] )
		&& ((Arena_Quotient_expected_prev[4] !== last_Arena_Quotient_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[4] = Arena_Quotient_expected_prev[4];
	end
	if (
		( Arena_Quotient_expected_prev[5] !== 1'bx ) && ( Arena_Quotient_prev[5] !== Arena_Quotient_expected_prev[5] )
		&& ((Arena_Quotient_expected_prev[5] !== last_Arena_Quotient_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[5] = Arena_Quotient_expected_prev[5];
	end
	if (
		( Arena_Quotient_expected_prev[6] !== 1'bx ) && ( Arena_Quotient_prev[6] !== Arena_Quotient_expected_prev[6] )
		&& ((Arena_Quotient_expected_prev[6] !== last_Arena_Quotient_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[6] = Arena_Quotient_expected_prev[6];
	end
	if (
		( Arena_Quotient_expected_prev[7] !== 1'bx ) && ( Arena_Quotient_prev[7] !== Arena_Quotient_expected_prev[7] )
		&& ((Arena_Quotient_expected_prev[7] !== last_Arena_Quotient_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[7] = Arena_Quotient_expected_prev[7];
	end
	if (
		( Arena_Quotient_expected_prev[8] !== 1'bx ) && ( Arena_Quotient_prev[8] !== Arena_Quotient_expected_prev[8] )
		&& ((Arena_Quotient_expected_prev[8] !== last_Arena_Quotient_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[8] = Arena_Quotient_expected_prev[8];
	end
	if (
		( Arena_Quotient_expected_prev[9] !== 1'bx ) && ( Arena_Quotient_prev[9] !== Arena_Quotient_expected_prev[9] )
		&& ((Arena_Quotient_expected_prev[9] !== last_Arena_Quotient_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[9] = Arena_Quotient_expected_prev[9];
	end
	if (
		( Arena_Quotient_expected_prev[10] !== 1'bx ) && ( Arena_Quotient_prev[10] !== Arena_Quotient_expected_prev[10] )
		&& ((Arena_Quotient_expected_prev[10] !== last_Arena_Quotient_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[10] = Arena_Quotient_expected_prev[10];
	end
	if (
		( Arena_Quotient_expected_prev[11] !== 1'bx ) && ( Arena_Quotient_prev[11] !== Arena_Quotient_expected_prev[11] )
		&& ((Arena_Quotient_expected_prev[11] !== last_Arena_Quotient_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[11] = Arena_Quotient_expected_prev[11];
	end
	if (
		( Arena_Quotient_expected_prev[12] !== 1'bx ) && ( Arena_Quotient_prev[12] !== Arena_Quotient_expected_prev[12] )
		&& ((Arena_Quotient_expected_prev[12] !== last_Arena_Quotient_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[12] = Arena_Quotient_expected_prev[12];
	end
	if (
		( Arena_Quotient_expected_prev[13] !== 1'bx ) && ( Arena_Quotient_prev[13] !== Arena_Quotient_expected_prev[13] )
		&& ((Arena_Quotient_expected_prev[13] !== last_Arena_Quotient_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[13] = Arena_Quotient_expected_prev[13];
	end
	if (
		( Arena_Quotient_expected_prev[14] !== 1'bx ) && ( Arena_Quotient_prev[14] !== Arena_Quotient_expected_prev[14] )
		&& ((Arena_Quotient_expected_prev[14] !== last_Arena_Quotient_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[14] = Arena_Quotient_expected_prev[14];
	end
	if (
		( Arena_Quotient_expected_prev[15] !== 1'bx ) && ( Arena_Quotient_prev[15] !== Arena_Quotient_expected_prev[15] )
		&& ((Arena_Quotient_expected_prev[15] !== last_Arena_Quotient_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[15] = Arena_Quotient_expected_prev[15];
	end
	if (
		( Arena_Quotient_expected_prev[16] !== 1'bx ) && ( Arena_Quotient_prev[16] !== Arena_Quotient_expected_prev[16] )
		&& ((Arena_Quotient_expected_prev[16] !== last_Arena_Quotient_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[16] = Arena_Quotient_expected_prev[16];
	end
	if (
		( Arena_Quotient_expected_prev[17] !== 1'bx ) && ( Arena_Quotient_prev[17] !== Arena_Quotient_expected_prev[17] )
		&& ((Arena_Quotient_expected_prev[17] !== last_Arena_Quotient_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[17] = Arena_Quotient_expected_prev[17];
	end
	if (
		( Arena_Quotient_expected_prev[18] !== 1'bx ) && ( Arena_Quotient_prev[18] !== Arena_Quotient_expected_prev[18] )
		&& ((Arena_Quotient_expected_prev[18] !== last_Arena_Quotient_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[18] = Arena_Quotient_expected_prev[18];
	end
	if (
		( Arena_Quotient_expected_prev[19] !== 1'bx ) && ( Arena_Quotient_prev[19] !== Arena_Quotient_expected_prev[19] )
		&& ((Arena_Quotient_expected_prev[19] !== last_Arena_Quotient_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[19] = Arena_Quotient_expected_prev[19];
	end
	if (
		( Arena_Quotient_expected_prev[20] !== 1'bx ) && ( Arena_Quotient_prev[20] !== Arena_Quotient_expected_prev[20] )
		&& ((Arena_Quotient_expected_prev[20] !== last_Arena_Quotient_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[20] = Arena_Quotient_expected_prev[20];
	end
	if (
		( Arena_Quotient_expected_prev[21] !== 1'bx ) && ( Arena_Quotient_prev[21] !== Arena_Quotient_expected_prev[21] )
		&& ((Arena_Quotient_expected_prev[21] !== last_Arena_Quotient_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[21] = Arena_Quotient_expected_prev[21];
	end
	if (
		( Arena_Quotient_expected_prev[22] !== 1'bx ) && ( Arena_Quotient_prev[22] !== Arena_Quotient_expected_prev[22] )
		&& ((Arena_Quotient_expected_prev[22] !== last_Arena_Quotient_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[22] = Arena_Quotient_expected_prev[22];
	end
	if (
		( Arena_Quotient_expected_prev[23] !== 1'bx ) && ( Arena_Quotient_prev[23] !== Arena_Quotient_expected_prev[23] )
		&& ((Arena_Quotient_expected_prev[23] !== last_Arena_Quotient_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[23] = Arena_Quotient_expected_prev[23];
	end
	if (
		( Arena_Quotient_expected_prev[24] !== 1'bx ) && ( Arena_Quotient_prev[24] !== Arena_Quotient_expected_prev[24] )
		&& ((Arena_Quotient_expected_prev[24] !== last_Arena_Quotient_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[24] = Arena_Quotient_expected_prev[24];
	end
	if (
		( Arena_Quotient_expected_prev[25] !== 1'bx ) && ( Arena_Quotient_prev[25] !== Arena_Quotient_expected_prev[25] )
		&& ((Arena_Quotient_expected_prev[25] !== last_Arena_Quotient_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[25] = Arena_Quotient_expected_prev[25];
	end
	if (
		( Arena_Quotient_expected_prev[26] !== 1'bx ) && ( Arena_Quotient_prev[26] !== Arena_Quotient_expected_prev[26] )
		&& ((Arena_Quotient_expected_prev[26] !== last_Arena_Quotient_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[26] = Arena_Quotient_expected_prev[26];
	end
	if (
		( Arena_Quotient_expected_prev[27] !== 1'bx ) && ( Arena_Quotient_prev[27] !== Arena_Quotient_expected_prev[27] )
		&& ((Arena_Quotient_expected_prev[27] !== last_Arena_Quotient_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[27] = Arena_Quotient_expected_prev[27];
	end
	if (
		( Arena_Quotient_expected_prev[28] !== 1'bx ) && ( Arena_Quotient_prev[28] !== Arena_Quotient_expected_prev[28] )
		&& ((Arena_Quotient_expected_prev[28] !== last_Arena_Quotient_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[28] = Arena_Quotient_expected_prev[28];
	end
	if (
		( Arena_Quotient_expected_prev[29] !== 1'bx ) && ( Arena_Quotient_prev[29] !== Arena_Quotient_expected_prev[29] )
		&& ((Arena_Quotient_expected_prev[29] !== last_Arena_Quotient_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[29] = Arena_Quotient_expected_prev[29];
	end
	if (
		( Arena_Quotient_expected_prev[30] !== 1'bx ) && ( Arena_Quotient_prev[30] !== Arena_Quotient_expected_prev[30] )
		&& ((Arena_Quotient_expected_prev[30] !== last_Arena_Quotient_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[30] = Arena_Quotient_expected_prev[30];
	end
	if (
		( Arena_Quotient_expected_prev[31] !== 1'bx ) && ( Arena_Quotient_prev[31] !== Arena_Quotient_expected_prev[31] )
		&& ((Arena_Quotient_expected_prev[31] !== last_Arena_Quotient_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_exp[31] = Arena_Quotient_expected_prev[31];
	end
	if (
		( Arena_Remainder_expected_prev[0] !== 1'bx ) && ( Arena_Remainder_prev[0] !== Arena_Remainder_expected_prev[0] )
		&& ((Arena_Remainder_expected_prev[0] !== last_Arena_Remainder_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[0] = Arena_Remainder_expected_prev[0];
	end
	if (
		( Arena_Remainder_expected_prev[1] !== 1'bx ) && ( Arena_Remainder_prev[1] !== Arena_Remainder_expected_prev[1] )
		&& ((Arena_Remainder_expected_prev[1] !== last_Arena_Remainder_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[1] = Arena_Remainder_expected_prev[1];
	end
	if (
		( Arena_Remainder_expected_prev[2] !== 1'bx ) && ( Arena_Remainder_prev[2] !== Arena_Remainder_expected_prev[2] )
		&& ((Arena_Remainder_expected_prev[2] !== last_Arena_Remainder_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[2] = Arena_Remainder_expected_prev[2];
	end
	if (
		( Arena_Remainder_expected_prev[3] !== 1'bx ) && ( Arena_Remainder_prev[3] !== Arena_Remainder_expected_prev[3] )
		&& ((Arena_Remainder_expected_prev[3] !== last_Arena_Remainder_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[3] = Arena_Remainder_expected_prev[3];
	end
	if (
		( Arena_Remainder_expected_prev[4] !== 1'bx ) && ( Arena_Remainder_prev[4] !== Arena_Remainder_expected_prev[4] )
		&& ((Arena_Remainder_expected_prev[4] !== last_Arena_Remainder_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[4] = Arena_Remainder_expected_prev[4];
	end
	if (
		( Arena_Remainder_expected_prev[5] !== 1'bx ) && ( Arena_Remainder_prev[5] !== Arena_Remainder_expected_prev[5] )
		&& ((Arena_Remainder_expected_prev[5] !== last_Arena_Remainder_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[5] = Arena_Remainder_expected_prev[5];
	end
	if (
		( Arena_Remainder_expected_prev[6] !== 1'bx ) && ( Arena_Remainder_prev[6] !== Arena_Remainder_expected_prev[6] )
		&& ((Arena_Remainder_expected_prev[6] !== last_Arena_Remainder_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[6] = Arena_Remainder_expected_prev[6];
	end
	if (
		( Arena_Remainder_expected_prev[7] !== 1'bx ) && ( Arena_Remainder_prev[7] !== Arena_Remainder_expected_prev[7] )
		&& ((Arena_Remainder_expected_prev[7] !== last_Arena_Remainder_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[7] = Arena_Remainder_expected_prev[7];
	end
	if (
		( Arena_Remainder_expected_prev[8] !== 1'bx ) && ( Arena_Remainder_prev[8] !== Arena_Remainder_expected_prev[8] )
		&& ((Arena_Remainder_expected_prev[8] !== last_Arena_Remainder_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[8] = Arena_Remainder_expected_prev[8];
	end
	if (
		( Arena_Remainder_expected_prev[9] !== 1'bx ) && ( Arena_Remainder_prev[9] !== Arena_Remainder_expected_prev[9] )
		&& ((Arena_Remainder_expected_prev[9] !== last_Arena_Remainder_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[9] = Arena_Remainder_expected_prev[9];
	end
	if (
		( Arena_Remainder_expected_prev[10] !== 1'bx ) && ( Arena_Remainder_prev[10] !== Arena_Remainder_expected_prev[10] )
		&& ((Arena_Remainder_expected_prev[10] !== last_Arena_Remainder_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[10] = Arena_Remainder_expected_prev[10];
	end
	if (
		( Arena_Remainder_expected_prev[11] !== 1'bx ) && ( Arena_Remainder_prev[11] !== Arena_Remainder_expected_prev[11] )
		&& ((Arena_Remainder_expected_prev[11] !== last_Arena_Remainder_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[11] = Arena_Remainder_expected_prev[11];
	end
	if (
		( Arena_Remainder_expected_prev[12] !== 1'bx ) && ( Arena_Remainder_prev[12] !== Arena_Remainder_expected_prev[12] )
		&& ((Arena_Remainder_expected_prev[12] !== last_Arena_Remainder_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[12] = Arena_Remainder_expected_prev[12];
	end
	if (
		( Arena_Remainder_expected_prev[13] !== 1'bx ) && ( Arena_Remainder_prev[13] !== Arena_Remainder_expected_prev[13] )
		&& ((Arena_Remainder_expected_prev[13] !== last_Arena_Remainder_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[13] = Arena_Remainder_expected_prev[13];
	end
	if (
		( Arena_Remainder_expected_prev[14] !== 1'bx ) && ( Arena_Remainder_prev[14] !== Arena_Remainder_expected_prev[14] )
		&& ((Arena_Remainder_expected_prev[14] !== last_Arena_Remainder_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[14] = Arena_Remainder_expected_prev[14];
	end
	if (
		( Arena_Remainder_expected_prev[15] !== 1'bx ) && ( Arena_Remainder_prev[15] !== Arena_Remainder_expected_prev[15] )
		&& ((Arena_Remainder_expected_prev[15] !== last_Arena_Remainder_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[15] = Arena_Remainder_expected_prev[15];
	end
	if (
		( Arena_Remainder_expected_prev[16] !== 1'bx ) && ( Arena_Remainder_prev[16] !== Arena_Remainder_expected_prev[16] )
		&& ((Arena_Remainder_expected_prev[16] !== last_Arena_Remainder_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[16] = Arena_Remainder_expected_prev[16];
	end
	if (
		( Arena_Remainder_expected_prev[17] !== 1'bx ) && ( Arena_Remainder_prev[17] !== Arena_Remainder_expected_prev[17] )
		&& ((Arena_Remainder_expected_prev[17] !== last_Arena_Remainder_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[17] = Arena_Remainder_expected_prev[17];
	end
	if (
		( Arena_Remainder_expected_prev[18] !== 1'bx ) && ( Arena_Remainder_prev[18] !== Arena_Remainder_expected_prev[18] )
		&& ((Arena_Remainder_expected_prev[18] !== last_Arena_Remainder_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[18] = Arena_Remainder_expected_prev[18];
	end
	if (
		( Arena_Remainder_expected_prev[19] !== 1'bx ) && ( Arena_Remainder_prev[19] !== Arena_Remainder_expected_prev[19] )
		&& ((Arena_Remainder_expected_prev[19] !== last_Arena_Remainder_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[19] = Arena_Remainder_expected_prev[19];
	end
	if (
		( Arena_Remainder_expected_prev[20] !== 1'bx ) && ( Arena_Remainder_prev[20] !== Arena_Remainder_expected_prev[20] )
		&& ((Arena_Remainder_expected_prev[20] !== last_Arena_Remainder_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[20] = Arena_Remainder_expected_prev[20];
	end
	if (
		( Arena_Remainder_expected_prev[21] !== 1'bx ) && ( Arena_Remainder_prev[21] !== Arena_Remainder_expected_prev[21] )
		&& ((Arena_Remainder_expected_prev[21] !== last_Arena_Remainder_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[21] = Arena_Remainder_expected_prev[21];
	end
	if (
		( Arena_Remainder_expected_prev[22] !== 1'bx ) && ( Arena_Remainder_prev[22] !== Arena_Remainder_expected_prev[22] )
		&& ((Arena_Remainder_expected_prev[22] !== last_Arena_Remainder_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[22] = Arena_Remainder_expected_prev[22];
	end
	if (
		( Arena_Remainder_expected_prev[23] !== 1'bx ) && ( Arena_Remainder_prev[23] !== Arena_Remainder_expected_prev[23] )
		&& ((Arena_Remainder_expected_prev[23] !== last_Arena_Remainder_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[23] = Arena_Remainder_expected_prev[23];
	end
	if (
		( Arena_Remainder_expected_prev[24] !== 1'bx ) && ( Arena_Remainder_prev[24] !== Arena_Remainder_expected_prev[24] )
		&& ((Arena_Remainder_expected_prev[24] !== last_Arena_Remainder_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[24] = Arena_Remainder_expected_prev[24];
	end
	if (
		( Arena_Remainder_expected_prev[25] !== 1'bx ) && ( Arena_Remainder_prev[25] !== Arena_Remainder_expected_prev[25] )
		&& ((Arena_Remainder_expected_prev[25] !== last_Arena_Remainder_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[25] = Arena_Remainder_expected_prev[25];
	end
	if (
		( Arena_Remainder_expected_prev[26] !== 1'bx ) && ( Arena_Remainder_prev[26] !== Arena_Remainder_expected_prev[26] )
		&& ((Arena_Remainder_expected_prev[26] !== last_Arena_Remainder_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[26] = Arena_Remainder_expected_prev[26];
	end
	if (
		( Arena_Remainder_expected_prev[27] !== 1'bx ) && ( Arena_Remainder_prev[27] !== Arena_Remainder_expected_prev[27] )
		&& ((Arena_Remainder_expected_prev[27] !== last_Arena_Remainder_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[27] = Arena_Remainder_expected_prev[27];
	end
	if (
		( Arena_Remainder_expected_prev[28] !== 1'bx ) && ( Arena_Remainder_prev[28] !== Arena_Remainder_expected_prev[28] )
		&& ((Arena_Remainder_expected_prev[28] !== last_Arena_Remainder_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[28] = Arena_Remainder_expected_prev[28];
	end
	if (
		( Arena_Remainder_expected_prev[29] !== 1'bx ) && ( Arena_Remainder_prev[29] !== Arena_Remainder_expected_prev[29] )
		&& ((Arena_Remainder_expected_prev[29] !== last_Arena_Remainder_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[29] = Arena_Remainder_expected_prev[29];
	end
	if (
		( Arena_Remainder_expected_prev[30] !== 1'bx ) && ( Arena_Remainder_prev[30] !== Arena_Remainder_expected_prev[30] )
		&& ((Arena_Remainder_expected_prev[30] !== last_Arena_Remainder_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[30] = Arena_Remainder_expected_prev[30];
	end
	if (
		( Arena_Remainder_expected_prev[31] !== 1'bx ) && ( Arena_Remainder_prev[31] !== Arena_Remainder_expected_prev[31] )
		&& ((Arena_Remainder_expected_prev[31] !== last_Arena_Remainder_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_exp[31] = Arena_Remainder_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#160000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Arena_32bit_divider_usingVHDL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] Arena_Dividend;
reg [31:0] Arena_Divisor;
// wires                                               
wire [31:0] Arena_Quotient;
wire [31:0] Arena_Remainder;

wire sampler;                             

// assign statements (if any)                          
Arena_32bit_divider_usingVHDL i1 (
// port map - connection between master ports and signals/registers   
	.Arena_Dividend(Arena_Dividend),
	.Arena_Divisor(Arena_Divisor),
	.Arena_Quotient(Arena_Quotient),
	.Arena_Remainder(Arena_Remainder)
);
// Arena_Dividend[ 31 ]
initial
begin
	Arena_Dividend[31] = 1'b0;
end 
// Arena_Dividend[ 30 ]
initial
begin
	Arena_Dividend[30] = 1'b0;
end 
// Arena_Dividend[ 29 ]
initial
begin
	Arena_Dividend[29] = 1'b0;
end 
// Arena_Dividend[ 28 ]
initial
begin
	Arena_Dividend[28] = 1'b0;
end 
// Arena_Dividend[ 27 ]
initial
begin
	Arena_Dividend[27] = 1'b0;
end 
// Arena_Dividend[ 26 ]
initial
begin
	Arena_Dividend[26] = 1'b0;
end 
// Arena_Dividend[ 25 ]
initial
begin
	Arena_Dividend[25] = 1'b0;
end 
// Arena_Dividend[ 24 ]
initial
begin
	Arena_Dividend[24] = 1'b0;
end 
// Arena_Dividend[ 23 ]
initial
begin
	Arena_Dividend[23] = 1'b0;
end 
// Arena_Dividend[ 22 ]
initial
begin
	Arena_Dividend[22] = 1'b0;
end 
// Arena_Dividend[ 21 ]
initial
begin
	Arena_Dividend[21] = 1'b0;
end 
// Arena_Dividend[ 20 ]
initial
begin
	Arena_Dividend[20] = 1'b0;
end 
// Arena_Dividend[ 19 ]
initial
begin
	Arena_Dividend[19] = 1'b1;
end 
// Arena_Dividend[ 18 ]
initial
begin
	Arena_Dividend[18] = 1'b0;
end 
// Arena_Dividend[ 17 ]
initial
begin
	Arena_Dividend[17] = 1'b0;
end 
// Arena_Dividend[ 16 ]
initial
begin
	Arena_Dividend[16] = 1'b0;
end 
// Arena_Dividend[ 15 ]
initial
begin
	Arena_Dividend[15] = 1'b0;
end 
// Arena_Dividend[ 14 ]
initial
begin
	Arena_Dividend[14] = 1'b1;
end 
// Arena_Dividend[ 13 ]
initial
begin
	Arena_Dividend[13] = 1'b1;
end 
// Arena_Dividend[ 12 ]
initial
begin
	Arena_Dividend[12] = 1'b0;
end 
// Arena_Dividend[ 11 ]
initial
begin
	Arena_Dividend[11] = 1'b0;
end 
// Arena_Dividend[ 10 ]
initial
begin
	Arena_Dividend[10] = 1'b0;
end 
// Arena_Dividend[ 9 ]
initial
begin
	Arena_Dividend[9] = 1'b1;
end 
// Arena_Dividend[ 8 ]
initial
begin
	Arena_Dividend[8] = 1'b1;
end 
// Arena_Dividend[ 7 ]
initial
begin
	Arena_Dividend[7] = 1'b1;
end 
// Arena_Dividend[ 6 ]
initial
begin
	Arena_Dividend[6] = 1'b1;
end 
// Arena_Dividend[ 5 ]
initial
begin
	Arena_Dividend[5] = 1'b1;
end 
// Arena_Dividend[ 4 ]
initial
begin
	Arena_Dividend[4] = 1'b0;
end 
// Arena_Dividend[ 3 ]
initial
begin
	Arena_Dividend[3] = 1'b0;
end 
// Arena_Dividend[ 2 ]
initial
begin
	Arena_Dividend[2] = 1'b0;
end 
// Arena_Dividend[ 1 ]
initial
begin
	Arena_Dividend[1] = 1'b0;
end 
// Arena_Dividend[ 0 ]
initial
begin
	Arena_Dividend[0] = 1'b1;
end 
// Arena_Divisor[ 31 ]
initial
begin
	Arena_Divisor[31] = 1'b0;
end 
// Arena_Divisor[ 30 ]
initial
begin
	Arena_Divisor[30] = 1'b0;
end 
// Arena_Divisor[ 29 ]
initial
begin
	Arena_Divisor[29] = 1'b0;
end 
// Arena_Divisor[ 28 ]
initial
begin
	Arena_Divisor[28] = 1'b0;
end 
// Arena_Divisor[ 27 ]
initial
begin
	Arena_Divisor[27] = 1'b0;
end 
// Arena_Divisor[ 26 ]
initial
begin
	Arena_Divisor[26] = 1'b0;
end 
// Arena_Divisor[ 25 ]
initial
begin
	Arena_Divisor[25] = 1'b0;
end 
// Arena_Divisor[ 24 ]
initial
begin
	Arena_Divisor[24] = 1'b0;
end 
// Arena_Divisor[ 23 ]
initial
begin
	Arena_Divisor[23] = 1'b0;
end 
// Arena_Divisor[ 22 ]
initial
begin
	Arena_Divisor[22] = 1'b0;
end 
// Arena_Divisor[ 21 ]
initial
begin
	Arena_Divisor[21] = 1'b0;
end 
// Arena_Divisor[ 20 ]
initial
begin
	Arena_Divisor[20] = 1'b0;
end 
// Arena_Divisor[ 19 ]
initial
begin
	Arena_Divisor[19] = 1'b0;
end 
// Arena_Divisor[ 18 ]
initial
begin
	Arena_Divisor[18] = 1'b0;
end 
// Arena_Divisor[ 17 ]
initial
begin
	Arena_Divisor[17] = 1'b0;
end 
// Arena_Divisor[ 16 ]
initial
begin
	Arena_Divisor[16] = 1'b0;
end 
// Arena_Divisor[ 15 ]
initial
begin
	Arena_Divisor[15] = 1'b0;
end 
// Arena_Divisor[ 14 ]
initial
begin
	Arena_Divisor[14] = 1'b0;
end 
// Arena_Divisor[ 13 ]
initial
begin
	Arena_Divisor[13] = 1'b0;
end 
// Arena_Divisor[ 12 ]
initial
begin
	Arena_Divisor[12] = 1'b0;
end 
// Arena_Divisor[ 11 ]
initial
begin
	Arena_Divisor[11] = 1'b0;
end 
// Arena_Divisor[ 10 ]
initial
begin
	Arena_Divisor[10] = 1'b0;
end 
// Arena_Divisor[ 9 ]
initial
begin
	Arena_Divisor[9] = 1'b0;
end 
// Arena_Divisor[ 8 ]
initial
begin
	Arena_Divisor[8] = 1'b0;
end 
// Arena_Divisor[ 7 ]
initial
begin
	Arena_Divisor[7] = 1'b0;
end 
// Arena_Divisor[ 6 ]
initial
begin
	Arena_Divisor[6] = 1'b1;
end 
// Arena_Divisor[ 5 ]
initial
begin
	Arena_Divisor[5] = 1'b0;
end 
// Arena_Divisor[ 4 ]
initial
begin
	Arena_Divisor[4] = 1'b0;
end 
// Arena_Divisor[ 3 ]
initial
begin
	Arena_Divisor[3] = 1'b0;
end 
// Arena_Divisor[ 2 ]
initial
begin
	Arena_Divisor[2] = 1'b0;
end 
// Arena_Divisor[ 1 ]
initial
begin
	Arena_Divisor[1] = 1'b0;
end 
// Arena_Divisor[ 0 ]
initial
begin
	Arena_Divisor[0] = 1'b1;
end 

Arena_32bit_divider_usingVHDL_vlg_sample_tst tb_sample (
	.Arena_Dividend(Arena_Dividend),
	.Arena_Divisor(Arena_Divisor),
	.sampler_tx(sampler)
);

Arena_32bit_divider_usingVHDL_vlg_check_tst tb_out(
	.Arena_Quotient(Arena_Quotient),
	.Arena_Remainder(Arena_Remainder),
	.sampler_rx(sampler)
);
endmodule

