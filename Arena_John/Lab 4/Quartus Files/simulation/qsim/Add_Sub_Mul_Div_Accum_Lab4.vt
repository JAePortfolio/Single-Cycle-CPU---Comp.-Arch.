// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/04/2019 23:50:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Arena_32bitDivider_withSegmentDisplay
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Arena_32bitDivider_withSegmentDisplay_vlg_sample_tst(
	Arena_button,
	Arena_octalBits,
	Arena_startDivision,
	sampler_tx
);
input [3:0] Arena_button;
input [15:0] Arena_octalBits;
input  Arena_startDivision;
output sampler_tx;

reg sample;
time current_time;
always @(Arena_button or Arena_octalBits or Arena_startDivision)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Arena_32bitDivider_withSegmentDisplay_vlg_check_tst (
	Arena_Quotient_32bit,
	Arena_Remainder_32bit,
	Arena_segment1_A,
	Arena_segment1_B,
	Arena_segment1_C,
	Arena_segment1_D,
	Arena_segment1_E,
	Arena_segment1_F,
	Arena_segment1_G,
	Arena_segment2_A,
	Arena_segment2_B,
	Arena_segment2_C,
	Arena_segment2_D,
	Arena_segment2_E,
	Arena_segment2_F,
	Arena_segment2_G,
	Arena_segment3_A,
	Arena_segment3_B,
	Arena_segment3_C,
	Arena_segment3_D,
	Arena_segment3_E,
	Arena_segment3_F,
	Arena_segment3_G,
	Arena_segment4_A,
	Arena_segment4_B,
	Arena_segment4_C,
	Arena_segment4_D,
	Arena_segment4_E,
	Arena_segment4_F,
	Arena_segment4_G,
	Arena_segment5_A,
	Arena_segment5_B,
	Arena_segment5_C,
	Arena_segment5_D,
	Arena_segment5_E,
	Arena_segment5_F,
	Arena_segment5_G,
	Arena_segment6_A,
	Arena_segment6_B,
	Arena_segment6_C,
	Arena_segment6_D,
	Arena_segment6_E,
	Arena_segment6_F,
	Arena_segment6_G,
	Arena_segment7_A,
	Arena_segment7_B,
	Arena_segment7_C,
	Arena_segment7_D,
	Arena_segment7_E,
	Arena_segment7_F,
	Arena_segment7_G,
	Arena_segment8_A,
	Arena_segment8_B,
	Arena_segment8_C,
	Arena_segment8_D,
	Arena_segment8_E,
	Arena_segment8_F,
	Arena_segment8_G,
	sampler_rx
);
input [31:0] Arena_Quotient_32bit;
input [31:0] Arena_Remainder_32bit;
input  Arena_segment1_A;
input  Arena_segment1_B;
input  Arena_segment1_C;
input  Arena_segment1_D;
input  Arena_segment1_E;
input  Arena_segment1_F;
input  Arena_segment1_G;
input  Arena_segment2_A;
input  Arena_segment2_B;
input  Arena_segment2_C;
input  Arena_segment2_D;
input  Arena_segment2_E;
input  Arena_segment2_F;
input  Arena_segment2_G;
input  Arena_segment3_A;
input  Arena_segment3_B;
input  Arena_segment3_C;
input  Arena_segment3_D;
input  Arena_segment3_E;
input  Arena_segment3_F;
input  Arena_segment3_G;
input  Arena_segment4_A;
input  Arena_segment4_B;
input  Arena_segment4_C;
input  Arena_segment4_D;
input  Arena_segment4_E;
input  Arena_segment4_F;
input  Arena_segment4_G;
input  Arena_segment5_A;
input  Arena_segment5_B;
input  Arena_segment5_C;
input  Arena_segment5_D;
input  Arena_segment5_E;
input  Arena_segment5_F;
input  Arena_segment5_G;
input  Arena_segment6_A;
input  Arena_segment6_B;
input  Arena_segment6_C;
input  Arena_segment6_D;
input  Arena_segment6_E;
input  Arena_segment6_F;
input  Arena_segment6_G;
input  Arena_segment7_A;
input  Arena_segment7_B;
input  Arena_segment7_C;
input  Arena_segment7_D;
input  Arena_segment7_E;
input  Arena_segment7_F;
input  Arena_segment7_G;
input  Arena_segment8_A;
input  Arena_segment8_B;
input  Arena_segment8_C;
input  Arena_segment8_D;
input  Arena_segment8_E;
input  Arena_segment8_F;
input  Arena_segment8_G;
input sampler_rx;

reg [31:0] Arena_Quotient_32bit_expected;
reg [31:0] Arena_Remainder_32bit_expected;
reg  Arena_segment1_A_expected;
reg  Arena_segment1_B_expected;
reg  Arena_segment1_C_expected;
reg  Arena_segment1_D_expected;
reg  Arena_segment1_E_expected;
reg  Arena_segment1_F_expected;
reg  Arena_segment1_G_expected;
reg  Arena_segment2_A_expected;
reg  Arena_segment2_B_expected;
reg  Arena_segment2_C_expected;
reg  Arena_segment2_D_expected;
reg  Arena_segment2_E_expected;
reg  Arena_segment2_F_expected;
reg  Arena_segment2_G_expected;
reg  Arena_segment3_A_expected;
reg  Arena_segment3_B_expected;
reg  Arena_segment3_C_expected;
reg  Arena_segment3_D_expected;
reg  Arena_segment3_E_expected;
reg  Arena_segment3_F_expected;
reg  Arena_segment3_G_expected;
reg  Arena_segment4_A_expected;
reg  Arena_segment4_B_expected;
reg  Arena_segment4_C_expected;
reg  Arena_segment4_D_expected;
reg  Arena_segment4_E_expected;
reg  Arena_segment4_F_expected;
reg  Arena_segment4_G_expected;
reg  Arena_segment5_A_expected;
reg  Arena_segment5_B_expected;
reg  Arena_segment5_C_expected;
reg  Arena_segment5_D_expected;
reg  Arena_segment5_E_expected;
reg  Arena_segment5_F_expected;
reg  Arena_segment5_G_expected;
reg  Arena_segment6_A_expected;
reg  Arena_segment6_B_expected;
reg  Arena_segment6_C_expected;
reg  Arena_segment6_D_expected;
reg  Arena_segment6_E_expected;
reg  Arena_segment6_F_expected;
reg  Arena_segment6_G_expected;
reg  Arena_segment7_A_expected;
reg  Arena_segment7_B_expected;
reg  Arena_segment7_C_expected;
reg  Arena_segment7_D_expected;
reg  Arena_segment7_E_expected;
reg  Arena_segment7_F_expected;
reg  Arena_segment7_G_expected;
reg  Arena_segment8_A_expected;
reg  Arena_segment8_B_expected;
reg  Arena_segment8_C_expected;
reg  Arena_segment8_D_expected;
reg  Arena_segment8_E_expected;
reg  Arena_segment8_F_expected;
reg  Arena_segment8_G_expected;

reg [31:0] Arena_Quotient_32bit_prev;
reg [31:0] Arena_Remainder_32bit_prev;
reg  Arena_segment1_A_prev;
reg  Arena_segment1_B_prev;
reg  Arena_segment1_C_prev;
reg  Arena_segment1_D_prev;
reg  Arena_segment1_E_prev;
reg  Arena_segment1_F_prev;
reg  Arena_segment1_G_prev;
reg  Arena_segment2_A_prev;
reg  Arena_segment2_B_prev;
reg  Arena_segment2_C_prev;
reg  Arena_segment2_D_prev;
reg  Arena_segment2_E_prev;
reg  Arena_segment2_F_prev;
reg  Arena_segment2_G_prev;
reg  Arena_segment3_A_prev;
reg  Arena_segment3_B_prev;
reg  Arena_segment3_C_prev;
reg  Arena_segment3_D_prev;
reg  Arena_segment3_E_prev;
reg  Arena_segment3_F_prev;
reg  Arena_segment3_G_prev;
reg  Arena_segment4_A_prev;
reg  Arena_segment4_B_prev;
reg  Arena_segment4_C_prev;
reg  Arena_segment4_D_prev;
reg  Arena_segment4_E_prev;
reg  Arena_segment4_F_prev;
reg  Arena_segment4_G_prev;
reg  Arena_segment5_A_prev;
reg  Arena_segment5_B_prev;
reg  Arena_segment5_C_prev;
reg  Arena_segment5_D_prev;
reg  Arena_segment5_E_prev;
reg  Arena_segment5_F_prev;
reg  Arena_segment5_G_prev;
reg  Arena_segment6_A_prev;
reg  Arena_segment6_B_prev;
reg  Arena_segment6_C_prev;
reg  Arena_segment6_D_prev;
reg  Arena_segment6_E_prev;
reg  Arena_segment6_F_prev;
reg  Arena_segment6_G_prev;
reg  Arena_segment7_A_prev;
reg  Arena_segment7_B_prev;
reg  Arena_segment7_C_prev;
reg  Arena_segment7_D_prev;
reg  Arena_segment7_E_prev;
reg  Arena_segment7_F_prev;
reg  Arena_segment7_G_prev;
reg  Arena_segment8_A_prev;
reg  Arena_segment8_B_prev;
reg  Arena_segment8_C_prev;
reg  Arena_segment8_D_prev;
reg  Arena_segment8_E_prev;
reg  Arena_segment8_F_prev;
reg  Arena_segment8_G_prev;

reg [31:0] Arena_Quotient_32bit_expected_prev;
reg [31:0] Arena_Remainder_32bit_expected_prev;

reg [31:0] last_Arena_Quotient_32bit_exp;
reg [31:0] last_Arena_Remainder_32bit_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:58] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 58'b1;
end

// update real /o prevs

always @(trigger)
begin
	Arena_Quotient_32bit_prev = Arena_Quotient_32bit;
	Arena_Remainder_32bit_prev = Arena_Remainder_32bit;
	Arena_segment1_A_prev = Arena_segment1_A;
	Arena_segment1_B_prev = Arena_segment1_B;
	Arena_segment1_C_prev = Arena_segment1_C;
	Arena_segment1_D_prev = Arena_segment1_D;
	Arena_segment1_E_prev = Arena_segment1_E;
	Arena_segment1_F_prev = Arena_segment1_F;
	Arena_segment1_G_prev = Arena_segment1_G;
	Arena_segment2_A_prev = Arena_segment2_A;
	Arena_segment2_B_prev = Arena_segment2_B;
	Arena_segment2_C_prev = Arena_segment2_C;
	Arena_segment2_D_prev = Arena_segment2_D;
	Arena_segment2_E_prev = Arena_segment2_E;
	Arena_segment2_F_prev = Arena_segment2_F;
	Arena_segment2_G_prev = Arena_segment2_G;
	Arena_segment3_A_prev = Arena_segment3_A;
	Arena_segment3_B_prev = Arena_segment3_B;
	Arena_segment3_C_prev = Arena_segment3_C;
	Arena_segment3_D_prev = Arena_segment3_D;
	Arena_segment3_E_prev = Arena_segment3_E;
	Arena_segment3_F_prev = Arena_segment3_F;
	Arena_segment3_G_prev = Arena_segment3_G;
	Arena_segment4_A_prev = Arena_segment4_A;
	Arena_segment4_B_prev = Arena_segment4_B;
	Arena_segment4_C_prev = Arena_segment4_C;
	Arena_segment4_D_prev = Arena_segment4_D;
	Arena_segment4_E_prev = Arena_segment4_E;
	Arena_segment4_F_prev = Arena_segment4_F;
	Arena_segment4_G_prev = Arena_segment4_G;
	Arena_segment5_A_prev = Arena_segment5_A;
	Arena_segment5_B_prev = Arena_segment5_B;
	Arena_segment5_C_prev = Arena_segment5_C;
	Arena_segment5_D_prev = Arena_segment5_D;
	Arena_segment5_E_prev = Arena_segment5_E;
	Arena_segment5_F_prev = Arena_segment5_F;
	Arena_segment5_G_prev = Arena_segment5_G;
	Arena_segment6_A_prev = Arena_segment6_A;
	Arena_segment6_B_prev = Arena_segment6_B;
	Arena_segment6_C_prev = Arena_segment6_C;
	Arena_segment6_D_prev = Arena_segment6_D;
	Arena_segment6_E_prev = Arena_segment6_E;
	Arena_segment6_F_prev = Arena_segment6_F;
	Arena_segment6_G_prev = Arena_segment6_G;
	Arena_segment7_A_prev = Arena_segment7_A;
	Arena_segment7_B_prev = Arena_segment7_B;
	Arena_segment7_C_prev = Arena_segment7_C;
	Arena_segment7_D_prev = Arena_segment7_D;
	Arena_segment7_E_prev = Arena_segment7_E;
	Arena_segment7_F_prev = Arena_segment7_F;
	Arena_segment7_G_prev = Arena_segment7_G;
	Arena_segment8_A_prev = Arena_segment8_A;
	Arena_segment8_B_prev = Arena_segment8_B;
	Arena_segment8_C_prev = Arena_segment8_C;
	Arena_segment8_D_prev = Arena_segment8_D;
	Arena_segment8_E_prev = Arena_segment8_E;
	Arena_segment8_F_prev = Arena_segment8_F;
	Arena_segment8_G_prev = Arena_segment8_G;
end

// update expected /o prevs

always @(trigger)
begin
	Arena_Quotient_32bit_expected_prev = Arena_Quotient_32bit_expected;
	Arena_Remainder_32bit_expected_prev = Arena_Remainder_32bit_expected;
end


// expected Arena_Quotient_32bit[ 31 ]
initial
begin
	Arena_Quotient_32bit_expected[31] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 30 ]
initial
begin
	Arena_Quotient_32bit_expected[30] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 29 ]
initial
begin
	Arena_Quotient_32bit_expected[29] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 28 ]
initial
begin
	Arena_Quotient_32bit_expected[28] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 27 ]
initial
begin
	Arena_Quotient_32bit_expected[27] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 26 ]
initial
begin
	Arena_Quotient_32bit_expected[26] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 25 ]
initial
begin
	Arena_Quotient_32bit_expected[25] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 24 ]
initial
begin
	Arena_Quotient_32bit_expected[24] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 23 ]
initial
begin
	Arena_Quotient_32bit_expected[23] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 22 ]
initial
begin
	Arena_Quotient_32bit_expected[22] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 21 ]
initial
begin
	Arena_Quotient_32bit_expected[21] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 20 ]
initial
begin
	Arena_Quotient_32bit_expected[20] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 19 ]
initial
begin
	Arena_Quotient_32bit_expected[19] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 18 ]
initial
begin
	Arena_Quotient_32bit_expected[18] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 17 ]
initial
begin
	Arena_Quotient_32bit_expected[17] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 16 ]
initial
begin
	Arena_Quotient_32bit_expected[16] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 15 ]
initial
begin
	Arena_Quotient_32bit_expected[15] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 14 ]
initial
begin
	Arena_Quotient_32bit_expected[14] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 13 ]
initial
begin
	Arena_Quotient_32bit_expected[13] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 12 ]
initial
begin
	Arena_Quotient_32bit_expected[12] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 11 ]
initial
begin
	Arena_Quotient_32bit_expected[11] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 10 ]
initial
begin
	Arena_Quotient_32bit_expected[10] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 9 ]
initial
begin
	Arena_Quotient_32bit_expected[9] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 8 ]
initial
begin
	Arena_Quotient_32bit_expected[8] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 7 ]
initial
begin
	Arena_Quotient_32bit_expected[7] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 6 ]
initial
begin
	Arena_Quotient_32bit_expected[6] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 5 ]
initial
begin
	Arena_Quotient_32bit_expected[5] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 4 ]
initial
begin
	Arena_Quotient_32bit_expected[4] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 3 ]
initial
begin
	Arena_Quotient_32bit_expected[3] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 2 ]
initial
begin
	Arena_Quotient_32bit_expected[2] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 1 ]
initial
begin
	Arena_Quotient_32bit_expected[1] = 1'bX;
end 
// expected Arena_Quotient_32bit[ 0 ]
initial
begin
	Arena_Quotient_32bit_expected[0] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 31 ]
initial
begin
	Arena_Remainder_32bit_expected[31] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 30 ]
initial
begin
	Arena_Remainder_32bit_expected[30] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 29 ]
initial
begin
	Arena_Remainder_32bit_expected[29] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 28 ]
initial
begin
	Arena_Remainder_32bit_expected[28] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 27 ]
initial
begin
	Arena_Remainder_32bit_expected[27] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 26 ]
initial
begin
	Arena_Remainder_32bit_expected[26] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 25 ]
initial
begin
	Arena_Remainder_32bit_expected[25] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 24 ]
initial
begin
	Arena_Remainder_32bit_expected[24] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 23 ]
initial
begin
	Arena_Remainder_32bit_expected[23] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 22 ]
initial
begin
	Arena_Remainder_32bit_expected[22] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 21 ]
initial
begin
	Arena_Remainder_32bit_expected[21] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 20 ]
initial
begin
	Arena_Remainder_32bit_expected[20] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 19 ]
initial
begin
	Arena_Remainder_32bit_expected[19] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 18 ]
initial
begin
	Arena_Remainder_32bit_expected[18] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 17 ]
initial
begin
	Arena_Remainder_32bit_expected[17] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 16 ]
initial
begin
	Arena_Remainder_32bit_expected[16] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 15 ]
initial
begin
	Arena_Remainder_32bit_expected[15] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 14 ]
initial
begin
	Arena_Remainder_32bit_expected[14] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 13 ]
initial
begin
	Arena_Remainder_32bit_expected[13] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 12 ]
initial
begin
	Arena_Remainder_32bit_expected[12] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 11 ]
initial
begin
	Arena_Remainder_32bit_expected[11] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 10 ]
initial
begin
	Arena_Remainder_32bit_expected[10] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 9 ]
initial
begin
	Arena_Remainder_32bit_expected[9] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 8 ]
initial
begin
	Arena_Remainder_32bit_expected[8] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 7 ]
initial
begin
	Arena_Remainder_32bit_expected[7] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 6 ]
initial
begin
	Arena_Remainder_32bit_expected[6] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 5 ]
initial
begin
	Arena_Remainder_32bit_expected[5] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 4 ]
initial
begin
	Arena_Remainder_32bit_expected[4] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 3 ]
initial
begin
	Arena_Remainder_32bit_expected[3] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 2 ]
initial
begin
	Arena_Remainder_32bit_expected[2] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 1 ]
initial
begin
	Arena_Remainder_32bit_expected[1] = 1'bX;
end 
// expected Arena_Remainder_32bit[ 0 ]
initial
begin
	Arena_Remainder_32bit_expected[0] = 1'bX;
end 
// generate trigger
always @(Arena_Quotient_32bit_expected or Arena_Quotient_32bit or Arena_Remainder_32bit_expected or Arena_Remainder_32bit or Arena_segment1_A_expected or Arena_segment1_A or Arena_segment1_B_expected or Arena_segment1_B or Arena_segment1_C_expected or Arena_segment1_C or Arena_segment1_D_expected or Arena_segment1_D or Arena_segment1_E_expected or Arena_segment1_E or Arena_segment1_F_expected or Arena_segment1_F or Arena_segment1_G_expected or Arena_segment1_G or Arena_segment2_A_expected or Arena_segment2_A or Arena_segment2_B_expected or Arena_segment2_B or Arena_segment2_C_expected or Arena_segment2_C or Arena_segment2_D_expected or Arena_segment2_D or Arena_segment2_E_expected or Arena_segment2_E or Arena_segment2_F_expected or Arena_segment2_F or Arena_segment2_G_expected or Arena_segment2_G or Arena_segment3_A_expected or Arena_segment3_A or Arena_segment3_B_expected or Arena_segment3_B or Arena_segment3_C_expected or Arena_segment3_C or Arena_segment3_D_expected or Arena_segment3_D or Arena_segment3_E_expected or Arena_segment3_E or Arena_segment3_F_expected or Arena_segment3_F or Arena_segment3_G_expected or Arena_segment3_G or Arena_segment4_A_expected or Arena_segment4_A or Arena_segment4_B_expected or Arena_segment4_B or Arena_segment4_C_expected or Arena_segment4_C or Arena_segment4_D_expected or Arena_segment4_D or Arena_segment4_E_expected or Arena_segment4_E or Arena_segment4_F_expected or Arena_segment4_F or Arena_segment4_G_expected or Arena_segment4_G or Arena_segment5_A_expected or Arena_segment5_A or Arena_segment5_B_expected or Arena_segment5_B or Arena_segment5_C_expected or Arena_segment5_C or Arena_segment5_D_expected or Arena_segment5_D or Arena_segment5_E_expected or Arena_segment5_E or Arena_segment5_F_expected or Arena_segment5_F or Arena_segment5_G_expected or Arena_segment5_G or Arena_segment6_A_expected or Arena_segment6_A or Arena_segment6_B_expected or Arena_segment6_B or Arena_segment6_C_expected or Arena_segment6_C or Arena_segment6_D_expected or Arena_segment6_D or Arena_segment6_E_expected or Arena_segment6_E or Arena_segment6_F_expected or Arena_segment6_F or Arena_segment6_G_expected or Arena_segment6_G or Arena_segment7_A_expected or Arena_segment7_A or Arena_segment7_B_expected or Arena_segment7_B or Arena_segment7_C_expected or Arena_segment7_C or Arena_segment7_D_expected or Arena_segment7_D or Arena_segment7_E_expected or Arena_segment7_E or Arena_segment7_F_expected or Arena_segment7_F or Arena_segment7_G_expected or Arena_segment7_G or Arena_segment8_A_expected or Arena_segment8_A or Arena_segment8_B_expected or Arena_segment8_B or Arena_segment8_C_expected or Arena_segment8_C or Arena_segment8_D_expected or Arena_segment8_D or Arena_segment8_E_expected or Arena_segment8_E or Arena_segment8_F_expected or Arena_segment8_F or Arena_segment8_G_expected or Arena_segment8_G)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Arena_Quotient_32bit = %b | expected Arena_Remainder_32bit = %b | expected Arena_segment1_A = %b | expected Arena_segment1_B = %b | expected Arena_segment1_C = %b | expected Arena_segment1_D = %b | expected Arena_segment1_E = %b | expected Arena_segment1_F = %b | expected Arena_segment1_G = %b | expected Arena_segment2_A = %b | expected Arena_segment2_B = %b | expected Arena_segment2_C = %b | expected Arena_segment2_D = %b | expected Arena_segment2_E = %b | expected Arena_segment2_F = %b | expected Arena_segment2_G = %b | expected Arena_segment3_A = %b | expected Arena_segment3_B = %b | expected Arena_segment3_C = %b | expected Arena_segment3_D = %b | expected Arena_segment3_E = %b | expected Arena_segment3_F = %b | expected Arena_segment3_G = %b | expected Arena_segment4_A = %b | expected Arena_segment4_B = %b | expected Arena_segment4_C = %b | expected Arena_segment4_D = %b | expected Arena_segment4_E = %b | expected Arena_segment4_F = %b | expected Arena_segment4_G = %b | expected Arena_segment5_A = %b | expected Arena_segment5_B = %b | expected Arena_segment5_C = %b | expected Arena_segment5_D = %b | expected Arena_segment5_E = %b | expected Arena_segment5_F = %b | expected Arena_segment5_G = %b | expected Arena_segment6_A = %b | expected Arena_segment6_B = %b | expected Arena_segment6_C = %b | expected Arena_segment6_D = %b | expected Arena_segment6_E = %b | expected Arena_segment6_F = %b | expected Arena_segment6_G = %b | expected Arena_segment7_A = %b | expected Arena_segment7_B = %b | expected Arena_segment7_C = %b | expected Arena_segment7_D = %b | expected Arena_segment7_E = %b | expected Arena_segment7_F = %b | expected Arena_segment7_G = %b | expected Arena_segment8_A = %b | expected Arena_segment8_B = %b | expected Arena_segment8_C = %b | expected Arena_segment8_D = %b | expected Arena_segment8_E = %b | expected Arena_segment8_F = %b | expected Arena_segment8_G = %b | ",Arena_Quotient_32bit_expected_prev,Arena_Remainder_32bit_expected_prev,Arena_segment1_A_expected_prev,Arena_segment1_B_expected_prev,Arena_segment1_C_expected_prev,Arena_segment1_D_expected_prev,Arena_segment1_E_expected_prev,Arena_segment1_F_expected_prev,Arena_segment1_G_expected_prev,Arena_segment2_A_expected_prev,Arena_segment2_B_expected_prev,Arena_segment2_C_expected_prev,Arena_segment2_D_expected_prev,Arena_segment2_E_expected_prev,Arena_segment2_F_expected_prev,Arena_segment2_G_expected_prev,Arena_segment3_A_expected_prev,Arena_segment3_B_expected_prev,Arena_segment3_C_expected_prev,Arena_segment3_D_expected_prev,Arena_segment3_E_expected_prev,Arena_segment3_F_expected_prev,Arena_segment3_G_expected_prev,Arena_segment4_A_expected_prev,Arena_segment4_B_expected_prev,Arena_segment4_C_expected_prev,Arena_segment4_D_expected_prev,Arena_segment4_E_expected_prev,Arena_segment4_F_expected_prev,Arena_segment4_G_expected_prev,Arena_segment5_A_expected_prev,Arena_segment5_B_expected_prev,Arena_segment5_C_expected_prev,Arena_segment5_D_expected_prev,Arena_segment5_E_expected_prev,Arena_segment5_F_expected_prev,Arena_segment5_G_expected_prev,Arena_segment6_A_expected_prev,Arena_segment6_B_expected_prev,Arena_segment6_C_expected_prev,Arena_segment6_D_expected_prev,Arena_segment6_E_expected_prev,Arena_segment6_F_expected_prev,Arena_segment6_G_expected_prev,Arena_segment7_A_expected_prev,Arena_segment7_B_expected_prev,Arena_segment7_C_expected_prev,Arena_segment7_D_expected_prev,Arena_segment7_E_expected_prev,Arena_segment7_F_expected_prev,Arena_segment7_G_expected_prev,Arena_segment8_A_expected_prev,Arena_segment8_B_expected_prev,Arena_segment8_C_expected_prev,Arena_segment8_D_expected_prev,Arena_segment8_E_expected_prev,Arena_segment8_F_expected_prev,Arena_segment8_G_expected_prev);
	$display("| real Arena_Quotient_32bit = %b | real Arena_Remainder_32bit = %b | real Arena_segment1_A = %b | real Arena_segment1_B = %b | real Arena_segment1_C = %b | real Arena_segment1_D = %b | real Arena_segment1_E = %b | real Arena_segment1_F = %b | real Arena_segment1_G = %b | real Arena_segment2_A = %b | real Arena_segment2_B = %b | real Arena_segment2_C = %b | real Arena_segment2_D = %b | real Arena_segment2_E = %b | real Arena_segment2_F = %b | real Arena_segment2_G = %b | real Arena_segment3_A = %b | real Arena_segment3_B = %b | real Arena_segment3_C = %b | real Arena_segment3_D = %b | real Arena_segment3_E = %b | real Arena_segment3_F = %b | real Arena_segment3_G = %b | real Arena_segment4_A = %b | real Arena_segment4_B = %b | real Arena_segment4_C = %b | real Arena_segment4_D = %b | real Arena_segment4_E = %b | real Arena_segment4_F = %b | real Arena_segment4_G = %b | real Arena_segment5_A = %b | real Arena_segment5_B = %b | real Arena_segment5_C = %b | real Arena_segment5_D = %b | real Arena_segment5_E = %b | real Arena_segment5_F = %b | real Arena_segment5_G = %b | real Arena_segment6_A = %b | real Arena_segment6_B = %b | real Arena_segment6_C = %b | real Arena_segment6_D = %b | real Arena_segment6_E = %b | real Arena_segment6_F = %b | real Arena_segment6_G = %b | real Arena_segment7_A = %b | real Arena_segment7_B = %b | real Arena_segment7_C = %b | real Arena_segment7_D = %b | real Arena_segment7_E = %b | real Arena_segment7_F = %b | real Arena_segment7_G = %b | real Arena_segment8_A = %b | real Arena_segment8_B = %b | real Arena_segment8_C = %b | real Arena_segment8_D = %b | real Arena_segment8_E = %b | real Arena_segment8_F = %b | real Arena_segment8_G = %b | ",Arena_Quotient_32bit_prev,Arena_Remainder_32bit_prev,Arena_segment1_A_prev,Arena_segment1_B_prev,Arena_segment1_C_prev,Arena_segment1_D_prev,Arena_segment1_E_prev,Arena_segment1_F_prev,Arena_segment1_G_prev,Arena_segment2_A_prev,Arena_segment2_B_prev,Arena_segment2_C_prev,Arena_segment2_D_prev,Arena_segment2_E_prev,Arena_segment2_F_prev,Arena_segment2_G_prev,Arena_segment3_A_prev,Arena_segment3_B_prev,Arena_segment3_C_prev,Arena_segment3_D_prev,Arena_segment3_E_prev,Arena_segment3_F_prev,Arena_segment3_G_prev,Arena_segment4_A_prev,Arena_segment4_B_prev,Arena_segment4_C_prev,Arena_segment4_D_prev,Arena_segment4_E_prev,Arena_segment4_F_prev,Arena_segment4_G_prev,Arena_segment5_A_prev,Arena_segment5_B_prev,Arena_segment5_C_prev,Arena_segment5_D_prev,Arena_segment5_E_prev,Arena_segment5_F_prev,Arena_segment5_G_prev,Arena_segment6_A_prev,Arena_segment6_B_prev,Arena_segment6_C_prev,Arena_segment6_D_prev,Arena_segment6_E_prev,Arena_segment6_F_prev,Arena_segment6_G_prev,Arena_segment7_A_prev,Arena_segment7_B_prev,Arena_segment7_C_prev,Arena_segment7_D_prev,Arena_segment7_E_prev,Arena_segment7_F_prev,Arena_segment7_G_prev,Arena_segment8_A_prev,Arena_segment8_B_prev,Arena_segment8_C_prev,Arena_segment8_D_prev,Arena_segment8_E_prev,Arena_segment8_F_prev,Arena_segment8_G_prev);
`endif
	if (
		( Arena_Quotient_32bit_expected_prev[0] !== 1'bx ) && ( Arena_Quotient_32bit_prev[0] !== Arena_Quotient_32bit_expected_prev[0] )
		&& ((Arena_Quotient_32bit_expected_prev[0] !== last_Arena_Quotient_32bit_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[0] = Arena_Quotient_32bit_expected_prev[0];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[1] !== 1'bx ) && ( Arena_Quotient_32bit_prev[1] !== Arena_Quotient_32bit_expected_prev[1] )
		&& ((Arena_Quotient_32bit_expected_prev[1] !== last_Arena_Quotient_32bit_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[1] = Arena_Quotient_32bit_expected_prev[1];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[2] !== 1'bx ) && ( Arena_Quotient_32bit_prev[2] !== Arena_Quotient_32bit_expected_prev[2] )
		&& ((Arena_Quotient_32bit_expected_prev[2] !== last_Arena_Quotient_32bit_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[2] = Arena_Quotient_32bit_expected_prev[2];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[3] !== 1'bx ) && ( Arena_Quotient_32bit_prev[3] !== Arena_Quotient_32bit_expected_prev[3] )
		&& ((Arena_Quotient_32bit_expected_prev[3] !== last_Arena_Quotient_32bit_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[3] = Arena_Quotient_32bit_expected_prev[3];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[4] !== 1'bx ) && ( Arena_Quotient_32bit_prev[4] !== Arena_Quotient_32bit_expected_prev[4] )
		&& ((Arena_Quotient_32bit_expected_prev[4] !== last_Arena_Quotient_32bit_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[4] = Arena_Quotient_32bit_expected_prev[4];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[5] !== 1'bx ) && ( Arena_Quotient_32bit_prev[5] !== Arena_Quotient_32bit_expected_prev[5] )
		&& ((Arena_Quotient_32bit_expected_prev[5] !== last_Arena_Quotient_32bit_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[5] = Arena_Quotient_32bit_expected_prev[5];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[6] !== 1'bx ) && ( Arena_Quotient_32bit_prev[6] !== Arena_Quotient_32bit_expected_prev[6] )
		&& ((Arena_Quotient_32bit_expected_prev[6] !== last_Arena_Quotient_32bit_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[6] = Arena_Quotient_32bit_expected_prev[6];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[7] !== 1'bx ) && ( Arena_Quotient_32bit_prev[7] !== Arena_Quotient_32bit_expected_prev[7] )
		&& ((Arena_Quotient_32bit_expected_prev[7] !== last_Arena_Quotient_32bit_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[7] = Arena_Quotient_32bit_expected_prev[7];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[8] !== 1'bx ) && ( Arena_Quotient_32bit_prev[8] !== Arena_Quotient_32bit_expected_prev[8] )
		&& ((Arena_Quotient_32bit_expected_prev[8] !== last_Arena_Quotient_32bit_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[8] = Arena_Quotient_32bit_expected_prev[8];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[9] !== 1'bx ) && ( Arena_Quotient_32bit_prev[9] !== Arena_Quotient_32bit_expected_prev[9] )
		&& ((Arena_Quotient_32bit_expected_prev[9] !== last_Arena_Quotient_32bit_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[9] = Arena_Quotient_32bit_expected_prev[9];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[10] !== 1'bx ) && ( Arena_Quotient_32bit_prev[10] !== Arena_Quotient_32bit_expected_prev[10] )
		&& ((Arena_Quotient_32bit_expected_prev[10] !== last_Arena_Quotient_32bit_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[10] = Arena_Quotient_32bit_expected_prev[10];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[11] !== 1'bx ) && ( Arena_Quotient_32bit_prev[11] !== Arena_Quotient_32bit_expected_prev[11] )
		&& ((Arena_Quotient_32bit_expected_prev[11] !== last_Arena_Quotient_32bit_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[11] = Arena_Quotient_32bit_expected_prev[11];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[12] !== 1'bx ) && ( Arena_Quotient_32bit_prev[12] !== Arena_Quotient_32bit_expected_prev[12] )
		&& ((Arena_Quotient_32bit_expected_prev[12] !== last_Arena_Quotient_32bit_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[12] = Arena_Quotient_32bit_expected_prev[12];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[13] !== 1'bx ) && ( Arena_Quotient_32bit_prev[13] !== Arena_Quotient_32bit_expected_prev[13] )
		&& ((Arena_Quotient_32bit_expected_prev[13] !== last_Arena_Quotient_32bit_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[13] = Arena_Quotient_32bit_expected_prev[13];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[14] !== 1'bx ) && ( Arena_Quotient_32bit_prev[14] !== Arena_Quotient_32bit_expected_prev[14] )
		&& ((Arena_Quotient_32bit_expected_prev[14] !== last_Arena_Quotient_32bit_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[14] = Arena_Quotient_32bit_expected_prev[14];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[15] !== 1'bx ) && ( Arena_Quotient_32bit_prev[15] !== Arena_Quotient_32bit_expected_prev[15] )
		&& ((Arena_Quotient_32bit_expected_prev[15] !== last_Arena_Quotient_32bit_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[15] = Arena_Quotient_32bit_expected_prev[15];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[16] !== 1'bx ) && ( Arena_Quotient_32bit_prev[16] !== Arena_Quotient_32bit_expected_prev[16] )
		&& ((Arena_Quotient_32bit_expected_prev[16] !== last_Arena_Quotient_32bit_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[16] = Arena_Quotient_32bit_expected_prev[16];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[17] !== 1'bx ) && ( Arena_Quotient_32bit_prev[17] !== Arena_Quotient_32bit_expected_prev[17] )
		&& ((Arena_Quotient_32bit_expected_prev[17] !== last_Arena_Quotient_32bit_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[17] = Arena_Quotient_32bit_expected_prev[17];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[18] !== 1'bx ) && ( Arena_Quotient_32bit_prev[18] !== Arena_Quotient_32bit_expected_prev[18] )
		&& ((Arena_Quotient_32bit_expected_prev[18] !== last_Arena_Quotient_32bit_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[18] = Arena_Quotient_32bit_expected_prev[18];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[19] !== 1'bx ) && ( Arena_Quotient_32bit_prev[19] !== Arena_Quotient_32bit_expected_prev[19] )
		&& ((Arena_Quotient_32bit_expected_prev[19] !== last_Arena_Quotient_32bit_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[19] = Arena_Quotient_32bit_expected_prev[19];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[20] !== 1'bx ) && ( Arena_Quotient_32bit_prev[20] !== Arena_Quotient_32bit_expected_prev[20] )
		&& ((Arena_Quotient_32bit_expected_prev[20] !== last_Arena_Quotient_32bit_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[20] = Arena_Quotient_32bit_expected_prev[20];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[21] !== 1'bx ) && ( Arena_Quotient_32bit_prev[21] !== Arena_Quotient_32bit_expected_prev[21] )
		&& ((Arena_Quotient_32bit_expected_prev[21] !== last_Arena_Quotient_32bit_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[21] = Arena_Quotient_32bit_expected_prev[21];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[22] !== 1'bx ) && ( Arena_Quotient_32bit_prev[22] !== Arena_Quotient_32bit_expected_prev[22] )
		&& ((Arena_Quotient_32bit_expected_prev[22] !== last_Arena_Quotient_32bit_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[22] = Arena_Quotient_32bit_expected_prev[22];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[23] !== 1'bx ) && ( Arena_Quotient_32bit_prev[23] !== Arena_Quotient_32bit_expected_prev[23] )
		&& ((Arena_Quotient_32bit_expected_prev[23] !== last_Arena_Quotient_32bit_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[23] = Arena_Quotient_32bit_expected_prev[23];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[24] !== 1'bx ) && ( Arena_Quotient_32bit_prev[24] !== Arena_Quotient_32bit_expected_prev[24] )
		&& ((Arena_Quotient_32bit_expected_prev[24] !== last_Arena_Quotient_32bit_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[24] = Arena_Quotient_32bit_expected_prev[24];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[25] !== 1'bx ) && ( Arena_Quotient_32bit_prev[25] !== Arena_Quotient_32bit_expected_prev[25] )
		&& ((Arena_Quotient_32bit_expected_prev[25] !== last_Arena_Quotient_32bit_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[25] = Arena_Quotient_32bit_expected_prev[25];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[26] !== 1'bx ) && ( Arena_Quotient_32bit_prev[26] !== Arena_Quotient_32bit_expected_prev[26] )
		&& ((Arena_Quotient_32bit_expected_prev[26] !== last_Arena_Quotient_32bit_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[26] = Arena_Quotient_32bit_expected_prev[26];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[27] !== 1'bx ) && ( Arena_Quotient_32bit_prev[27] !== Arena_Quotient_32bit_expected_prev[27] )
		&& ((Arena_Quotient_32bit_expected_prev[27] !== last_Arena_Quotient_32bit_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[27] = Arena_Quotient_32bit_expected_prev[27];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[28] !== 1'bx ) && ( Arena_Quotient_32bit_prev[28] !== Arena_Quotient_32bit_expected_prev[28] )
		&& ((Arena_Quotient_32bit_expected_prev[28] !== last_Arena_Quotient_32bit_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[28] = Arena_Quotient_32bit_expected_prev[28];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[29] !== 1'bx ) && ( Arena_Quotient_32bit_prev[29] !== Arena_Quotient_32bit_expected_prev[29] )
		&& ((Arena_Quotient_32bit_expected_prev[29] !== last_Arena_Quotient_32bit_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[29] = Arena_Quotient_32bit_expected_prev[29];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[30] !== 1'bx ) && ( Arena_Quotient_32bit_prev[30] !== Arena_Quotient_32bit_expected_prev[30] )
		&& ((Arena_Quotient_32bit_expected_prev[30] !== last_Arena_Quotient_32bit_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[30] = Arena_Quotient_32bit_expected_prev[30];
	end
	if (
		( Arena_Quotient_32bit_expected_prev[31] !== 1'bx ) && ( Arena_Quotient_32bit_prev[31] !== Arena_Quotient_32bit_expected_prev[31] )
		&& ((Arena_Quotient_32bit_expected_prev[31] !== last_Arena_Quotient_32bit_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Quotient_32bit[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Quotient_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Quotient_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_Quotient_32bit_exp[31] = Arena_Quotient_32bit_expected_prev[31];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[0] !== 1'bx ) && ( Arena_Remainder_32bit_prev[0] !== Arena_Remainder_32bit_expected_prev[0] )
		&& ((Arena_Remainder_32bit_expected_prev[0] !== last_Arena_Remainder_32bit_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[0] = Arena_Remainder_32bit_expected_prev[0];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[1] !== 1'bx ) && ( Arena_Remainder_32bit_prev[1] !== Arena_Remainder_32bit_expected_prev[1] )
		&& ((Arena_Remainder_32bit_expected_prev[1] !== last_Arena_Remainder_32bit_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[1] = Arena_Remainder_32bit_expected_prev[1];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[2] !== 1'bx ) && ( Arena_Remainder_32bit_prev[2] !== Arena_Remainder_32bit_expected_prev[2] )
		&& ((Arena_Remainder_32bit_expected_prev[2] !== last_Arena_Remainder_32bit_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[2] = Arena_Remainder_32bit_expected_prev[2];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[3] !== 1'bx ) && ( Arena_Remainder_32bit_prev[3] !== Arena_Remainder_32bit_expected_prev[3] )
		&& ((Arena_Remainder_32bit_expected_prev[3] !== last_Arena_Remainder_32bit_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[3] = Arena_Remainder_32bit_expected_prev[3];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[4] !== 1'bx ) && ( Arena_Remainder_32bit_prev[4] !== Arena_Remainder_32bit_expected_prev[4] )
		&& ((Arena_Remainder_32bit_expected_prev[4] !== last_Arena_Remainder_32bit_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[4] = Arena_Remainder_32bit_expected_prev[4];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[5] !== 1'bx ) && ( Arena_Remainder_32bit_prev[5] !== Arena_Remainder_32bit_expected_prev[5] )
		&& ((Arena_Remainder_32bit_expected_prev[5] !== last_Arena_Remainder_32bit_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[5] = Arena_Remainder_32bit_expected_prev[5];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[6] !== 1'bx ) && ( Arena_Remainder_32bit_prev[6] !== Arena_Remainder_32bit_expected_prev[6] )
		&& ((Arena_Remainder_32bit_expected_prev[6] !== last_Arena_Remainder_32bit_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[6] = Arena_Remainder_32bit_expected_prev[6];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[7] !== 1'bx ) && ( Arena_Remainder_32bit_prev[7] !== Arena_Remainder_32bit_expected_prev[7] )
		&& ((Arena_Remainder_32bit_expected_prev[7] !== last_Arena_Remainder_32bit_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[7] = Arena_Remainder_32bit_expected_prev[7];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[8] !== 1'bx ) && ( Arena_Remainder_32bit_prev[8] !== Arena_Remainder_32bit_expected_prev[8] )
		&& ((Arena_Remainder_32bit_expected_prev[8] !== last_Arena_Remainder_32bit_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[8] = Arena_Remainder_32bit_expected_prev[8];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[9] !== 1'bx ) && ( Arena_Remainder_32bit_prev[9] !== Arena_Remainder_32bit_expected_prev[9] )
		&& ((Arena_Remainder_32bit_expected_prev[9] !== last_Arena_Remainder_32bit_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[9] = Arena_Remainder_32bit_expected_prev[9];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[10] !== 1'bx ) && ( Arena_Remainder_32bit_prev[10] !== Arena_Remainder_32bit_expected_prev[10] )
		&& ((Arena_Remainder_32bit_expected_prev[10] !== last_Arena_Remainder_32bit_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[10] = Arena_Remainder_32bit_expected_prev[10];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[11] !== 1'bx ) && ( Arena_Remainder_32bit_prev[11] !== Arena_Remainder_32bit_expected_prev[11] )
		&& ((Arena_Remainder_32bit_expected_prev[11] !== last_Arena_Remainder_32bit_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[11] = Arena_Remainder_32bit_expected_prev[11];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[12] !== 1'bx ) && ( Arena_Remainder_32bit_prev[12] !== Arena_Remainder_32bit_expected_prev[12] )
		&& ((Arena_Remainder_32bit_expected_prev[12] !== last_Arena_Remainder_32bit_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[12] = Arena_Remainder_32bit_expected_prev[12];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[13] !== 1'bx ) && ( Arena_Remainder_32bit_prev[13] !== Arena_Remainder_32bit_expected_prev[13] )
		&& ((Arena_Remainder_32bit_expected_prev[13] !== last_Arena_Remainder_32bit_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[13] = Arena_Remainder_32bit_expected_prev[13];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[14] !== 1'bx ) && ( Arena_Remainder_32bit_prev[14] !== Arena_Remainder_32bit_expected_prev[14] )
		&& ((Arena_Remainder_32bit_expected_prev[14] !== last_Arena_Remainder_32bit_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[14] = Arena_Remainder_32bit_expected_prev[14];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[15] !== 1'bx ) && ( Arena_Remainder_32bit_prev[15] !== Arena_Remainder_32bit_expected_prev[15] )
		&& ((Arena_Remainder_32bit_expected_prev[15] !== last_Arena_Remainder_32bit_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[15] = Arena_Remainder_32bit_expected_prev[15];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[16] !== 1'bx ) && ( Arena_Remainder_32bit_prev[16] !== Arena_Remainder_32bit_expected_prev[16] )
		&& ((Arena_Remainder_32bit_expected_prev[16] !== last_Arena_Remainder_32bit_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[16] = Arena_Remainder_32bit_expected_prev[16];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[17] !== 1'bx ) && ( Arena_Remainder_32bit_prev[17] !== Arena_Remainder_32bit_expected_prev[17] )
		&& ((Arena_Remainder_32bit_expected_prev[17] !== last_Arena_Remainder_32bit_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[17] = Arena_Remainder_32bit_expected_prev[17];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[18] !== 1'bx ) && ( Arena_Remainder_32bit_prev[18] !== Arena_Remainder_32bit_expected_prev[18] )
		&& ((Arena_Remainder_32bit_expected_prev[18] !== last_Arena_Remainder_32bit_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[18] = Arena_Remainder_32bit_expected_prev[18];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[19] !== 1'bx ) && ( Arena_Remainder_32bit_prev[19] !== Arena_Remainder_32bit_expected_prev[19] )
		&& ((Arena_Remainder_32bit_expected_prev[19] !== last_Arena_Remainder_32bit_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[19] = Arena_Remainder_32bit_expected_prev[19];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[20] !== 1'bx ) && ( Arena_Remainder_32bit_prev[20] !== Arena_Remainder_32bit_expected_prev[20] )
		&& ((Arena_Remainder_32bit_expected_prev[20] !== last_Arena_Remainder_32bit_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[20] = Arena_Remainder_32bit_expected_prev[20];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[21] !== 1'bx ) && ( Arena_Remainder_32bit_prev[21] !== Arena_Remainder_32bit_expected_prev[21] )
		&& ((Arena_Remainder_32bit_expected_prev[21] !== last_Arena_Remainder_32bit_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[21] = Arena_Remainder_32bit_expected_prev[21];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[22] !== 1'bx ) && ( Arena_Remainder_32bit_prev[22] !== Arena_Remainder_32bit_expected_prev[22] )
		&& ((Arena_Remainder_32bit_expected_prev[22] !== last_Arena_Remainder_32bit_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[22] = Arena_Remainder_32bit_expected_prev[22];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[23] !== 1'bx ) && ( Arena_Remainder_32bit_prev[23] !== Arena_Remainder_32bit_expected_prev[23] )
		&& ((Arena_Remainder_32bit_expected_prev[23] !== last_Arena_Remainder_32bit_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[23] = Arena_Remainder_32bit_expected_prev[23];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[24] !== 1'bx ) && ( Arena_Remainder_32bit_prev[24] !== Arena_Remainder_32bit_expected_prev[24] )
		&& ((Arena_Remainder_32bit_expected_prev[24] !== last_Arena_Remainder_32bit_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[24] = Arena_Remainder_32bit_expected_prev[24];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[25] !== 1'bx ) && ( Arena_Remainder_32bit_prev[25] !== Arena_Remainder_32bit_expected_prev[25] )
		&& ((Arena_Remainder_32bit_expected_prev[25] !== last_Arena_Remainder_32bit_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[25] = Arena_Remainder_32bit_expected_prev[25];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[26] !== 1'bx ) && ( Arena_Remainder_32bit_prev[26] !== Arena_Remainder_32bit_expected_prev[26] )
		&& ((Arena_Remainder_32bit_expected_prev[26] !== last_Arena_Remainder_32bit_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[26] = Arena_Remainder_32bit_expected_prev[26];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[27] !== 1'bx ) && ( Arena_Remainder_32bit_prev[27] !== Arena_Remainder_32bit_expected_prev[27] )
		&& ((Arena_Remainder_32bit_expected_prev[27] !== last_Arena_Remainder_32bit_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[27] = Arena_Remainder_32bit_expected_prev[27];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[28] !== 1'bx ) && ( Arena_Remainder_32bit_prev[28] !== Arena_Remainder_32bit_expected_prev[28] )
		&& ((Arena_Remainder_32bit_expected_prev[28] !== last_Arena_Remainder_32bit_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[28] = Arena_Remainder_32bit_expected_prev[28];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[29] !== 1'bx ) && ( Arena_Remainder_32bit_prev[29] !== Arena_Remainder_32bit_expected_prev[29] )
		&& ((Arena_Remainder_32bit_expected_prev[29] !== last_Arena_Remainder_32bit_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[29] = Arena_Remainder_32bit_expected_prev[29];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[30] !== 1'bx ) && ( Arena_Remainder_32bit_prev[30] !== Arena_Remainder_32bit_expected_prev[30] )
		&& ((Arena_Remainder_32bit_expected_prev[30] !== last_Arena_Remainder_32bit_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[30] = Arena_Remainder_32bit_expected_prev[30];
	end
	if (
		( Arena_Remainder_32bit_expected_prev[31] !== 1'bx ) && ( Arena_Remainder_32bit_prev[31] !== Arena_Remainder_32bit_expected_prev[31] )
		&& ((Arena_Remainder_32bit_expected_prev[31] !== last_Arena_Remainder_32bit_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_Remainder_32bit[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_Remainder_32bit_expected_prev);
		$display ("     Real value = %b", Arena_Remainder_32bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_Remainder_32bit_exp[31] = Arena_Remainder_32bit_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#160000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Arena_32bitDivider_withSegmentDisplay_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] Arena_button;
reg [15:0] Arena_octalBits;
reg Arena_startDivision;
// wires                                               
wire [31:0] Arena_Quotient_32bit;
wire [31:0] Arena_Remainder_32bit;
wire Arena_segment1_A;
wire Arena_segment1_B;
wire Arena_segment1_C;
wire Arena_segment1_D;
wire Arena_segment1_E;
wire Arena_segment1_F;
wire Arena_segment1_G;
wire Arena_segment2_A;
wire Arena_segment2_B;
wire Arena_segment2_C;
wire Arena_segment2_D;
wire Arena_segment2_E;
wire Arena_segment2_F;
wire Arena_segment2_G;
wire Arena_segment3_A;
wire Arena_segment3_B;
wire Arena_segment3_C;
wire Arena_segment3_D;
wire Arena_segment3_E;
wire Arena_segment3_F;
wire Arena_segment3_G;
wire Arena_segment4_A;
wire Arena_segment4_B;
wire Arena_segment4_C;
wire Arena_segment4_D;
wire Arena_segment4_E;
wire Arena_segment4_F;
wire Arena_segment4_G;
wire Arena_segment5_A;
wire Arena_segment5_B;
wire Arena_segment5_C;
wire Arena_segment5_D;
wire Arena_segment5_E;
wire Arena_segment5_F;
wire Arena_segment5_G;
wire Arena_segment6_A;
wire Arena_segment6_B;
wire Arena_segment6_C;
wire Arena_segment6_D;
wire Arena_segment6_E;
wire Arena_segment6_F;
wire Arena_segment6_G;
wire Arena_segment7_A;
wire Arena_segment7_B;
wire Arena_segment7_C;
wire Arena_segment7_D;
wire Arena_segment7_E;
wire Arena_segment7_F;
wire Arena_segment7_G;
wire Arena_segment8_A;
wire Arena_segment8_B;
wire Arena_segment8_C;
wire Arena_segment8_D;
wire Arena_segment8_E;
wire Arena_segment8_F;
wire Arena_segment8_G;

wire sampler;                             

// assign statements (if any)                          
Arena_32bitDivider_withSegmentDisplay i1 (
// port map - connection between master ports and signals/registers   
	.Arena_button(Arena_button),
	.Arena_octalBits(Arena_octalBits),
	.Arena_Quotient_32bit(Arena_Quotient_32bit),
	.Arena_Remainder_32bit(Arena_Remainder_32bit),
	.Arena_segment1_A(Arena_segment1_A),
	.Arena_segment1_B(Arena_segment1_B),
	.Arena_segment1_C(Arena_segment1_C),
	.Arena_segment1_D(Arena_segment1_D),
	.Arena_segment1_E(Arena_segment1_E),
	.Arena_segment1_F(Arena_segment1_F),
	.Arena_segment1_G(Arena_segment1_G),
	.Arena_segment2_A(Arena_segment2_A),
	.Arena_segment2_B(Arena_segment2_B),
	.Arena_segment2_C(Arena_segment2_C),
	.Arena_segment2_D(Arena_segment2_D),
	.Arena_segment2_E(Arena_segment2_E),
	.Arena_segment2_F(Arena_segment2_F),
	.Arena_segment2_G(Arena_segment2_G),
	.Arena_segment3_A(Arena_segment3_A),
	.Arena_segment3_B(Arena_segment3_B),
	.Arena_segment3_C(Arena_segment3_C),
	.Arena_segment3_D(Arena_segment3_D),
	.Arena_segment3_E(Arena_segment3_E),
	.Arena_segment3_F(Arena_segment3_F),
	.Arena_segment3_G(Arena_segment3_G),
	.Arena_segment4_A(Arena_segment4_A),
	.Arena_segment4_B(Arena_segment4_B),
	.Arena_segment4_C(Arena_segment4_C),
	.Arena_segment4_D(Arena_segment4_D),
	.Arena_segment4_E(Arena_segment4_E),
	.Arena_segment4_F(Arena_segment4_F),
	.Arena_segment4_G(Arena_segment4_G),
	.Arena_segment5_A(Arena_segment5_A),
	.Arena_segment5_B(Arena_segment5_B),
	.Arena_segment5_C(Arena_segment5_C),
	.Arena_segment5_D(Arena_segment5_D),
	.Arena_segment5_E(Arena_segment5_E),
	.Arena_segment5_F(Arena_segment5_F),
	.Arena_segment5_G(Arena_segment5_G),
	.Arena_segment6_A(Arena_segment6_A),
	.Arena_segment6_B(Arena_segment6_B),
	.Arena_segment6_C(Arena_segment6_C),
	.Arena_segment6_D(Arena_segment6_D),
	.Arena_segment6_E(Arena_segment6_E),
	.Arena_segment6_F(Arena_segment6_F),
	.Arena_segment6_G(Arena_segment6_G),
	.Arena_segment7_A(Arena_segment7_A),
	.Arena_segment7_B(Arena_segment7_B),
	.Arena_segment7_C(Arena_segment7_C),
	.Arena_segment7_D(Arena_segment7_D),
	.Arena_segment7_E(Arena_segment7_E),
	.Arena_segment7_F(Arena_segment7_F),
	.Arena_segment7_G(Arena_segment7_G),
	.Arena_segment8_A(Arena_segment8_A),
	.Arena_segment8_B(Arena_segment8_B),
	.Arena_segment8_C(Arena_segment8_C),
	.Arena_segment8_D(Arena_segment8_D),
	.Arena_segment8_E(Arena_segment8_E),
	.Arena_segment8_F(Arena_segment8_F),
	.Arena_segment8_G(Arena_segment8_G),
	.Arena_startDivision(Arena_startDivision)
);
// Arena_button[ 3 ]
initial
begin
	Arena_button[3] = 1'b1;
	Arena_button[3] = #90000 1'b0;
	Arena_button[3] = #30000 1'b1;
end 
// Arena_button[ 2 ]
initial
begin
	Arena_button[2] = 1'b1;
	Arena_button[2] = #60000 1'b0;
	Arena_button[2] = #30000 1'b1;
end 
// Arena_button[ 1 ]
initial
begin
	Arena_button[1] = 1'b1;
	Arena_button[1] = #30000 1'b0;
	Arena_button[1] = #30000 1'b1;
	Arena_button[1] = #90000 1'b0;
end 
// Arena_button[ 0 ]
initial
begin
	Arena_button[0] = 1'b0;
	Arena_button[0] = #30000 1'b1;
end 
// Arena_octalBits[ 15 ]
initial
begin
	Arena_octalBits[15] = 1'b0;
end 
// Arena_octalBits[ 14 ]
initial
begin
	Arena_octalBits[14] = 1'b0;
	Arena_octalBits[14] = #150000 1'b1;
end 
// Arena_octalBits[ 13 ]
initial
begin
	Arena_octalBits[13] = 1'b0;
	Arena_octalBits[13] = #120000 1'b1;
end 
// Arena_octalBits[ 12 ]
initial
begin
	Arena_octalBits[12] = 1'b0;
	Arena_octalBits[12] = #120000 1'b1;
end 
// Arena_octalBits[ 11 ]
initial
begin
	Arena_octalBits[11] = 1'b0;
	Arena_octalBits[11] = #150000 1'b1;
end 
// Arena_octalBits[ 10 ]
initial
begin
	Arena_octalBits[10] = 1'b0;
	Arena_octalBits[10] = #120000 1'b1;
	Arena_octalBits[10] = #30000 1'b0;
end 
// Arena_octalBits[ 9 ]
initial
begin
	Arena_octalBits[9] = 1'b0;
end 
// Arena_octalBits[ 8 ]
initial
begin
	Arena_octalBits[8] = 1'b0;
	Arena_octalBits[8] = #120000 1'b1;
	Arena_octalBits[8] = #30000 1'b0;
end 
// Arena_octalBits[ 7 ]
initial
begin
	Arena_octalBits[7] = 1'b0;
end 
// Arena_octalBits[ 6 ]
initial
begin
	Arena_octalBits[6] = 1'b0;
	Arena_octalBits[6] = #150000 1'b1;
end 
// Arena_octalBits[ 5 ]
initial
begin
	Arena_octalBits[5] = 1'b0;
	Arena_octalBits[5] = #120000 1'b1;
	Arena_octalBits[5] = #30000 1'b0;
end 
// Arena_octalBits[ 4 ]
initial
begin
	Arena_octalBits[4] = 1'b0;
	Arena_octalBits[4] = #150000 1'b1;
end 
// Arena_octalBits[ 3 ]
initial
begin
	Arena_octalBits[3] = 1'b1;
	Arena_octalBits[3] = #30000 1'b0;
end 
// Arena_octalBits[ 2 ]
initial
begin
	Arena_octalBits[2] = 1'b1;
	Arena_octalBits[2] = #30000 1'b0;
	Arena_octalBits[2] = #30000 1'b1;
	Arena_octalBits[2] = #30000 1'b0;
end 
// Arena_octalBits[ 1 ]
initial
begin
	Arena_octalBits[1] = 1'b0;
	Arena_octalBits[1] = #120000 1'b1;
	Arena_octalBits[1] = #30000 1'b0;
end 
// Arena_octalBits[ 0 ]
initial
begin
	Arena_octalBits[0] = 1'b0;
	Arena_octalBits[0] = #60000 1'b1;
	Arena_octalBits[0] = #30000 1'b0;
	Arena_octalBits[0] = #60000 1'b1;
end 

// Arena_startDivision
initial
begin
	Arena_startDivision = 1'b0;
	Arena_startDivision = #120000 1'b1;
end 

Arena_32bitDivider_withSegmentDisplay_vlg_sample_tst tb_sample (
	.Arena_button(Arena_button),
	.Arena_octalBits(Arena_octalBits),
	.Arena_startDivision(Arena_startDivision),
	.sampler_tx(sampler)
);

Arena_32bitDivider_withSegmentDisplay_vlg_check_tst tb_out(
	.Arena_Quotient_32bit(Arena_Quotient_32bit),
	.Arena_Remainder_32bit(Arena_Remainder_32bit),
	.Arena_segment1_A(Arena_segment1_A),
	.Arena_segment1_B(Arena_segment1_B),
	.Arena_segment1_C(Arena_segment1_C),
	.Arena_segment1_D(Arena_segment1_D),
	.Arena_segment1_E(Arena_segment1_E),
	.Arena_segment1_F(Arena_segment1_F),
	.Arena_segment1_G(Arena_segment1_G),
	.Arena_segment2_A(Arena_segment2_A),
	.Arena_segment2_B(Arena_segment2_B),
	.Arena_segment2_C(Arena_segment2_C),
	.Arena_segment2_D(Arena_segment2_D),
	.Arena_segment2_E(Arena_segment2_E),
	.Arena_segment2_F(Arena_segment2_F),
	.Arena_segment2_G(Arena_segment2_G),
	.Arena_segment3_A(Arena_segment3_A),
	.Arena_segment3_B(Arena_segment3_B),
	.Arena_segment3_C(Arena_segment3_C),
	.Arena_segment3_D(Arena_segment3_D),
	.Arena_segment3_E(Arena_segment3_E),
	.Arena_segment3_F(Arena_segment3_F),
	.Arena_segment3_G(Arena_segment3_G),
	.Arena_segment4_A(Arena_segment4_A),
	.Arena_segment4_B(Arena_segment4_B),
	.Arena_segment4_C(Arena_segment4_C),
	.Arena_segment4_D(Arena_segment4_D),
	.Arena_segment4_E(Arena_segment4_E),
	.Arena_segment4_F(Arena_segment4_F),
	.Arena_segment4_G(Arena_segment4_G),
	.Arena_segment5_A(Arena_segment5_A),
	.Arena_segment5_B(Arena_segment5_B),
	.Arena_segment5_C(Arena_segment5_C),
	.Arena_segment5_D(Arena_segment5_D),
	.Arena_segment5_E(Arena_segment5_E),
	.Arena_segment5_F(Arena_segment5_F),
	.Arena_segment5_G(Arena_segment5_G),
	.Arena_segment6_A(Arena_segment6_A),
	.Arena_segment6_B(Arena_segment6_B),
	.Arena_segment6_C(Arena_segment6_C),
	.Arena_segment6_D(Arena_segment6_D),
	.Arena_segment6_E(Arena_segment6_E),
	.Arena_segment6_F(Arena_segment6_F),
	.Arena_segment6_G(Arena_segment6_G),
	.Arena_segment7_A(Arena_segment7_A),
	.Arena_segment7_B(Arena_segment7_B),
	.Arena_segment7_C(Arena_segment7_C),
	.Arena_segment7_D(Arena_segment7_D),
	.Arena_segment7_E(Arena_segment7_E),
	.Arena_segment7_F(Arena_segment7_F),
	.Arena_segment7_G(Arena_segment7_G),
	.Arena_segment8_A(Arena_segment8_A),
	.Arena_segment8_B(Arena_segment8_B),
	.Arena_segment8_C(Arena_segment8_C),
	.Arena_segment8_D(Arena_segment8_D),
	.Arena_segment8_E(Arena_segment8_E),
	.Arena_segment8_F(Arena_segment8_F),
	.Arena_segment8_G(Arena_segment8_G),
	.sampler_rx(sampler)
);
endmodule

