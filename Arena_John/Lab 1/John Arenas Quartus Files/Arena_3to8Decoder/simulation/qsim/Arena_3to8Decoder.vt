// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/25/2019 13:03:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Arena_3to8Decoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Arena_3to8Decoder_vlg_sample_tst(
	Arena_A,
	Arena_B,
	Arena_C,
	sampler_tx
);
input  Arena_A;
input  Arena_B;
input  Arena_C;
output sampler_tx;

reg sample;
time current_time;
always @(Arena_A or Arena_B or Arena_C)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Arena_3to8Decoder_vlg_check_tst (
	Arena_F0,
	Arena_F1,
	Arena_F2,
	Arena_F3,
	Arena_F4,
	Arena_F5,
	Arena_F6,
	Arena_F7,
	sampler_rx
);
input  Arena_F0;
input  Arena_F1;
input  Arena_F2;
input  Arena_F3;
input  Arena_F4;
input  Arena_F5;
input  Arena_F6;
input  Arena_F7;
input sampler_rx;

reg  Arena_F0_expected;
reg  Arena_F1_expected;
reg  Arena_F2_expected;
reg  Arena_F3_expected;
reg  Arena_F4_expected;
reg  Arena_F5_expected;
reg  Arena_F6_expected;
reg  Arena_F7_expected;

reg  Arena_F0_prev;
reg  Arena_F1_prev;
reg  Arena_F2_prev;
reg  Arena_F3_prev;
reg  Arena_F4_prev;
reg  Arena_F5_prev;
reg  Arena_F6_prev;
reg  Arena_F7_prev;

reg  Arena_F0_expected_prev;
reg  Arena_F1_expected_prev;
reg  Arena_F2_expected_prev;
reg  Arena_F3_expected_prev;
reg  Arena_F4_expected_prev;
reg  Arena_F5_expected_prev;
reg  Arena_F6_expected_prev;
reg  Arena_F7_expected_prev;

reg  last_Arena_F0_exp;
reg  last_Arena_F1_exp;
reg  last_Arena_F2_exp;
reg  last_Arena_F3_exp;
reg  last_Arena_F4_exp;
reg  last_Arena_F5_exp;
reg  last_Arena_F6_exp;
reg  last_Arena_F7_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	Arena_F0_prev = Arena_F0;
	Arena_F1_prev = Arena_F1;
	Arena_F2_prev = Arena_F2;
	Arena_F3_prev = Arena_F3;
	Arena_F4_prev = Arena_F4;
	Arena_F5_prev = Arena_F5;
	Arena_F6_prev = Arena_F6;
	Arena_F7_prev = Arena_F7;
end

// update expected /o prevs

always @(trigger)
begin
	Arena_F0_expected_prev = Arena_F0_expected;
	Arena_F1_expected_prev = Arena_F1_expected;
	Arena_F2_expected_prev = Arena_F2_expected;
	Arena_F3_expected_prev = Arena_F3_expected;
	Arena_F4_expected_prev = Arena_F4_expected;
	Arena_F5_expected_prev = Arena_F5_expected;
	Arena_F6_expected_prev = Arena_F6_expected;
	Arena_F7_expected_prev = Arena_F7_expected;
end



// expected Arena_F0
initial
begin
	Arena_F0_expected = 1'bX;
end 

// expected Arena_F1
initial
begin
	Arena_F1_expected = 1'bX;
end 

// expected Arena_F2
initial
begin
	Arena_F2_expected = 1'bX;
end 

// expected Arena_F3
initial
begin
	Arena_F3_expected = 1'bX;
end 

// expected Arena_F4
initial
begin
	Arena_F4_expected = 1'bX;
end 

// expected Arena_F5
initial
begin
	Arena_F5_expected = 1'bX;
end 

// expected Arena_F6
initial
begin
	Arena_F6_expected = 1'bX;
end 

// expected Arena_F7
initial
begin
	Arena_F7_expected = 1'bX;
end 
// generate trigger
always @(Arena_F0_expected or Arena_F0 or Arena_F1_expected or Arena_F1 or Arena_F2_expected or Arena_F2 or Arena_F3_expected or Arena_F3 or Arena_F4_expected or Arena_F4 or Arena_F5_expected or Arena_F5 or Arena_F6_expected or Arena_F6 or Arena_F7_expected or Arena_F7)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Arena_F0 = %b | expected Arena_F1 = %b | expected Arena_F2 = %b | expected Arena_F3 = %b | expected Arena_F4 = %b | expected Arena_F5 = %b | expected Arena_F6 = %b | expected Arena_F7 = %b | ",Arena_F0_expected_prev,Arena_F1_expected_prev,Arena_F2_expected_prev,Arena_F3_expected_prev,Arena_F4_expected_prev,Arena_F5_expected_prev,Arena_F6_expected_prev,Arena_F7_expected_prev);
	$display("| real Arena_F0 = %b | real Arena_F1 = %b | real Arena_F2 = %b | real Arena_F3 = %b | real Arena_F4 = %b | real Arena_F5 = %b | real Arena_F6 = %b | real Arena_F7 = %b | ",Arena_F0_prev,Arena_F1_prev,Arena_F2_prev,Arena_F3_prev,Arena_F4_prev,Arena_F5_prev,Arena_F6_prev,Arena_F7_prev);
`endif
	if (
		( Arena_F0_expected_prev !== 1'bx ) && ( Arena_F0_prev !== Arena_F0_expected_prev )
		&& ((Arena_F0_expected_prev !== last_Arena_F0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_F0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_F0_expected_prev);
		$display ("     Real value = %b", Arena_F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_F0_exp = Arena_F0_expected_prev;
	end
	if (
		( Arena_F1_expected_prev !== 1'bx ) && ( Arena_F1_prev !== Arena_F1_expected_prev )
		&& ((Arena_F1_expected_prev !== last_Arena_F1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_F1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_F1_expected_prev);
		$display ("     Real value = %b", Arena_F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Arena_F1_exp = Arena_F1_expected_prev;
	end
	if (
		( Arena_F2_expected_prev !== 1'bx ) && ( Arena_F2_prev !== Arena_F2_expected_prev )
		&& ((Arena_F2_expected_prev !== last_Arena_F2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_F2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_F2_expected_prev);
		$display ("     Real value = %b", Arena_F2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Arena_F2_exp = Arena_F2_expected_prev;
	end
	if (
		( Arena_F3_expected_prev !== 1'bx ) && ( Arena_F3_prev !== Arena_F3_expected_prev )
		&& ((Arena_F3_expected_prev !== last_Arena_F3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_F3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_F3_expected_prev);
		$display ("     Real value = %b", Arena_F3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Arena_F3_exp = Arena_F3_expected_prev;
	end
	if (
		( Arena_F4_expected_prev !== 1'bx ) && ( Arena_F4_prev !== Arena_F4_expected_prev )
		&& ((Arena_F4_expected_prev !== last_Arena_F4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_F4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_F4_expected_prev);
		$display ("     Real value = %b", Arena_F4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Arena_F4_exp = Arena_F4_expected_prev;
	end
	if (
		( Arena_F5_expected_prev !== 1'bx ) && ( Arena_F5_prev !== Arena_F5_expected_prev )
		&& ((Arena_F5_expected_prev !== last_Arena_F5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_F5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_F5_expected_prev);
		$display ("     Real value = %b", Arena_F5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Arena_F5_exp = Arena_F5_expected_prev;
	end
	if (
		( Arena_F6_expected_prev !== 1'bx ) && ( Arena_F6_prev !== Arena_F6_expected_prev )
		&& ((Arena_F6_expected_prev !== last_Arena_F6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_F6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_F6_expected_prev);
		$display ("     Real value = %b", Arena_F6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Arena_F6_exp = Arena_F6_expected_prev;
	end
	if (
		( Arena_F7_expected_prev !== 1'bx ) && ( Arena_F7_prev !== Arena_F7_expected_prev )
		&& ((Arena_F7_expected_prev !== last_Arena_F7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_F7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_F7_expected_prev);
		$display ("     Real value = %b", Arena_F7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Arena_F7_exp = Arena_F7_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#160000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Arena_3to8Decoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Arena_A;
reg Arena_B;
reg Arena_C;
// wires                                               
wire Arena_F0;
wire Arena_F1;
wire Arena_F2;
wire Arena_F3;
wire Arena_F4;
wire Arena_F5;
wire Arena_F6;
wire Arena_F7;

wire sampler;                             

// assign statements (if any)                          
Arena_3to8Decoder i1 (
// port map - connection between master ports and signals/registers   
	.Arena_A(Arena_A),
	.Arena_B(Arena_B),
	.Arena_C(Arena_C),
	.Arena_F0(Arena_F0),
	.Arena_F1(Arena_F1),
	.Arena_F2(Arena_F2),
	.Arena_F3(Arena_F3),
	.Arena_F4(Arena_F4),
	.Arena_F5(Arena_F5),
	.Arena_F6(Arena_F6),
	.Arena_F7(Arena_F7)
);

// Arena_A
always
begin
	Arena_A = 1'b0;
	Arena_A = #80000 1'b1;
	#80000;
end 

// Arena_B
always
begin
	Arena_B = 1'b0;
	Arena_B = #40000 1'b1;
	#40000;
end 

// Arena_C
always
begin
	Arena_C = 1'b0;
	Arena_C = #20000 1'b1;
	#20000;
end 

Arena_3to8Decoder_vlg_sample_tst tb_sample (
	.Arena_A(Arena_A),
	.Arena_B(Arena_B),
	.Arena_C(Arena_C),
	.sampler_tx(sampler)
);

Arena_3to8Decoder_vlg_check_tst tb_out(
	.Arena_F0(Arena_F0),
	.Arena_F1(Arena_F1),
	.Arena_F2(Arena_F2),
	.Arena_F3(Arena_F3),
	.Arena_F4(Arena_F4),
	.Arena_F5(Arena_F5),
	.Arena_F6(Arena_F6),
	.Arena_F7(Arena_F7),
	.sampler_rx(sampler)
);
endmodule

