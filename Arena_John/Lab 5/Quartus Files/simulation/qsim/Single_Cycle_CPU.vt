// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/15/2019 02:03:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Single_Cycle_CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Single_Cycle_CPU_vlg_sample_tst(
	Arena_button,
	Arena_clk,
	Arena_octalBits,
	Arena_octalOpcode,
	DRAM_CKE,
	DRAM_CLK,
	INPUT_WE,
	instr,
	sampler_tx
);
input  Arena_button;
input  Arena_clk;
input [7:0] Arena_octalBits;
input [1:0] Arena_octalOpcode;
input  DRAM_CKE;
input  DRAM_CLK;
input  INPUT_WE;
input [31:0] instr;
output sampler_tx;

reg sample;
time current_time;
always @(Arena_button or Arena_clk or Arena_octalBits or Arena_octalOpcode or DRAM_CKE or DRAM_CLK or INPUT_WE or instr)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Single_Cycle_CPU_vlg_check_tst (
	aluOP,
	controlLine,
	DRAM_CE_N,
	DRAM_LDQM,
	DRAM_OE_N,
	DRAM_UDQM,
	DRAM_WE_N,
	operation,
	out_instruc,
	readData1,
	readData2,
	result,
	SRAM_CE_N,
	SRAM_LB_N,
	SRAM_OE_N,
	SRAM_UB_N,
	SRAM_WE_N,
	sampler_rx
);
input [2:0] aluOP;
input [6:0] controlLine;
input  DRAM_CE_N;
input  DRAM_LDQM;
input  DRAM_OE_N;
input  DRAM_UDQM;
input  DRAM_WE_N;
input [3:0] operation;
input [31:0] out_instruc;
input [31:0] readData1;
input [31:0] readData2;
input [31:0] result;
input  SRAM_CE_N;
input  SRAM_LB_N;
input  SRAM_OE_N;
input  SRAM_UB_N;
input  SRAM_WE_N;
input sampler_rx;

reg [2:0] aluOP_expected;
reg [6:0] controlLine_expected;
reg  DRAM_CE_N_expected;
reg  DRAM_LDQM_expected;
reg  DRAM_OE_N_expected;
reg  DRAM_UDQM_expected;
reg  DRAM_WE_N_expected;
reg [3:0] operation_expected;
reg [31:0] out_instruc_expected;
reg [31:0] readData1_expected;
reg [31:0] readData2_expected;
reg [31:0] result_expected;
reg  SRAM_CE_N_expected;
reg  SRAM_LB_N_expected;
reg  SRAM_OE_N_expected;
reg  SRAM_UB_N_expected;
reg  SRAM_WE_N_expected;

reg [2:0] aluOP_prev;
reg [6:0] controlLine_prev;
reg  DRAM_CE_N_prev;
reg  DRAM_LDQM_prev;
reg  DRAM_OE_N_prev;
reg  DRAM_UDQM_prev;
reg  DRAM_WE_N_prev;
reg [3:0] operation_prev;
reg [31:0] out_instruc_prev;
reg [31:0] readData1_prev;
reg [31:0] readData2_prev;
reg [31:0] result_prev;
reg  SRAM_CE_N_prev;
reg  SRAM_LB_N_prev;
reg  SRAM_OE_N_prev;
reg  SRAM_UB_N_prev;
reg  SRAM_WE_N_prev;

reg [2:0] aluOP_expected_prev;
reg [6:0] controlLine_expected_prev;
reg [31:0] out_instruc_expected_prev;
reg [31:0] readData1_expected_prev;
reg [31:0] readData2_expected_prev;
reg [31:0] result_expected_prev;

reg [2:0] last_aluOP_exp;
reg [6:0] last_controlLine_exp;
reg [31:0] last_out_instruc_exp;
reg [31:0] last_readData1_exp;
reg [31:0] last_readData2_exp;
reg [31:0] last_result_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	aluOP_prev = aluOP;
	controlLine_prev = controlLine;
	DRAM_CE_N_prev = DRAM_CE_N;
	DRAM_LDQM_prev = DRAM_LDQM;
	DRAM_OE_N_prev = DRAM_OE_N;
	DRAM_UDQM_prev = DRAM_UDQM;
	DRAM_WE_N_prev = DRAM_WE_N;
	operation_prev = operation;
	out_instruc_prev = out_instruc;
	readData1_prev = readData1;
	readData2_prev = readData2;
	result_prev = result;
	SRAM_CE_N_prev = SRAM_CE_N;
	SRAM_LB_N_prev = SRAM_LB_N;
	SRAM_OE_N_prev = SRAM_OE_N;
	SRAM_UB_N_prev = SRAM_UB_N;
	SRAM_WE_N_prev = SRAM_WE_N;
end

// update expected /o prevs

always @(trigger)
begin
	aluOP_expected_prev = aluOP_expected;
	controlLine_expected_prev = controlLine_expected;
	out_instruc_expected_prev = out_instruc_expected;
	readData1_expected_prev = readData1_expected;
	readData2_expected_prev = readData2_expected;
	result_expected_prev = result_expected;
end


// expected result[ 31 ]
initial
begin
	result_expected[31] = 1'bX;
	result_expected[31] = #999000 1'b0;
end 
// expected result[ 30 ]
initial
begin
	result_expected[30] = 1'bX;
	result_expected[30] = #999000 1'b0;
end 
// expected result[ 29 ]
initial
begin
	result_expected[29] = 1'bX;
	result_expected[29] = #999000 1'b0;
end 
// expected result[ 28 ]
initial
begin
	result_expected[28] = 1'bX;
	result_expected[28] = #999000 1'b0;
end 
// expected result[ 27 ]
initial
begin
	result_expected[27] = 1'bX;
	result_expected[27] = #999000 1'b0;
end 
// expected result[ 26 ]
initial
begin
	result_expected[26] = 1'bX;
	result_expected[26] = #999000 1'b0;
end 
// expected result[ 25 ]
initial
begin
	result_expected[25] = 1'bX;
	result_expected[25] = #999000 1'b0;
end 
// expected result[ 24 ]
initial
begin
	result_expected[24] = 1'bX;
	result_expected[24] = #999000 1'b0;
end 
// expected result[ 23 ]
initial
begin
	result_expected[23] = 1'bX;
	result_expected[23] = #999000 1'b0;
end 
// expected result[ 22 ]
initial
begin
	result_expected[22] = 1'bX;
	result_expected[22] = #999000 1'b0;
end 
// expected result[ 21 ]
initial
begin
	result_expected[21] = 1'bX;
	result_expected[21] = #999000 1'b0;
end 
// expected result[ 20 ]
initial
begin
	result_expected[20] = 1'bX;
	result_expected[20] = #999000 1'b0;
end 
// expected result[ 19 ]
initial
begin
	result_expected[19] = 1'bX;
	result_expected[19] = #999000 1'b0;
end 
// expected result[ 18 ]
initial
begin
	result_expected[18] = 1'bX;
	result_expected[18] = #999000 1'b0;
end 
// expected result[ 17 ]
initial
begin
	result_expected[17] = 1'bX;
	result_expected[17] = #999000 1'b0;
end 
// expected result[ 16 ]
initial
begin
	result_expected[16] = 1'bX;
	result_expected[16] = #999000 1'b0;
end 
// expected result[ 15 ]
initial
begin
	result_expected[15] = 1'bX;
	result_expected[15] = #999000 1'b0;
end 
// expected result[ 14 ]
initial
begin
	result_expected[14] = 1'bX;
	result_expected[14] = #999000 1'b0;
end 
// expected result[ 13 ]
initial
begin
	result_expected[13] = 1'bX;
	result_expected[13] = #999000 1'b0;
end 
// expected result[ 12 ]
initial
begin
	result_expected[12] = 1'bX;
	result_expected[12] = #999000 1'b0;
end 
// expected result[ 11 ]
initial
begin
	result_expected[11] = 1'bX;
	result_expected[11] = #999000 1'b0;
end 
// expected result[ 10 ]
initial
begin
	result_expected[10] = 1'bX;
	result_expected[10] = #999000 1'b0;
end 
// expected result[ 9 ]
initial
begin
	result_expected[9] = 1'bX;
	result_expected[9] = #999000 1'b0;
end 
// expected result[ 8 ]
initial
begin
	result_expected[8] = 1'bX;
	result_expected[8] = #999000 1'b0;
end 
// expected result[ 7 ]
initial
begin
	result_expected[7] = 1'bX;
	result_expected[7] = #999000 1'b0;
end 
// expected result[ 6 ]
initial
begin
	result_expected[6] = 1'bX;
	result_expected[6] = #999000 1'b0;
end 
// expected result[ 5 ]
initial
begin
	result_expected[5] = 1'bX;
	result_expected[5] = #999000 1'b0;
end 
// expected result[ 4 ]
initial
begin
	result_expected[4] = 1'bX;
	result_expected[4] = #999000 1'b0;
end 
// expected result[ 3 ]
initial
begin
	result_expected[3] = 1'bX;
	result_expected[3] = #999000 1'b0;
end 
// expected result[ 2 ]
initial
begin
	result_expected[2] = 1'bX;
	result_expected[2] = #999000 1'b0;
end 
// expected result[ 1 ]
initial
begin
	result_expected[1] = 1'bX;
	result_expected[1] = #999000 1'b0;
end 
// expected result[ 0 ]
initial
begin
	result_expected[0] = 1'bX;
	result_expected[0] = #999000 1'b0;
end 
// expected aluOP[ 2 ]
initial
begin
	aluOP_expected[2] = 1'bX;
	aluOP_expected[2] = #999000 1'b0;
end 
// expected aluOP[ 1 ]
initial
begin
	aluOP_expected[1] = 1'bX;
	aluOP_expected[1] = #999000 1'b0;
end 
// expected aluOP[ 0 ]
initial
begin
	aluOP_expected[0] = 1'bX;
	aluOP_expected[0] = #999000 1'b0;
end 
// expected controlLine[ 6 ]
initial
begin
	controlLine_expected[6] = 1'bX;
	controlLine_expected[6] = #999000 1'b0;
end 
// expected controlLine[ 5 ]
initial
begin
	controlLine_expected[5] = 1'bX;
	controlLine_expected[5] = #999000 1'b0;
end 
// expected controlLine[ 4 ]
initial
begin
	controlLine_expected[4] = 1'bX;
	controlLine_expected[4] = #999000 1'b0;
end 
// expected controlLine[ 3 ]
initial
begin
	controlLine_expected[3] = 1'bX;
	controlLine_expected[3] = #999000 1'b0;
end 
// expected controlLine[ 2 ]
initial
begin
	controlLine_expected[2] = 1'bX;
	controlLine_expected[2] = #999000 1'b0;
end 
// expected controlLine[ 1 ]
initial
begin
	controlLine_expected[1] = 1'bX;
	controlLine_expected[1] = #999000 1'b0;
end 
// expected controlLine[ 0 ]
initial
begin
	controlLine_expected[0] = 1'bX;
	controlLine_expected[0] = #999000 1'b0;
end 
// expected readData1[ 31 ]
initial
begin
	readData1_expected[31] = 1'bX;
	readData1_expected[31] = #999000 1'b0;
end 
// expected readData1[ 30 ]
initial
begin
	readData1_expected[30] = 1'bX;
	readData1_expected[30] = #999000 1'b0;
end 
// expected readData1[ 29 ]
initial
begin
	readData1_expected[29] = 1'bX;
	readData1_expected[29] = #999000 1'b0;
end 
// expected readData1[ 28 ]
initial
begin
	readData1_expected[28] = 1'bX;
	readData1_expected[28] = #999000 1'b0;
end 
// expected readData1[ 27 ]
initial
begin
	readData1_expected[27] = 1'bX;
	readData1_expected[27] = #999000 1'b0;
end 
// expected readData1[ 26 ]
initial
begin
	readData1_expected[26] = 1'bX;
	readData1_expected[26] = #999000 1'b0;
end 
// expected readData1[ 25 ]
initial
begin
	readData1_expected[25] = 1'bX;
	readData1_expected[25] = #999000 1'b0;
end 
// expected readData1[ 24 ]
initial
begin
	readData1_expected[24] = 1'bX;
	readData1_expected[24] = #999000 1'b0;
end 
// expected readData1[ 23 ]
initial
begin
	readData1_expected[23] = 1'bX;
	readData1_expected[23] = #999000 1'b0;
end 
// expected readData1[ 22 ]
initial
begin
	readData1_expected[22] = 1'bX;
	readData1_expected[22] = #999000 1'b0;
end 
// expected readData1[ 21 ]
initial
begin
	readData1_expected[21] = 1'bX;
	readData1_expected[21] = #999000 1'b0;
end 
// expected readData1[ 20 ]
initial
begin
	readData1_expected[20] = 1'bX;
	readData1_expected[20] = #999000 1'b0;
end 
// expected readData1[ 19 ]
initial
begin
	readData1_expected[19] = 1'bX;
	readData1_expected[19] = #999000 1'b0;
end 
// expected readData1[ 18 ]
initial
begin
	readData1_expected[18] = 1'bX;
	readData1_expected[18] = #999000 1'b0;
end 
// expected readData1[ 17 ]
initial
begin
	readData1_expected[17] = 1'bX;
	readData1_expected[17] = #999000 1'b0;
end 
// expected readData1[ 16 ]
initial
begin
	readData1_expected[16] = 1'bX;
	readData1_expected[16] = #999000 1'b0;
end 
// expected readData1[ 15 ]
initial
begin
	readData1_expected[15] = 1'bX;
	readData1_expected[15] = #999000 1'b0;
end 
// expected readData1[ 14 ]
initial
begin
	readData1_expected[14] = 1'bX;
	readData1_expected[14] = #999000 1'b0;
end 
// expected readData1[ 13 ]
initial
begin
	readData1_expected[13] = 1'bX;
	readData1_expected[13] = #999000 1'b0;
end 
// expected readData1[ 12 ]
initial
begin
	readData1_expected[12] = 1'bX;
	readData1_expected[12] = #999000 1'b0;
end 
// expected readData1[ 11 ]
initial
begin
	readData1_expected[11] = 1'bX;
	readData1_expected[11] = #999000 1'b0;
end 
// expected readData1[ 10 ]
initial
begin
	readData1_expected[10] = 1'bX;
	readData1_expected[10] = #999000 1'b0;
end 
// expected readData1[ 9 ]
initial
begin
	readData1_expected[9] = 1'bX;
	readData1_expected[9] = #999000 1'b0;
end 
// expected readData1[ 8 ]
initial
begin
	readData1_expected[8] = 1'bX;
	readData1_expected[8] = #999000 1'b0;
end 
// expected readData1[ 7 ]
initial
begin
	readData1_expected[7] = 1'bX;
	readData1_expected[7] = #999000 1'b0;
end 
// expected readData1[ 6 ]
initial
begin
	readData1_expected[6] = 1'bX;
	readData1_expected[6] = #999000 1'b0;
end 
// expected readData1[ 5 ]
initial
begin
	readData1_expected[5] = 1'bX;
	readData1_expected[5] = #999000 1'b0;
end 
// expected readData1[ 4 ]
initial
begin
	readData1_expected[4] = 1'bX;
	readData1_expected[4] = #999000 1'b0;
end 
// expected readData1[ 3 ]
initial
begin
	readData1_expected[3] = 1'bX;
	readData1_expected[3] = #999000 1'b0;
end 
// expected readData1[ 2 ]
initial
begin
	readData1_expected[2] = 1'bX;
	readData1_expected[2] = #999000 1'b0;
end 
// expected readData1[ 1 ]
initial
begin
	readData1_expected[1] = 1'bX;
	readData1_expected[1] = #999000 1'b0;
end 
// expected readData1[ 0 ]
initial
begin
	readData1_expected[0] = 1'bX;
	readData1_expected[0] = #999000 1'b0;
end 
// expected readData2[ 31 ]
initial
begin
	readData2_expected[31] = 1'bX;
	readData2_expected[31] = #999000 1'b0;
end 
// expected readData2[ 30 ]
initial
begin
	readData2_expected[30] = 1'bX;
	readData2_expected[30] = #999000 1'b0;
end 
// expected readData2[ 29 ]
initial
begin
	readData2_expected[29] = 1'bX;
	readData2_expected[29] = #999000 1'b0;
end 
// expected readData2[ 28 ]
initial
begin
	readData2_expected[28] = 1'bX;
	readData2_expected[28] = #999000 1'b0;
end 
// expected readData2[ 27 ]
initial
begin
	readData2_expected[27] = 1'bX;
	readData2_expected[27] = #999000 1'b0;
end 
// expected readData2[ 26 ]
initial
begin
	readData2_expected[26] = 1'bX;
	readData2_expected[26] = #999000 1'b0;
end 
// expected readData2[ 25 ]
initial
begin
	readData2_expected[25] = 1'bX;
	readData2_expected[25] = #999000 1'b0;
end 
// expected readData2[ 24 ]
initial
begin
	readData2_expected[24] = 1'bX;
	readData2_expected[24] = #999000 1'b0;
end 
// expected readData2[ 23 ]
initial
begin
	readData2_expected[23] = 1'bX;
	readData2_expected[23] = #999000 1'b0;
end 
// expected readData2[ 22 ]
initial
begin
	readData2_expected[22] = 1'bX;
	readData2_expected[22] = #999000 1'b0;
end 
// expected readData2[ 21 ]
initial
begin
	readData2_expected[21] = 1'bX;
	readData2_expected[21] = #999000 1'b0;
end 
// expected readData2[ 20 ]
initial
begin
	readData2_expected[20] = 1'bX;
	readData2_expected[20] = #999000 1'b0;
end 
// expected readData2[ 19 ]
initial
begin
	readData2_expected[19] = 1'bX;
	readData2_expected[19] = #999000 1'b0;
end 
// expected readData2[ 18 ]
initial
begin
	readData2_expected[18] = 1'bX;
	readData2_expected[18] = #999000 1'b0;
end 
// expected readData2[ 17 ]
initial
begin
	readData2_expected[17] = 1'bX;
	readData2_expected[17] = #999000 1'b0;
end 
// expected readData2[ 16 ]
initial
begin
	readData2_expected[16] = 1'bX;
	readData2_expected[16] = #999000 1'b0;
end 
// expected readData2[ 15 ]
initial
begin
	readData2_expected[15] = 1'bX;
	readData2_expected[15] = #999000 1'b0;
end 
// expected readData2[ 14 ]
initial
begin
	readData2_expected[14] = 1'bX;
	readData2_expected[14] = #999000 1'b0;
end 
// expected readData2[ 13 ]
initial
begin
	readData2_expected[13] = 1'bX;
	readData2_expected[13] = #999000 1'b0;
end 
// expected readData2[ 12 ]
initial
begin
	readData2_expected[12] = 1'bX;
	readData2_expected[12] = #999000 1'b0;
end 
// expected readData2[ 11 ]
initial
begin
	readData2_expected[11] = 1'bX;
	readData2_expected[11] = #999000 1'b0;
end 
// expected readData2[ 10 ]
initial
begin
	readData2_expected[10] = 1'bX;
	readData2_expected[10] = #999000 1'b0;
end 
// expected readData2[ 9 ]
initial
begin
	readData2_expected[9] = 1'bX;
	readData2_expected[9] = #999000 1'b0;
end 
// expected readData2[ 8 ]
initial
begin
	readData2_expected[8] = 1'bX;
	readData2_expected[8] = #999000 1'b0;
end 
// expected readData2[ 7 ]
initial
begin
	readData2_expected[7] = 1'bX;
	readData2_expected[7] = #999000 1'b0;
end 
// expected readData2[ 6 ]
initial
begin
	readData2_expected[6] = 1'bX;
	readData2_expected[6] = #999000 1'b0;
end 
// expected readData2[ 5 ]
initial
begin
	readData2_expected[5] = 1'bX;
	readData2_expected[5] = #999000 1'b0;
end 
// expected readData2[ 4 ]
initial
begin
	readData2_expected[4] = 1'bX;
	readData2_expected[4] = #999000 1'b0;
end 
// expected readData2[ 3 ]
initial
begin
	readData2_expected[3] = 1'bX;
	readData2_expected[3] = #999000 1'b0;
end 
// expected readData2[ 2 ]
initial
begin
	readData2_expected[2] = 1'bX;
	readData2_expected[2] = #999000 1'b0;
end 
// expected readData2[ 1 ]
initial
begin
	readData2_expected[1] = 1'bX;
	readData2_expected[1] = #999000 1'b0;
end 
// expected readData2[ 0 ]
initial
begin
	readData2_expected[0] = 1'bX;
	readData2_expected[0] = #999000 1'b0;
end 
// expected out_instruc[ 31 ]
initial
begin
	out_instruc_expected[31] = 1'bX;
	out_instruc_expected[31] = #999000 1'b0;
end 
// expected out_instruc[ 30 ]
initial
begin
	out_instruc_expected[30] = 1'bX;
	out_instruc_expected[30] = #999000 1'b0;
end 
// expected out_instruc[ 29 ]
initial
begin
	out_instruc_expected[29] = 1'bX;
	out_instruc_expected[29] = #999000 1'b0;
end 
// expected out_instruc[ 28 ]
initial
begin
	out_instruc_expected[28] = 1'bX;
	out_instruc_expected[28] = #999000 1'b0;
end 
// expected out_instruc[ 27 ]
initial
begin
	out_instruc_expected[27] = 1'bX;
	out_instruc_expected[27] = #999000 1'b0;
end 
// expected out_instruc[ 26 ]
initial
begin
	out_instruc_expected[26] = 1'bX;
	out_instruc_expected[26] = #999000 1'b0;
end 
// expected out_instruc[ 25 ]
initial
begin
	out_instruc_expected[25] = 1'bX;
	out_instruc_expected[25] = #999000 1'b0;
end 
// expected out_instruc[ 24 ]
initial
begin
	out_instruc_expected[24] = 1'bX;
	out_instruc_expected[24] = #999000 1'b0;
end 
// expected out_instruc[ 23 ]
initial
begin
	out_instruc_expected[23] = 1'bX;
	out_instruc_expected[23] = #999000 1'b0;
end 
// expected out_instruc[ 22 ]
initial
begin
	out_instruc_expected[22] = 1'bX;
	out_instruc_expected[22] = #999000 1'b0;
end 
// expected out_instruc[ 21 ]
initial
begin
	out_instruc_expected[21] = 1'bX;
	out_instruc_expected[21] = #999000 1'b0;
end 
// expected out_instruc[ 20 ]
initial
begin
	out_instruc_expected[20] = 1'bX;
	out_instruc_expected[20] = #999000 1'b0;
end 
// expected out_instruc[ 19 ]
initial
begin
	out_instruc_expected[19] = 1'bX;
	out_instruc_expected[19] = #999000 1'b0;
end 
// expected out_instruc[ 18 ]
initial
begin
	out_instruc_expected[18] = 1'bX;
	out_instruc_expected[18] = #999000 1'b0;
end 
// expected out_instruc[ 17 ]
initial
begin
	out_instruc_expected[17] = 1'bX;
	out_instruc_expected[17] = #999000 1'b0;
end 
// expected out_instruc[ 16 ]
initial
begin
	out_instruc_expected[16] = 1'bX;
	out_instruc_expected[16] = #999000 1'b0;
end 
// expected out_instruc[ 15 ]
initial
begin
	out_instruc_expected[15] = 1'bX;
	out_instruc_expected[15] = #999000 1'b0;
end 
// expected out_instruc[ 14 ]
initial
begin
	out_instruc_expected[14] = 1'bX;
	out_instruc_expected[14] = #999000 1'b0;
end 
// expected out_instruc[ 13 ]
initial
begin
	out_instruc_expected[13] = 1'bX;
	out_instruc_expected[13] = #999000 1'b0;
end 
// expected out_instruc[ 12 ]
initial
begin
	out_instruc_expected[12] = 1'bX;
	out_instruc_expected[12] = #999000 1'b0;
end 
// expected out_instruc[ 11 ]
initial
begin
	out_instruc_expected[11] = 1'bX;
	out_instruc_expected[11] = #999000 1'b0;
end 
// expected out_instruc[ 10 ]
initial
begin
	out_instruc_expected[10] = 1'bX;
	out_instruc_expected[10] = #999000 1'b0;
end 
// expected out_instruc[ 9 ]
initial
begin
	out_instruc_expected[9] = 1'bX;
	out_instruc_expected[9] = #999000 1'b0;
end 
// expected out_instruc[ 8 ]
initial
begin
	out_instruc_expected[8] = 1'bX;
	out_instruc_expected[8] = #999000 1'b0;
end 
// expected out_instruc[ 7 ]
initial
begin
	out_instruc_expected[7] = 1'bX;
	out_instruc_expected[7] = #999000 1'b0;
end 
// expected out_instruc[ 6 ]
initial
begin
	out_instruc_expected[6] = 1'bX;
	out_instruc_expected[6] = #999000 1'b0;
end 
// expected out_instruc[ 5 ]
initial
begin
	out_instruc_expected[5] = 1'bX;
	out_instruc_expected[5] = #999000 1'b0;
end 
// expected out_instruc[ 4 ]
initial
begin
	out_instruc_expected[4] = 1'bX;
	out_instruc_expected[4] = #999000 1'b0;
end 
// expected out_instruc[ 3 ]
initial
begin
	out_instruc_expected[3] = 1'bX;
	out_instruc_expected[3] = #999000 1'b0;
end 
// expected out_instruc[ 2 ]
initial
begin
	out_instruc_expected[2] = 1'bX;
	out_instruc_expected[2] = #999000 1'b0;
end 
// expected out_instruc[ 1 ]
initial
begin
	out_instruc_expected[1] = 1'bX;
	out_instruc_expected[1] = #999000 1'b0;
end 
// expected out_instruc[ 0 ]
initial
begin
	out_instruc_expected[0] = 1'bX;
	out_instruc_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(aluOP_expected or aluOP or controlLine_expected or controlLine or DRAM_CE_N_expected or DRAM_CE_N or DRAM_LDQM_expected or DRAM_LDQM or DRAM_OE_N_expected or DRAM_OE_N or DRAM_UDQM_expected or DRAM_UDQM or DRAM_WE_N_expected or DRAM_WE_N or operation_expected or operation or out_instruc_expected or out_instruc or readData1_expected or readData1 or readData2_expected or readData2 or result_expected or result or SRAM_CE_N_expected or SRAM_CE_N or SRAM_LB_N_expected or SRAM_LB_N or SRAM_OE_N_expected or SRAM_OE_N or SRAM_UB_N_expected or SRAM_UB_N or SRAM_WE_N_expected or SRAM_WE_N)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aluOP = %b | expected controlLine = %b | expected DRAM_CE_N = %b | expected DRAM_LDQM = %b | expected DRAM_OE_N = %b | expected DRAM_UDQM = %b | expected DRAM_WE_N = %b | expected operation = %b | expected out_instruc = %b | expected readData1 = %b | expected readData2 = %b | expected result = %b | expected SRAM_CE_N = %b | expected SRAM_LB_N = %b | expected SRAM_OE_N = %b | expected SRAM_UB_N = %b | expected SRAM_WE_N = %b | ",aluOP_expected_prev,controlLine_expected_prev,DRAM_CE_N_expected_prev,DRAM_LDQM_expected_prev,DRAM_OE_N_expected_prev,DRAM_UDQM_expected_prev,DRAM_WE_N_expected_prev,operation_expected_prev,out_instruc_expected_prev,readData1_expected_prev,readData2_expected_prev,result_expected_prev,SRAM_CE_N_expected_prev,SRAM_LB_N_expected_prev,SRAM_OE_N_expected_prev,SRAM_UB_N_expected_prev,SRAM_WE_N_expected_prev);
	$display("| real aluOP = %b | real controlLine = %b | real DRAM_CE_N = %b | real DRAM_LDQM = %b | real DRAM_OE_N = %b | real DRAM_UDQM = %b | real DRAM_WE_N = %b | real operation = %b | real out_instruc = %b | real readData1 = %b | real readData2 = %b | real result = %b | real SRAM_CE_N = %b | real SRAM_LB_N = %b | real SRAM_OE_N = %b | real SRAM_UB_N = %b | real SRAM_WE_N = %b | ",aluOP_prev,controlLine_prev,DRAM_CE_N_prev,DRAM_LDQM_prev,DRAM_OE_N_prev,DRAM_UDQM_prev,DRAM_WE_N_prev,operation_prev,out_instruc_prev,readData1_prev,readData2_prev,result_prev,SRAM_CE_N_prev,SRAM_LB_N_prev,SRAM_OE_N_prev,SRAM_UB_N_prev,SRAM_WE_N_prev);
`endif
	if (
		( aluOP_expected_prev[0] !== 1'bx ) && ( aluOP_prev[0] !== aluOP_expected_prev[0] )
		&& ((aluOP_expected_prev[0] !== last_aluOP_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOP_expected_prev);
		$display ("     Real value = %b", aluOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOP_exp[0] = aluOP_expected_prev[0];
	end
	if (
		( aluOP_expected_prev[1] !== 1'bx ) && ( aluOP_prev[1] !== aluOP_expected_prev[1] )
		&& ((aluOP_expected_prev[1] !== last_aluOP_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOP_expected_prev);
		$display ("     Real value = %b", aluOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOP_exp[1] = aluOP_expected_prev[1];
	end
	if (
		( aluOP_expected_prev[2] !== 1'bx ) && ( aluOP_prev[2] !== aluOP_expected_prev[2] )
		&& ((aluOP_expected_prev[2] !== last_aluOP_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOP_expected_prev);
		$display ("     Real value = %b", aluOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOP_exp[2] = aluOP_expected_prev[2];
	end
	if (
		( controlLine_expected_prev[0] !== 1'bx ) && ( controlLine_prev[0] !== controlLine_expected_prev[0] )
		&& ((controlLine_expected_prev[0] !== last_controlLine_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controlLine[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controlLine_expected_prev);
		$display ("     Real value = %b", controlLine_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_controlLine_exp[0] = controlLine_expected_prev[0];
	end
	if (
		( controlLine_expected_prev[1] !== 1'bx ) && ( controlLine_prev[1] !== controlLine_expected_prev[1] )
		&& ((controlLine_expected_prev[1] !== last_controlLine_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controlLine[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controlLine_expected_prev);
		$display ("     Real value = %b", controlLine_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_controlLine_exp[1] = controlLine_expected_prev[1];
	end
	if (
		( controlLine_expected_prev[2] !== 1'bx ) && ( controlLine_prev[2] !== controlLine_expected_prev[2] )
		&& ((controlLine_expected_prev[2] !== last_controlLine_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controlLine[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controlLine_expected_prev);
		$display ("     Real value = %b", controlLine_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_controlLine_exp[2] = controlLine_expected_prev[2];
	end
	if (
		( controlLine_expected_prev[3] !== 1'bx ) && ( controlLine_prev[3] !== controlLine_expected_prev[3] )
		&& ((controlLine_expected_prev[3] !== last_controlLine_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controlLine[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controlLine_expected_prev);
		$display ("     Real value = %b", controlLine_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_controlLine_exp[3] = controlLine_expected_prev[3];
	end
	if (
		( controlLine_expected_prev[4] !== 1'bx ) && ( controlLine_prev[4] !== controlLine_expected_prev[4] )
		&& ((controlLine_expected_prev[4] !== last_controlLine_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controlLine[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controlLine_expected_prev);
		$display ("     Real value = %b", controlLine_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_controlLine_exp[4] = controlLine_expected_prev[4];
	end
	if (
		( controlLine_expected_prev[5] !== 1'bx ) && ( controlLine_prev[5] !== controlLine_expected_prev[5] )
		&& ((controlLine_expected_prev[5] !== last_controlLine_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controlLine[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controlLine_expected_prev);
		$display ("     Real value = %b", controlLine_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_controlLine_exp[5] = controlLine_expected_prev[5];
	end
	if (
		( controlLine_expected_prev[6] !== 1'bx ) && ( controlLine_prev[6] !== controlLine_expected_prev[6] )
		&& ((controlLine_expected_prev[6] !== last_controlLine_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controlLine[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controlLine_expected_prev);
		$display ("     Real value = %b", controlLine_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_controlLine_exp[6] = controlLine_expected_prev[6];
	end
	if (
		( out_instruc_expected_prev[0] !== 1'bx ) && ( out_instruc_prev[0] !== out_instruc_expected_prev[0] )
		&& ((out_instruc_expected_prev[0] !== last_out_instruc_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[0] = out_instruc_expected_prev[0];
	end
	if (
		( out_instruc_expected_prev[1] !== 1'bx ) && ( out_instruc_prev[1] !== out_instruc_expected_prev[1] )
		&& ((out_instruc_expected_prev[1] !== last_out_instruc_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[1] = out_instruc_expected_prev[1];
	end
	if (
		( out_instruc_expected_prev[2] !== 1'bx ) && ( out_instruc_prev[2] !== out_instruc_expected_prev[2] )
		&& ((out_instruc_expected_prev[2] !== last_out_instruc_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[2] = out_instruc_expected_prev[2];
	end
	if (
		( out_instruc_expected_prev[3] !== 1'bx ) && ( out_instruc_prev[3] !== out_instruc_expected_prev[3] )
		&& ((out_instruc_expected_prev[3] !== last_out_instruc_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[3] = out_instruc_expected_prev[3];
	end
	if (
		( out_instruc_expected_prev[4] !== 1'bx ) && ( out_instruc_prev[4] !== out_instruc_expected_prev[4] )
		&& ((out_instruc_expected_prev[4] !== last_out_instruc_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[4] = out_instruc_expected_prev[4];
	end
	if (
		( out_instruc_expected_prev[5] !== 1'bx ) && ( out_instruc_prev[5] !== out_instruc_expected_prev[5] )
		&& ((out_instruc_expected_prev[5] !== last_out_instruc_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[5] = out_instruc_expected_prev[5];
	end
	if (
		( out_instruc_expected_prev[6] !== 1'bx ) && ( out_instruc_prev[6] !== out_instruc_expected_prev[6] )
		&& ((out_instruc_expected_prev[6] !== last_out_instruc_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[6] = out_instruc_expected_prev[6];
	end
	if (
		( out_instruc_expected_prev[7] !== 1'bx ) && ( out_instruc_prev[7] !== out_instruc_expected_prev[7] )
		&& ((out_instruc_expected_prev[7] !== last_out_instruc_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[7] = out_instruc_expected_prev[7];
	end
	if (
		( out_instruc_expected_prev[8] !== 1'bx ) && ( out_instruc_prev[8] !== out_instruc_expected_prev[8] )
		&& ((out_instruc_expected_prev[8] !== last_out_instruc_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[8] = out_instruc_expected_prev[8];
	end
	if (
		( out_instruc_expected_prev[9] !== 1'bx ) && ( out_instruc_prev[9] !== out_instruc_expected_prev[9] )
		&& ((out_instruc_expected_prev[9] !== last_out_instruc_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[9] = out_instruc_expected_prev[9];
	end
	if (
		( out_instruc_expected_prev[10] !== 1'bx ) && ( out_instruc_prev[10] !== out_instruc_expected_prev[10] )
		&& ((out_instruc_expected_prev[10] !== last_out_instruc_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[10] = out_instruc_expected_prev[10];
	end
	if (
		( out_instruc_expected_prev[11] !== 1'bx ) && ( out_instruc_prev[11] !== out_instruc_expected_prev[11] )
		&& ((out_instruc_expected_prev[11] !== last_out_instruc_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[11] = out_instruc_expected_prev[11];
	end
	if (
		( out_instruc_expected_prev[12] !== 1'bx ) && ( out_instruc_prev[12] !== out_instruc_expected_prev[12] )
		&& ((out_instruc_expected_prev[12] !== last_out_instruc_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[12] = out_instruc_expected_prev[12];
	end
	if (
		( out_instruc_expected_prev[13] !== 1'bx ) && ( out_instruc_prev[13] !== out_instruc_expected_prev[13] )
		&& ((out_instruc_expected_prev[13] !== last_out_instruc_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[13] = out_instruc_expected_prev[13];
	end
	if (
		( out_instruc_expected_prev[14] !== 1'bx ) && ( out_instruc_prev[14] !== out_instruc_expected_prev[14] )
		&& ((out_instruc_expected_prev[14] !== last_out_instruc_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[14] = out_instruc_expected_prev[14];
	end
	if (
		( out_instruc_expected_prev[15] !== 1'bx ) && ( out_instruc_prev[15] !== out_instruc_expected_prev[15] )
		&& ((out_instruc_expected_prev[15] !== last_out_instruc_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[15] = out_instruc_expected_prev[15];
	end
	if (
		( out_instruc_expected_prev[16] !== 1'bx ) && ( out_instruc_prev[16] !== out_instruc_expected_prev[16] )
		&& ((out_instruc_expected_prev[16] !== last_out_instruc_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[16] = out_instruc_expected_prev[16];
	end
	if (
		( out_instruc_expected_prev[17] !== 1'bx ) && ( out_instruc_prev[17] !== out_instruc_expected_prev[17] )
		&& ((out_instruc_expected_prev[17] !== last_out_instruc_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[17] = out_instruc_expected_prev[17];
	end
	if (
		( out_instruc_expected_prev[18] !== 1'bx ) && ( out_instruc_prev[18] !== out_instruc_expected_prev[18] )
		&& ((out_instruc_expected_prev[18] !== last_out_instruc_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[18] = out_instruc_expected_prev[18];
	end
	if (
		( out_instruc_expected_prev[19] !== 1'bx ) && ( out_instruc_prev[19] !== out_instruc_expected_prev[19] )
		&& ((out_instruc_expected_prev[19] !== last_out_instruc_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[19] = out_instruc_expected_prev[19];
	end
	if (
		( out_instruc_expected_prev[20] !== 1'bx ) && ( out_instruc_prev[20] !== out_instruc_expected_prev[20] )
		&& ((out_instruc_expected_prev[20] !== last_out_instruc_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[20] = out_instruc_expected_prev[20];
	end
	if (
		( out_instruc_expected_prev[21] !== 1'bx ) && ( out_instruc_prev[21] !== out_instruc_expected_prev[21] )
		&& ((out_instruc_expected_prev[21] !== last_out_instruc_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[21] = out_instruc_expected_prev[21];
	end
	if (
		( out_instruc_expected_prev[22] !== 1'bx ) && ( out_instruc_prev[22] !== out_instruc_expected_prev[22] )
		&& ((out_instruc_expected_prev[22] !== last_out_instruc_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[22] = out_instruc_expected_prev[22];
	end
	if (
		( out_instruc_expected_prev[23] !== 1'bx ) && ( out_instruc_prev[23] !== out_instruc_expected_prev[23] )
		&& ((out_instruc_expected_prev[23] !== last_out_instruc_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[23] = out_instruc_expected_prev[23];
	end
	if (
		( out_instruc_expected_prev[24] !== 1'bx ) && ( out_instruc_prev[24] !== out_instruc_expected_prev[24] )
		&& ((out_instruc_expected_prev[24] !== last_out_instruc_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[24] = out_instruc_expected_prev[24];
	end
	if (
		( out_instruc_expected_prev[25] !== 1'bx ) && ( out_instruc_prev[25] !== out_instruc_expected_prev[25] )
		&& ((out_instruc_expected_prev[25] !== last_out_instruc_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[25] = out_instruc_expected_prev[25];
	end
	if (
		( out_instruc_expected_prev[26] !== 1'bx ) && ( out_instruc_prev[26] !== out_instruc_expected_prev[26] )
		&& ((out_instruc_expected_prev[26] !== last_out_instruc_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[26] = out_instruc_expected_prev[26];
	end
	if (
		( out_instruc_expected_prev[27] !== 1'bx ) && ( out_instruc_prev[27] !== out_instruc_expected_prev[27] )
		&& ((out_instruc_expected_prev[27] !== last_out_instruc_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[27] = out_instruc_expected_prev[27];
	end
	if (
		( out_instruc_expected_prev[28] !== 1'bx ) && ( out_instruc_prev[28] !== out_instruc_expected_prev[28] )
		&& ((out_instruc_expected_prev[28] !== last_out_instruc_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[28] = out_instruc_expected_prev[28];
	end
	if (
		( out_instruc_expected_prev[29] !== 1'bx ) && ( out_instruc_prev[29] !== out_instruc_expected_prev[29] )
		&& ((out_instruc_expected_prev[29] !== last_out_instruc_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[29] = out_instruc_expected_prev[29];
	end
	if (
		( out_instruc_expected_prev[30] !== 1'bx ) && ( out_instruc_prev[30] !== out_instruc_expected_prev[30] )
		&& ((out_instruc_expected_prev[30] !== last_out_instruc_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[30] = out_instruc_expected_prev[30];
	end
	if (
		( out_instruc_expected_prev[31] !== 1'bx ) && ( out_instruc_prev[31] !== out_instruc_expected_prev[31] )
		&& ((out_instruc_expected_prev[31] !== last_out_instruc_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_instruc[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_instruc_expected_prev);
		$display ("     Real value = %b", out_instruc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_instruc_exp[31] = out_instruc_expected_prev[31];
	end
	if (
		( readData1_expected_prev[0] !== 1'bx ) && ( readData1_prev[0] !== readData1_expected_prev[0] )
		&& ((readData1_expected_prev[0] !== last_readData1_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[0] = readData1_expected_prev[0];
	end
	if (
		( readData1_expected_prev[1] !== 1'bx ) && ( readData1_prev[1] !== readData1_expected_prev[1] )
		&& ((readData1_expected_prev[1] !== last_readData1_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[1] = readData1_expected_prev[1];
	end
	if (
		( readData1_expected_prev[2] !== 1'bx ) && ( readData1_prev[2] !== readData1_expected_prev[2] )
		&& ((readData1_expected_prev[2] !== last_readData1_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[2] = readData1_expected_prev[2];
	end
	if (
		( readData1_expected_prev[3] !== 1'bx ) && ( readData1_prev[3] !== readData1_expected_prev[3] )
		&& ((readData1_expected_prev[3] !== last_readData1_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[3] = readData1_expected_prev[3];
	end
	if (
		( readData1_expected_prev[4] !== 1'bx ) && ( readData1_prev[4] !== readData1_expected_prev[4] )
		&& ((readData1_expected_prev[4] !== last_readData1_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[4] = readData1_expected_prev[4];
	end
	if (
		( readData1_expected_prev[5] !== 1'bx ) && ( readData1_prev[5] !== readData1_expected_prev[5] )
		&& ((readData1_expected_prev[5] !== last_readData1_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[5] = readData1_expected_prev[5];
	end
	if (
		( readData1_expected_prev[6] !== 1'bx ) && ( readData1_prev[6] !== readData1_expected_prev[6] )
		&& ((readData1_expected_prev[6] !== last_readData1_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[6] = readData1_expected_prev[6];
	end
	if (
		( readData1_expected_prev[7] !== 1'bx ) && ( readData1_prev[7] !== readData1_expected_prev[7] )
		&& ((readData1_expected_prev[7] !== last_readData1_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[7] = readData1_expected_prev[7];
	end
	if (
		( readData1_expected_prev[8] !== 1'bx ) && ( readData1_prev[8] !== readData1_expected_prev[8] )
		&& ((readData1_expected_prev[8] !== last_readData1_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[8] = readData1_expected_prev[8];
	end
	if (
		( readData1_expected_prev[9] !== 1'bx ) && ( readData1_prev[9] !== readData1_expected_prev[9] )
		&& ((readData1_expected_prev[9] !== last_readData1_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[9] = readData1_expected_prev[9];
	end
	if (
		( readData1_expected_prev[10] !== 1'bx ) && ( readData1_prev[10] !== readData1_expected_prev[10] )
		&& ((readData1_expected_prev[10] !== last_readData1_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[10] = readData1_expected_prev[10];
	end
	if (
		( readData1_expected_prev[11] !== 1'bx ) && ( readData1_prev[11] !== readData1_expected_prev[11] )
		&& ((readData1_expected_prev[11] !== last_readData1_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[11] = readData1_expected_prev[11];
	end
	if (
		( readData1_expected_prev[12] !== 1'bx ) && ( readData1_prev[12] !== readData1_expected_prev[12] )
		&& ((readData1_expected_prev[12] !== last_readData1_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[12] = readData1_expected_prev[12];
	end
	if (
		( readData1_expected_prev[13] !== 1'bx ) && ( readData1_prev[13] !== readData1_expected_prev[13] )
		&& ((readData1_expected_prev[13] !== last_readData1_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[13] = readData1_expected_prev[13];
	end
	if (
		( readData1_expected_prev[14] !== 1'bx ) && ( readData1_prev[14] !== readData1_expected_prev[14] )
		&& ((readData1_expected_prev[14] !== last_readData1_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[14] = readData1_expected_prev[14];
	end
	if (
		( readData1_expected_prev[15] !== 1'bx ) && ( readData1_prev[15] !== readData1_expected_prev[15] )
		&& ((readData1_expected_prev[15] !== last_readData1_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[15] = readData1_expected_prev[15];
	end
	if (
		( readData1_expected_prev[16] !== 1'bx ) && ( readData1_prev[16] !== readData1_expected_prev[16] )
		&& ((readData1_expected_prev[16] !== last_readData1_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[16] = readData1_expected_prev[16];
	end
	if (
		( readData1_expected_prev[17] !== 1'bx ) && ( readData1_prev[17] !== readData1_expected_prev[17] )
		&& ((readData1_expected_prev[17] !== last_readData1_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[17] = readData1_expected_prev[17];
	end
	if (
		( readData1_expected_prev[18] !== 1'bx ) && ( readData1_prev[18] !== readData1_expected_prev[18] )
		&& ((readData1_expected_prev[18] !== last_readData1_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[18] = readData1_expected_prev[18];
	end
	if (
		( readData1_expected_prev[19] !== 1'bx ) && ( readData1_prev[19] !== readData1_expected_prev[19] )
		&& ((readData1_expected_prev[19] !== last_readData1_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[19] = readData1_expected_prev[19];
	end
	if (
		( readData1_expected_prev[20] !== 1'bx ) && ( readData1_prev[20] !== readData1_expected_prev[20] )
		&& ((readData1_expected_prev[20] !== last_readData1_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[20] = readData1_expected_prev[20];
	end
	if (
		( readData1_expected_prev[21] !== 1'bx ) && ( readData1_prev[21] !== readData1_expected_prev[21] )
		&& ((readData1_expected_prev[21] !== last_readData1_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[21] = readData1_expected_prev[21];
	end
	if (
		( readData1_expected_prev[22] !== 1'bx ) && ( readData1_prev[22] !== readData1_expected_prev[22] )
		&& ((readData1_expected_prev[22] !== last_readData1_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[22] = readData1_expected_prev[22];
	end
	if (
		( readData1_expected_prev[23] !== 1'bx ) && ( readData1_prev[23] !== readData1_expected_prev[23] )
		&& ((readData1_expected_prev[23] !== last_readData1_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[23] = readData1_expected_prev[23];
	end
	if (
		( readData1_expected_prev[24] !== 1'bx ) && ( readData1_prev[24] !== readData1_expected_prev[24] )
		&& ((readData1_expected_prev[24] !== last_readData1_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[24] = readData1_expected_prev[24];
	end
	if (
		( readData1_expected_prev[25] !== 1'bx ) && ( readData1_prev[25] !== readData1_expected_prev[25] )
		&& ((readData1_expected_prev[25] !== last_readData1_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[25] = readData1_expected_prev[25];
	end
	if (
		( readData1_expected_prev[26] !== 1'bx ) && ( readData1_prev[26] !== readData1_expected_prev[26] )
		&& ((readData1_expected_prev[26] !== last_readData1_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[26] = readData1_expected_prev[26];
	end
	if (
		( readData1_expected_prev[27] !== 1'bx ) && ( readData1_prev[27] !== readData1_expected_prev[27] )
		&& ((readData1_expected_prev[27] !== last_readData1_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[27] = readData1_expected_prev[27];
	end
	if (
		( readData1_expected_prev[28] !== 1'bx ) && ( readData1_prev[28] !== readData1_expected_prev[28] )
		&& ((readData1_expected_prev[28] !== last_readData1_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[28] = readData1_expected_prev[28];
	end
	if (
		( readData1_expected_prev[29] !== 1'bx ) && ( readData1_prev[29] !== readData1_expected_prev[29] )
		&& ((readData1_expected_prev[29] !== last_readData1_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[29] = readData1_expected_prev[29];
	end
	if (
		( readData1_expected_prev[30] !== 1'bx ) && ( readData1_prev[30] !== readData1_expected_prev[30] )
		&& ((readData1_expected_prev[30] !== last_readData1_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[30] = readData1_expected_prev[30];
	end
	if (
		( readData1_expected_prev[31] !== 1'bx ) && ( readData1_prev[31] !== readData1_expected_prev[31] )
		&& ((readData1_expected_prev[31] !== last_readData1_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_readData1_exp[31] = readData1_expected_prev[31];
	end
	if (
		( readData2_expected_prev[0] !== 1'bx ) && ( readData2_prev[0] !== readData2_expected_prev[0] )
		&& ((readData2_expected_prev[0] !== last_readData2_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[0] = readData2_expected_prev[0];
	end
	if (
		( readData2_expected_prev[1] !== 1'bx ) && ( readData2_prev[1] !== readData2_expected_prev[1] )
		&& ((readData2_expected_prev[1] !== last_readData2_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[1] = readData2_expected_prev[1];
	end
	if (
		( readData2_expected_prev[2] !== 1'bx ) && ( readData2_prev[2] !== readData2_expected_prev[2] )
		&& ((readData2_expected_prev[2] !== last_readData2_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[2] = readData2_expected_prev[2];
	end
	if (
		( readData2_expected_prev[3] !== 1'bx ) && ( readData2_prev[3] !== readData2_expected_prev[3] )
		&& ((readData2_expected_prev[3] !== last_readData2_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[3] = readData2_expected_prev[3];
	end
	if (
		( readData2_expected_prev[4] !== 1'bx ) && ( readData2_prev[4] !== readData2_expected_prev[4] )
		&& ((readData2_expected_prev[4] !== last_readData2_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[4] = readData2_expected_prev[4];
	end
	if (
		( readData2_expected_prev[5] !== 1'bx ) && ( readData2_prev[5] !== readData2_expected_prev[5] )
		&& ((readData2_expected_prev[5] !== last_readData2_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[5] = readData2_expected_prev[5];
	end
	if (
		( readData2_expected_prev[6] !== 1'bx ) && ( readData2_prev[6] !== readData2_expected_prev[6] )
		&& ((readData2_expected_prev[6] !== last_readData2_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[6] = readData2_expected_prev[6];
	end
	if (
		( readData2_expected_prev[7] !== 1'bx ) && ( readData2_prev[7] !== readData2_expected_prev[7] )
		&& ((readData2_expected_prev[7] !== last_readData2_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[7] = readData2_expected_prev[7];
	end
	if (
		( readData2_expected_prev[8] !== 1'bx ) && ( readData2_prev[8] !== readData2_expected_prev[8] )
		&& ((readData2_expected_prev[8] !== last_readData2_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[8] = readData2_expected_prev[8];
	end
	if (
		( readData2_expected_prev[9] !== 1'bx ) && ( readData2_prev[9] !== readData2_expected_prev[9] )
		&& ((readData2_expected_prev[9] !== last_readData2_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[9] = readData2_expected_prev[9];
	end
	if (
		( readData2_expected_prev[10] !== 1'bx ) && ( readData2_prev[10] !== readData2_expected_prev[10] )
		&& ((readData2_expected_prev[10] !== last_readData2_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[10] = readData2_expected_prev[10];
	end
	if (
		( readData2_expected_prev[11] !== 1'bx ) && ( readData2_prev[11] !== readData2_expected_prev[11] )
		&& ((readData2_expected_prev[11] !== last_readData2_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[11] = readData2_expected_prev[11];
	end
	if (
		( readData2_expected_prev[12] !== 1'bx ) && ( readData2_prev[12] !== readData2_expected_prev[12] )
		&& ((readData2_expected_prev[12] !== last_readData2_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[12] = readData2_expected_prev[12];
	end
	if (
		( readData2_expected_prev[13] !== 1'bx ) && ( readData2_prev[13] !== readData2_expected_prev[13] )
		&& ((readData2_expected_prev[13] !== last_readData2_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[13] = readData2_expected_prev[13];
	end
	if (
		( readData2_expected_prev[14] !== 1'bx ) && ( readData2_prev[14] !== readData2_expected_prev[14] )
		&& ((readData2_expected_prev[14] !== last_readData2_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[14] = readData2_expected_prev[14];
	end
	if (
		( readData2_expected_prev[15] !== 1'bx ) && ( readData2_prev[15] !== readData2_expected_prev[15] )
		&& ((readData2_expected_prev[15] !== last_readData2_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[15] = readData2_expected_prev[15];
	end
	if (
		( readData2_expected_prev[16] !== 1'bx ) && ( readData2_prev[16] !== readData2_expected_prev[16] )
		&& ((readData2_expected_prev[16] !== last_readData2_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[16] = readData2_expected_prev[16];
	end
	if (
		( readData2_expected_prev[17] !== 1'bx ) && ( readData2_prev[17] !== readData2_expected_prev[17] )
		&& ((readData2_expected_prev[17] !== last_readData2_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[17] = readData2_expected_prev[17];
	end
	if (
		( readData2_expected_prev[18] !== 1'bx ) && ( readData2_prev[18] !== readData2_expected_prev[18] )
		&& ((readData2_expected_prev[18] !== last_readData2_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[18] = readData2_expected_prev[18];
	end
	if (
		( readData2_expected_prev[19] !== 1'bx ) && ( readData2_prev[19] !== readData2_expected_prev[19] )
		&& ((readData2_expected_prev[19] !== last_readData2_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[19] = readData2_expected_prev[19];
	end
	if (
		( readData2_expected_prev[20] !== 1'bx ) && ( readData2_prev[20] !== readData2_expected_prev[20] )
		&& ((readData2_expected_prev[20] !== last_readData2_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[20] = readData2_expected_prev[20];
	end
	if (
		( readData2_expected_prev[21] !== 1'bx ) && ( readData2_prev[21] !== readData2_expected_prev[21] )
		&& ((readData2_expected_prev[21] !== last_readData2_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[21] = readData2_expected_prev[21];
	end
	if (
		( readData2_expected_prev[22] !== 1'bx ) && ( readData2_prev[22] !== readData2_expected_prev[22] )
		&& ((readData2_expected_prev[22] !== last_readData2_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[22] = readData2_expected_prev[22];
	end
	if (
		( readData2_expected_prev[23] !== 1'bx ) && ( readData2_prev[23] !== readData2_expected_prev[23] )
		&& ((readData2_expected_prev[23] !== last_readData2_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[23] = readData2_expected_prev[23];
	end
	if (
		( readData2_expected_prev[24] !== 1'bx ) && ( readData2_prev[24] !== readData2_expected_prev[24] )
		&& ((readData2_expected_prev[24] !== last_readData2_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[24] = readData2_expected_prev[24];
	end
	if (
		( readData2_expected_prev[25] !== 1'bx ) && ( readData2_prev[25] !== readData2_expected_prev[25] )
		&& ((readData2_expected_prev[25] !== last_readData2_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[25] = readData2_expected_prev[25];
	end
	if (
		( readData2_expected_prev[26] !== 1'bx ) && ( readData2_prev[26] !== readData2_expected_prev[26] )
		&& ((readData2_expected_prev[26] !== last_readData2_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[26] = readData2_expected_prev[26];
	end
	if (
		( readData2_expected_prev[27] !== 1'bx ) && ( readData2_prev[27] !== readData2_expected_prev[27] )
		&& ((readData2_expected_prev[27] !== last_readData2_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[27] = readData2_expected_prev[27];
	end
	if (
		( readData2_expected_prev[28] !== 1'bx ) && ( readData2_prev[28] !== readData2_expected_prev[28] )
		&& ((readData2_expected_prev[28] !== last_readData2_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[28] = readData2_expected_prev[28];
	end
	if (
		( readData2_expected_prev[29] !== 1'bx ) && ( readData2_prev[29] !== readData2_expected_prev[29] )
		&& ((readData2_expected_prev[29] !== last_readData2_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[29] = readData2_expected_prev[29];
	end
	if (
		( readData2_expected_prev[30] !== 1'bx ) && ( readData2_prev[30] !== readData2_expected_prev[30] )
		&& ((readData2_expected_prev[30] !== last_readData2_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[30] = readData2_expected_prev[30];
	end
	if (
		( readData2_expected_prev[31] !== 1'bx ) && ( readData2_prev[31] !== readData2_expected_prev[31] )
		&& ((readData2_expected_prev[31] !== last_readData2_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_readData2_exp[31] = readData2_expected_prev[31];
	end
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end
	if (
		( result_expected_prev[4] !== 1'bx ) && ( result_prev[4] !== result_expected_prev[4] )
		&& ((result_expected_prev[4] !== last_result_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[4] = result_expected_prev[4];
	end
	if (
		( result_expected_prev[5] !== 1'bx ) && ( result_prev[5] !== result_expected_prev[5] )
		&& ((result_expected_prev[5] !== last_result_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[5] = result_expected_prev[5];
	end
	if (
		( result_expected_prev[6] !== 1'bx ) && ( result_prev[6] !== result_expected_prev[6] )
		&& ((result_expected_prev[6] !== last_result_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[6] = result_expected_prev[6];
	end
	if (
		( result_expected_prev[7] !== 1'bx ) && ( result_prev[7] !== result_expected_prev[7] )
		&& ((result_expected_prev[7] !== last_result_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[7] = result_expected_prev[7];
	end
	if (
		( result_expected_prev[8] !== 1'bx ) && ( result_prev[8] !== result_expected_prev[8] )
		&& ((result_expected_prev[8] !== last_result_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[8] = result_expected_prev[8];
	end
	if (
		( result_expected_prev[9] !== 1'bx ) && ( result_prev[9] !== result_expected_prev[9] )
		&& ((result_expected_prev[9] !== last_result_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[9] = result_expected_prev[9];
	end
	if (
		( result_expected_prev[10] !== 1'bx ) && ( result_prev[10] !== result_expected_prev[10] )
		&& ((result_expected_prev[10] !== last_result_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[10] = result_expected_prev[10];
	end
	if (
		( result_expected_prev[11] !== 1'bx ) && ( result_prev[11] !== result_expected_prev[11] )
		&& ((result_expected_prev[11] !== last_result_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[11] = result_expected_prev[11];
	end
	if (
		( result_expected_prev[12] !== 1'bx ) && ( result_prev[12] !== result_expected_prev[12] )
		&& ((result_expected_prev[12] !== last_result_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[12] = result_expected_prev[12];
	end
	if (
		( result_expected_prev[13] !== 1'bx ) && ( result_prev[13] !== result_expected_prev[13] )
		&& ((result_expected_prev[13] !== last_result_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[13] = result_expected_prev[13];
	end
	if (
		( result_expected_prev[14] !== 1'bx ) && ( result_prev[14] !== result_expected_prev[14] )
		&& ((result_expected_prev[14] !== last_result_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[14] = result_expected_prev[14];
	end
	if (
		( result_expected_prev[15] !== 1'bx ) && ( result_prev[15] !== result_expected_prev[15] )
		&& ((result_expected_prev[15] !== last_result_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[15] = result_expected_prev[15];
	end
	if (
		( result_expected_prev[16] !== 1'bx ) && ( result_prev[16] !== result_expected_prev[16] )
		&& ((result_expected_prev[16] !== last_result_exp[16]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[16] = result_expected_prev[16];
	end
	if (
		( result_expected_prev[17] !== 1'bx ) && ( result_prev[17] !== result_expected_prev[17] )
		&& ((result_expected_prev[17] !== last_result_exp[17]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[17] = result_expected_prev[17];
	end
	if (
		( result_expected_prev[18] !== 1'bx ) && ( result_prev[18] !== result_expected_prev[18] )
		&& ((result_expected_prev[18] !== last_result_exp[18]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[18] = result_expected_prev[18];
	end
	if (
		( result_expected_prev[19] !== 1'bx ) && ( result_prev[19] !== result_expected_prev[19] )
		&& ((result_expected_prev[19] !== last_result_exp[19]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[19] = result_expected_prev[19];
	end
	if (
		( result_expected_prev[20] !== 1'bx ) && ( result_prev[20] !== result_expected_prev[20] )
		&& ((result_expected_prev[20] !== last_result_exp[20]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[20] = result_expected_prev[20];
	end
	if (
		( result_expected_prev[21] !== 1'bx ) && ( result_prev[21] !== result_expected_prev[21] )
		&& ((result_expected_prev[21] !== last_result_exp[21]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[21] = result_expected_prev[21];
	end
	if (
		( result_expected_prev[22] !== 1'bx ) && ( result_prev[22] !== result_expected_prev[22] )
		&& ((result_expected_prev[22] !== last_result_exp[22]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[22] = result_expected_prev[22];
	end
	if (
		( result_expected_prev[23] !== 1'bx ) && ( result_prev[23] !== result_expected_prev[23] )
		&& ((result_expected_prev[23] !== last_result_exp[23]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[23] = result_expected_prev[23];
	end
	if (
		( result_expected_prev[24] !== 1'bx ) && ( result_prev[24] !== result_expected_prev[24] )
		&& ((result_expected_prev[24] !== last_result_exp[24]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[24] = result_expected_prev[24];
	end
	if (
		( result_expected_prev[25] !== 1'bx ) && ( result_prev[25] !== result_expected_prev[25] )
		&& ((result_expected_prev[25] !== last_result_exp[25]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[25] = result_expected_prev[25];
	end
	if (
		( result_expected_prev[26] !== 1'bx ) && ( result_prev[26] !== result_expected_prev[26] )
		&& ((result_expected_prev[26] !== last_result_exp[26]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[26] = result_expected_prev[26];
	end
	if (
		( result_expected_prev[27] !== 1'bx ) && ( result_prev[27] !== result_expected_prev[27] )
		&& ((result_expected_prev[27] !== last_result_exp[27]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[27] = result_expected_prev[27];
	end
	if (
		( result_expected_prev[28] !== 1'bx ) && ( result_prev[28] !== result_expected_prev[28] )
		&& ((result_expected_prev[28] !== last_result_exp[28]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[28] = result_expected_prev[28];
	end
	if (
		( result_expected_prev[29] !== 1'bx ) && ( result_prev[29] !== result_expected_prev[29] )
		&& ((result_expected_prev[29] !== last_result_exp[29]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[29] = result_expected_prev[29];
	end
	if (
		( result_expected_prev[30] !== 1'bx ) && ( result_prev[30] !== result_expected_prev[30] )
		&& ((result_expected_prev[30] !== last_result_exp[30]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[30] = result_expected_prev[30];
	end
	if (
		( result_expected_prev[31] !== 1'bx ) && ( result_prev[31] !== result_expected_prev[31] )
		&& ((result_expected_prev[31] !== last_result_exp[31]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_result_exp[31] = result_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Single_Cycle_CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Arena_button;
reg Arena_clk;
reg [7:0] Arena_octalBits;
reg [1:0] Arena_octalOpcode;
reg DRAM_CKE;
reg DRAM_CLK;
reg INPUT_WE;
reg [31:0] instr;
// wires                                               
wire [2:0] aluOP;
wire [6:0] controlLine;
wire DRAM_CE_N;
wire DRAM_LDQM;
wire DRAM_OE_N;
wire DRAM_UDQM;
wire DRAM_WE_N;
wire [3:0] operation;
wire [31:0] out_instruc;
wire [31:0] readData1;
wire [31:0] readData2;
wire [31:0] result;
wire SRAM_CE_N;
wire SRAM_LB_N;
wire SRAM_OE_N;
wire SRAM_UB_N;
wire SRAM_WE_N;

wire sampler;                             

// assign statements (if any)                          
Single_Cycle_CPU i1 (
// port map - connection between master ports and signals/registers   
	.aluOP(aluOP),
	.Arena_button(Arena_button),
	.Arena_clk(Arena_clk),
	.Arena_octalBits(Arena_octalBits),
	.Arena_octalOpcode(Arena_octalOpcode),
	.controlLine(controlLine),
	.DRAM_CE_N(DRAM_CE_N),
	.DRAM_CKE(DRAM_CKE),
	.DRAM_CLK(DRAM_CLK),
	.DRAM_LDQM(DRAM_LDQM),
	.DRAM_OE_N(DRAM_OE_N),
	.DRAM_UDQM(DRAM_UDQM),
	.DRAM_WE_N(DRAM_WE_N),
	.INPUT_WE(INPUT_WE),
	.instr(instr),
	.operation(operation),
	.out_instruc(out_instruc),
	.readData1(readData1),
	.readData2(readData2),
	.result(result),
	.SRAM_CE_N(SRAM_CE_N),
	.SRAM_LB_N(SRAM_LB_N),
	.SRAM_OE_N(SRAM_OE_N),
	.SRAM_UB_N(SRAM_UB_N),
	.SRAM_WE_N(SRAM_WE_N)
);

// Arena_clk
initial
begin
	Arena_clk = 1'b0;
	Arena_clk = #10000 1'b1;
	Arena_clk = #190000 1'b0;
	Arena_clk = #10000 1'b1;
	Arena_clk = #170000 1'b0;
	Arena_clk = #10000 1'b1;
	Arena_clk = #140000 1'b0;
	Arena_clk = #10000 1'b1;
	Arena_clk = #150000 1'b0;
	Arena_clk = #10000 1'b1;
	Arena_clk = #80000 1'b0;
	Arena_clk = #20000 1'b1;
	Arena_clk = #199000 1'b0;
end 

// INPUT_WE
initial
begin
	INPUT_WE = 1'b1;
end 
// instr[ 31 ]
initial
begin
	instr[31] = 1'b0;
end 
// instr[ 30 ]
initial
begin
	instr[30] = 1'b0;
end 
// instr[ 29 ]
initial
begin
	instr[29] = 1'b1;
	instr[29] = #530000 1'b0;
end 
// instr[ 28 ]
initial
begin
	instr[28] = 1'b1;
	instr[28] = #530000 1'b0;
end 
// instr[ 27 ]
initial
begin
	instr[27] = 1'b0;
end 
// instr[ 26 ]
initial
begin
	instr[26] = 1'b1;
	instr[26] = #530000 1'b0;
end 
// instr[ 25 ]
initial
begin
	instr[25] = 1'b0;
end 
// instr[ 24 ]
initial
begin
	instr[24] = 1'b0;
end 
// instr[ 23 ]
initial
begin
	instr[23] = 1'b0;
end 
// instr[ 22 ]
initial
begin
	instr[22] = 1'b0;
end 
// instr[ 21 ]
initial
begin
	instr[21] = 1'b0;
	instr[21] = #530000 1'b1;
	instr[21] = #160000 1'b0;
	instr[21] = #10000 1'b1;
	instr[21] = #180000 1'b0;
end 
// instr[ 20 ]
initial
begin
	instr[20] = 1'b0;
end 
// instr[ 19 ]
initial
begin
	instr[19] = 1'b0;
end 
// instr[ 18 ]
initial
begin
	instr[18] = 1'b0;
end 
// instr[ 17 ]
initial
begin
	instr[17] = 1'b0;
	instr[17] = #200000 1'b1;
	instr[17] = #490000 1'b0;
	instr[17] = #10000 1'b1;
	instr[17] = #180000 1'b0;
end 
// instr[ 16 ]
initial
begin
	instr[16] = 1'b1;
	instr[16] = #200000 1'b0;
	instr[16] = #180000 1'b1;
	instr[16] = #310000 1'b0;
	instr[16] = #10000 1'b1;
	instr[16] = #180000 1'b0;
end 
// instr[ 15 ]
initial
begin
	instr[15] = 1'b0;
end 
// instr[ 14 ]
initial
begin
	instr[14] = 1'b0;
end 
// instr[ 13 ]
initial
begin
	instr[13] = 1'b0;
end 
// instr[ 12 ]
initial
begin
	instr[12] = 1'b0;
end 
// instr[ 11 ]
initial
begin
	instr[11] = 1'b0;
	instr[11] = #530000 1'b1;
	instr[11] = #160000 1'b0;
	instr[11] = #10000 1'b1;
	instr[11] = #180000 1'b0;
end 
// instr[ 10 ]
initial
begin
	instr[10] = 1'b0;
end 
// instr[ 9 ]
initial
begin
	instr[9] = 1'b0;
end 
// instr[ 8 ]
initial
begin
	instr[8] = 1'b0;
end 
// instr[ 7 ]
initial
begin
	instr[7] = 1'b0;
end 
// instr[ 6 ]
initial
begin
	instr[6] = 1'b0;
end 
// instr[ 5 ]
initial
begin
	instr[5] = 1'b0;
	instr[5] = #530000 1'b1;
	instr[5] = #160000 1'b0;
	instr[5] = #10000 1'b1;
	instr[5] = #180000 1'b0;
end 
// instr[ 4 ]
initial
begin
	instr[4] = 1'b0;
end 
// instr[ 3 ]
initial
begin
	instr[3] = 1'b0;
	instr[3] = #200000 1'b1;
	instr[3] = #180000 1'b0;
end 
// instr[ 2 ]
initial
begin
	instr[2] = 1'b0;
end 
// instr[ 1 ]
initial
begin
	instr[1] = 1'b0;
	instr[1] = #200000 1'b1;
	instr[1] = #330000 1'b0;
end 
// instr[ 0 ]
initial
begin
	instr[0] = 1'b0;
end 

Single_Cycle_CPU_vlg_sample_tst tb_sample (
	.Arena_button(Arena_button),
	.Arena_clk(Arena_clk),
	.Arena_octalBits(Arena_octalBits),
	.Arena_octalOpcode(Arena_octalOpcode),
	.DRAM_CKE(DRAM_CKE),
	.DRAM_CLK(DRAM_CLK),
	.INPUT_WE(INPUT_WE),
	.instr(instr),
	.sampler_tx(sampler)
);

Single_Cycle_CPU_vlg_check_tst tb_out(
	.aluOP(aluOP),
	.controlLine(controlLine),
	.DRAM_CE_N(DRAM_CE_N),
	.DRAM_LDQM(DRAM_LDQM),
	.DRAM_OE_N(DRAM_OE_N),
	.DRAM_UDQM(DRAM_UDQM),
	.DRAM_WE_N(DRAM_WE_N),
	.operation(operation),
	.out_instruc(out_instruc),
	.readData1(readData1),
	.readData2(readData2),
	.result(result),
	.SRAM_CE_N(SRAM_CE_N),
	.SRAM_LB_N(SRAM_LB_N),
	.SRAM_OE_N(SRAM_OE_N),
	.SRAM_UB_N(SRAM_UB_N),
	.SRAM_WE_N(SRAM_WE_N),
	.sampler_rx(sampler)
);
endmodule

