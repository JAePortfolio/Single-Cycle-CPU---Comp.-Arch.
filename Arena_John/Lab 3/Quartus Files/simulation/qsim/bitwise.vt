// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/05/2019 21:10:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Arena_bitwise
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Arena_bitwise_vlg_sample_tst(
	Arena_a_bitwiseIN,
	Arena_b_bitwiseIN,
	Arena_buttonStart,
	Arena_opcode,
	sampler_tx
);
input [5:0] Arena_a_bitwiseIN;
input [5:0] Arena_b_bitwiseIN;
input  Arena_buttonStart;
input [3:0] Arena_opcode;
output sampler_tx;

reg sample;
time current_time;
always @(Arena_a_bitwiseIN or Arena_b_bitwiseIN or Arena_buttonStart or Arena_opcode)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Arena_bitwise_vlg_check_tst (
	Arena_result_bitwiseOUT,
	sampler_rx
);
input [5:0] Arena_result_bitwiseOUT;
input sampler_rx;

reg [5:0] Arena_result_bitwiseOUT_expected;

reg [5:0] Arena_result_bitwiseOUT_prev;

reg [5:0] Arena_result_bitwiseOUT_expected_prev;

reg [5:0] last_Arena_result_bitwiseOUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	Arena_result_bitwiseOUT_prev = Arena_result_bitwiseOUT;
end

// update expected /o prevs

always @(trigger)
begin
	Arena_result_bitwiseOUT_expected_prev = Arena_result_bitwiseOUT_expected;
end


// expected Arena_result_bitwiseOUT[ 5 ]
initial
begin
	Arena_result_bitwiseOUT_expected[5] = 1'bX;
end 
// expected Arena_result_bitwiseOUT[ 4 ]
initial
begin
	Arena_result_bitwiseOUT_expected[4] = 1'bX;
end 
// expected Arena_result_bitwiseOUT[ 3 ]
initial
begin
	Arena_result_bitwiseOUT_expected[3] = 1'bX;
end 
// expected Arena_result_bitwiseOUT[ 2 ]
initial
begin
	Arena_result_bitwiseOUT_expected[2] = 1'bX;
end 
// expected Arena_result_bitwiseOUT[ 1 ]
initial
begin
	Arena_result_bitwiseOUT_expected[1] = 1'bX;
end 
// expected Arena_result_bitwiseOUT[ 0 ]
initial
begin
	Arena_result_bitwiseOUT_expected[0] = 1'bX;
end 
// generate trigger
always @(Arena_result_bitwiseOUT_expected or Arena_result_bitwiseOUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Arena_result_bitwiseOUT = %b | ",Arena_result_bitwiseOUT_expected_prev);
	$display("| real Arena_result_bitwiseOUT = %b | ",Arena_result_bitwiseOUT_prev);
`endif
	if (
		( Arena_result_bitwiseOUT_expected_prev[0] !== 1'bx ) && ( Arena_result_bitwiseOUT_prev[0] !== Arena_result_bitwiseOUT_expected_prev[0] )
		&& ((Arena_result_bitwiseOUT_expected_prev[0] !== last_Arena_result_bitwiseOUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_result_bitwiseOUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_result_bitwiseOUT_expected_prev);
		$display ("     Real value = %b", Arena_result_bitwiseOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_result_bitwiseOUT_exp[0] = Arena_result_bitwiseOUT_expected_prev[0];
	end
	if (
		( Arena_result_bitwiseOUT_expected_prev[1] !== 1'bx ) && ( Arena_result_bitwiseOUT_prev[1] !== Arena_result_bitwiseOUT_expected_prev[1] )
		&& ((Arena_result_bitwiseOUT_expected_prev[1] !== last_Arena_result_bitwiseOUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_result_bitwiseOUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_result_bitwiseOUT_expected_prev);
		$display ("     Real value = %b", Arena_result_bitwiseOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_result_bitwiseOUT_exp[1] = Arena_result_bitwiseOUT_expected_prev[1];
	end
	if (
		( Arena_result_bitwiseOUT_expected_prev[2] !== 1'bx ) && ( Arena_result_bitwiseOUT_prev[2] !== Arena_result_bitwiseOUT_expected_prev[2] )
		&& ((Arena_result_bitwiseOUT_expected_prev[2] !== last_Arena_result_bitwiseOUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_result_bitwiseOUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_result_bitwiseOUT_expected_prev);
		$display ("     Real value = %b", Arena_result_bitwiseOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_result_bitwiseOUT_exp[2] = Arena_result_bitwiseOUT_expected_prev[2];
	end
	if (
		( Arena_result_bitwiseOUT_expected_prev[3] !== 1'bx ) && ( Arena_result_bitwiseOUT_prev[3] !== Arena_result_bitwiseOUT_expected_prev[3] )
		&& ((Arena_result_bitwiseOUT_expected_prev[3] !== last_Arena_result_bitwiseOUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_result_bitwiseOUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_result_bitwiseOUT_expected_prev);
		$display ("     Real value = %b", Arena_result_bitwiseOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_result_bitwiseOUT_exp[3] = Arena_result_bitwiseOUT_expected_prev[3];
	end
	if (
		( Arena_result_bitwiseOUT_expected_prev[4] !== 1'bx ) && ( Arena_result_bitwiseOUT_prev[4] !== Arena_result_bitwiseOUT_expected_prev[4] )
		&& ((Arena_result_bitwiseOUT_expected_prev[4] !== last_Arena_result_bitwiseOUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_result_bitwiseOUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_result_bitwiseOUT_expected_prev);
		$display ("     Real value = %b", Arena_result_bitwiseOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_result_bitwiseOUT_exp[4] = Arena_result_bitwiseOUT_expected_prev[4];
	end
	if (
		( Arena_result_bitwiseOUT_expected_prev[5] !== 1'bx ) && ( Arena_result_bitwiseOUT_prev[5] !== Arena_result_bitwiseOUT_expected_prev[5] )
		&& ((Arena_result_bitwiseOUT_expected_prev[5] !== last_Arena_result_bitwiseOUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Arena_result_bitwiseOUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Arena_result_bitwiseOUT_expected_prev);
		$display ("     Real value = %b", Arena_result_bitwiseOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Arena_result_bitwiseOUT_exp[5] = Arena_result_bitwiseOUT_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Arena_bitwise_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] Arena_a_bitwiseIN;
reg [5:0] Arena_b_bitwiseIN;
reg Arena_buttonStart;
reg [3:0] Arena_opcode;
// wires                                               
wire [5:0] Arena_result_bitwiseOUT;

wire sampler;                             

// assign statements (if any)                          
Arena_bitwise i1 (
// port map - connection between master ports and signals/registers   
	.Arena_a_bitwiseIN(Arena_a_bitwiseIN),
	.Arena_b_bitwiseIN(Arena_b_bitwiseIN),
	.Arena_buttonStart(Arena_buttonStart),
	.Arena_opcode(Arena_opcode),
	.Arena_result_bitwiseOUT(Arena_result_bitwiseOUT)
);
// Arena_a_bitwiseIN[ 5 ]
initial
begin
	Arena_a_bitwiseIN[5] = 1'b1;
end 
// Arena_a_bitwiseIN[ 4 ]
initial
begin
	Arena_a_bitwiseIN[4] = 1'b0;
end 
// Arena_a_bitwiseIN[ 3 ]
initial
begin
	Arena_a_bitwiseIN[3] = 1'b1;
end 
// Arena_a_bitwiseIN[ 2 ]
initial
begin
	Arena_a_bitwiseIN[2] = 1'b1;
end 
// Arena_a_bitwiseIN[ 1 ]
initial
begin
	Arena_a_bitwiseIN[1] = 1'b0;
end 
// Arena_a_bitwiseIN[ 0 ]
initial
begin
	Arena_a_bitwiseIN[0] = 1'b0;
end 
// Arena_b_bitwiseIN[ 5 ]
initial
begin
	Arena_b_bitwiseIN[5] = 1'b0;
end 
// Arena_b_bitwiseIN[ 4 ]
initial
begin
	Arena_b_bitwiseIN[4] = 1'b0;
end 
// Arena_b_bitwiseIN[ 3 ]
initial
begin
	Arena_b_bitwiseIN[3] = 1'b0;
end 
// Arena_b_bitwiseIN[ 2 ]
initial
begin
	Arena_b_bitwiseIN[2] = 1'b0;
end 
// Arena_b_bitwiseIN[ 1 ]
initial
begin
	Arena_b_bitwiseIN[1] = 1'b1;
end 
// Arena_b_bitwiseIN[ 0 ]
initial
begin
	Arena_b_bitwiseIN[0] = 1'b0;
end 
// Arena_opcode[ 3 ]
initial
begin
	Arena_opcode[3] = 1'b0;
	Arena_opcode[3] = #160000 1'b1;
	Arena_opcode[3] = #160000 1'b0;
	Arena_opcode[3] = #80000 1'b1;
	Arena_opcode[3] = #400000 1'b0;
	Arena_opcode[3] = #80000 1'b1;
end 
// Arena_opcode[ 2 ]
initial
begin
	Arena_opcode[2] = 1'b0;
	Arena_opcode[2] = #80000 1'b1;
	Arena_opcode[2] = #80000 1'b0;
	Arena_opcode[2] = #80000 1'b1;
	Arena_opcode[2] = #80000 1'b0;
	Arena_opcode[2] = #80000 1'b1;
	Arena_opcode[2] = #160000 1'b0;
	Arena_opcode[2] = #160000 1'b1;
	Arena_opcode[2] = #240000 1'b0;
end 
// Arena_opcode[ 1 ]
initial
begin
	Arena_opcode[1] = 1'b1;
	Arena_opcode[1] = #160000 1'b0;
	Arena_opcode[1] = #80000 1'b1;
	Arena_opcode[1] = #80000 1'b0;
	Arena_opcode[1] = #160000 1'b1;
	Arena_opcode[1] = #80000 1'b0;
	Arena_opcode[1] = #80000 1'b1;
	Arena_opcode[1] = #80000 1'b0;
	Arena_opcode[1] = #160000 1'b1;
	Arena_opcode[1] = #80000 1'b0;
end 
// Arena_opcode[ 0 ]
initial
begin
	Arena_opcode[0] = 1'b0;
	Arena_opcode[0] = #160000 1'b1;
	Arena_opcode[0] = #240000 1'b0;
	Arena_opcode[0] = #80000 1'b1;
	Arena_opcode[0] = #80000 1'b0;
	Arena_opcode[0] = #80000 1'b1;
	Arena_opcode[0] = #80000 1'b0;
	Arena_opcode[0] = #80000 1'b1;
	Arena_opcode[0] = #160000 1'b0;
end 

// Arena_buttonStart
initial
begin
	Arena_buttonStart = 1'b1;
end 

Arena_bitwise_vlg_sample_tst tb_sample (
	.Arena_a_bitwiseIN(Arena_a_bitwiseIN),
	.Arena_b_bitwiseIN(Arena_b_bitwiseIN),
	.Arena_buttonStart(Arena_buttonStart),
	.Arena_opcode(Arena_opcode),
	.sampler_tx(sampler)
);

Arena_bitwise_vlg_check_tst tb_out(
	.Arena_result_bitwiseOUT(Arena_result_bitwiseOUT),
	.sampler_rx(sampler)
);
endmodule

